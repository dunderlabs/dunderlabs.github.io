<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>__labs__</title><link href="https://dunderlabs.github.io/" rel="alternate"></link><link href="https://dunderlabs.github.io/feeds/all.atom.xml" rel="self"></link><id>https://dunderlabs.github.io/</id><updated>2017-08-08T11:32:00-03:00</updated><entry><title>Seu primeiro teste automatizado com Django</title><link href="https://dunderlabs.github.io/seu-primeiro-teste-automatizado-com-django.html" rel="alternate"></link><updated>2017-08-08T11:32:00-03:00</updated><author><name>Patrick Mazulo</name></author><id>tag:dunderlabs.github.io,2017-08-08:seu-primeiro-teste-automatizado-com-django.html</id><summary type="html">&lt;p&gt;&lt;img alt="Django test" src="https://dunderlabs.github.io/images/posts/django_test.svg" /&gt;&lt;/p&gt;
&lt;p&gt;Créditos da imagem: &lt;a href="https://docs.djangoproject.com/en/1.11/topics/testing/tools"&gt;https://docs.djangoproject.com/en/1.11/topics/testing/tools&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Posts anteriores da série:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dunderlabs.github.io/django-boilerplate-a-estrutura-de-projeto-django-que-tenho-usado.html"&gt;Django Boilerplate: A estrutura de projeto Django que tenho usado&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dunderlabs.github.io/django-iniciando-seu-projeto.html"&gt;Django startproject: Iniciando o seu projeto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dunderlabs.github.io/django-configurando-seu-projeto.html"&gt;Configurando seu projeto Django&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fala pessoal, tudo beleza? Agora que nosso projeto já está configurado e funcionando, vamos começar a programar! E que maneira melhor do que já começar programando ao escrever seu primeiro teste automatizado com Django? Se você for novo em programação web, ou só ainda não tinha se preocupado com isso, pode se perguntar: qual a vantagem de escrever testes?&lt;/p&gt;
&lt;p&gt;Essa resposta pode ser tão longa que mereceria só um post pra ela, mas podemos resumir de maneira sucinta com uma única frase: vai te poupar &lt;strong&gt;muito&lt;/strong&gt; tempo em testar manualmente as funcionalidades do teu sistema, além de salvar sua vida.&lt;/p&gt;
&lt;p&gt;Escrever testes além de uma boa prática de programação (que inclusive está sendo cada vez mais requerida nas vagas para dev Python que tenho visto), é uma questão de segurança. Ao você ter testes que garantem a confiabilidade de uma feature do seu software, você tem mais &lt;strong&gt;flexibilidade&lt;/strong&gt; e principalmente &lt;strong&gt;segurança&lt;/strong&gt; em evoluir. Adicionar/remover features se tornam tarefas menos dolorosas, porque os seus testes vão garantir que essa alteração vai (ou não) impactar em outras áreas do sistema.&lt;/p&gt;
&lt;p&gt;Seguindo essa boa prática, o Django vai nos fornecer uma &lt;a href="https://docs.djangoproject.com/en/1.11/topics/testing/overview/"&gt;suíte de teste&lt;/a&gt; simplesmente sensacional! Essa suíte de teste usa a &lt;a href="https://docs.python.org/3/library/unittest.html#module-unittest"&gt;unittest&lt;/a&gt;, lib default do Python. Mas como ela funciona? Vamos ver como exemplo um trecho retirado da documentação oficial do Django. Digamos que nós temos um model &lt;code&gt;Animal&lt;/code&gt;, que poderia ser mais ou menos assim:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sound&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;The {} says &amp;quot;{}&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sound&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora como eu poderia testar esse model. Bom, o teste consistiria em poder garantir que um &lt;code&gt;Animal&lt;/code&gt; criado com um dado som, ao ser chamado seu método &lt;code&gt;.speak()&lt;/code&gt;, ele fale com o seu devido som. Vamos testar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.test&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TestCase&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Animal&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AnimalTestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lion&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sound&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;roar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sound&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;meow&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_animals_can_speak&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Animals that can speak are correctly identified&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;lion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lion&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lion&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;The lion says &amp;quot;roar&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;The cat says &amp;quot;meow&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O que está acontecendo? Vamos por partes. Eu tenho uma classe &lt;code&gt;AnimalTestCase&lt;/code&gt;, que vai herdar de &lt;a href="https://docs.djangoproject.com/en/1.11/topics/testing/tools/#django.test.TestCase"&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt;, que por sua vez é responsável por realizar testes que façam uso do banco de dados. O primeiro método que temos é o &lt;code&gt;setUp&lt;/code&gt;, onde serão criados no banco 2 animais: um leão e um gato. Esse será o primeiro método que vai ser rodado antes de cada teste. Após termos nosso &lt;code&gt;setUp&lt;/code&gt;, vamos ter o primeiro teste.&lt;/p&gt;
&lt;p&gt;O método &lt;code&gt;test_animals_can_speak&lt;/code&gt; vai verificar se os animais que foram criados antes, estão "falando" corretamente. De que maneira é feito isso? Vamos recuperar os 2 que foram criados anteriormente. Tendo-os salvos em variáveis, vamos usar o método &lt;a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertEqual"&gt;&lt;code&gt;.assertEqual&lt;/code&gt;&lt;/a&gt;, que vai verificar se o primeiro argumento passado é igual ao segundo. Vamos olhar essa parte mais de perto:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lion&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;The lion says &amp;quot;roar&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;The cat says &amp;quot;meow&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lembram que o nosso model &lt;code&gt;Animal&lt;/code&gt; tem um método &lt;code&gt;.speak()&lt;/code&gt; que vai retornar um texto usando o &lt;code&gt;name&lt;/code&gt; e &lt;code&gt;sound&lt;/code&gt; para formatar o texto. Sabendo disso, eu faço a chamada desse método como primeiro argumento, e no segundo usarei o que eu estou esperando que seja a saída correta. Farei isso tanto para o &lt;em&gt;lion&lt;/em&gt; quando para o &lt;em&gt;cat&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Uma vez que você tem o teste escrito, tá na hora de... &lt;strong&gt;testar!&lt;/strong&gt; Para isso, o Django vai nos disponibilizar um comando chamado &lt;code&gt;test&lt;/code&gt;. Simples assim: &lt;code&gt;python manage.py test&lt;/code&gt;. Ao executar esse comando, o Django vai procurar por qualquer arquivo nomeado &lt;code&gt;test*.py&lt;/code&gt; dentro do diretório do projeto. Supondo que tivéssemos realmente um projeto Django para esse model &lt;code&gt;Animal&lt;/code&gt;, e se fôssemos rodar os testes dele, teríamos como execução e output do terminal algo mais ou menos como isso:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py &lt;span class="nb"&gt;test&lt;/span&gt;
Creating &lt;span class="nb"&gt;test &lt;/span&gt;database &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;...
System check identified no issues &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; silenced&lt;span class="o"&gt;)&lt;/span&gt;.

----------------------------------------------------------------------
Ran &lt;span class="m"&gt;1&lt;/span&gt; tests in 0.017s

OK
Destroying &lt;span class="nb"&gt;test &lt;/span&gt;database &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como mencionado anteriormente, estaremos fazendo uso do banco de dados para criar instâncias dos nossos models e salvá-los. Mas para isso, não faria o menor sentido usar o banco que você vai estar usando para desenvolvimento. Para isso, o Django vai criar um banco de teste. Depois de criar, agora sim os testes serão executados em ordem. Ao finalizar, o mesmo banco criado será destruído.&lt;/p&gt;
&lt;p&gt;Temos já uma noção básica do que são testes, para quê servem, como criar e executá-los. Agora vamos fazer o primeiro teste para a nossa aplicação. Se você acessar &lt;code&gt;backend/core/&lt;/code&gt; do nosso projeto, vai ver que já existe um arquivo chamado &lt;code&gt;tests.py&lt;/code&gt; vazio, e será nele que criaremos os nossos testes. Neste momento você deve estar se perguntando:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"Beleza, mas o que nós vamos testar? Não temos sequer 1 model!"&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;O que é verdade, mas temos algo que já usamos inclusive nos capítulos anteriores dessa série: uma view. Se você acessar o arquivo &lt;code&gt;backend/core/views.py&lt;/code&gt; vai encontrar o seguinte código:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;generic&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;IndexView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TemplateView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;template_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;core/index.html&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Estamos usando &lt;a href="https://docs.djangoproject.com/en/1.11/topics/class-based-views/intro/"&gt;class-based views&lt;/a&gt;, o que inicialmente pode não fazer muito sentido. Mas calma, ainda vamos abordar com mais carinho essa parte. Por agora, o que a CBV (class-based view) &lt;a href="https://docs.djangoproject.com/en/1.11/ref/class-based-views/base/#templateview"&gt;generic.TemplateView&lt;/a&gt; que nada mais faz do que basicamente renderizar um template fornecido. No caso, estamos fornecendo o path de um no atributo &lt;code&gt;template_name&lt;/code&gt;. Uma coisa importante para sabermos e que veremos na prática, é que os testes consistem também em cobrir todas as camadas básicas da nossa aplicação: models, forms e views. No caso desse teste que faremos agora, vamos para a view.&lt;/p&gt;
&lt;p&gt;Sem mais delongas, vamos codar. Dentro daquele arquivo &lt;code&gt;tests.py&lt;/code&gt; você vai codar o seguinte conteúdo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.test&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TestCase&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.urlresolvers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;IndexViewTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;core:index&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_response_200&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como fizemos antes, estaremos usando a classe &lt;code&gt;TestCase&lt;/code&gt; e criaremos uma &lt;code&gt;IndexViewTest&lt;/code&gt; que herdará da primeira. Essa suite de testes será responsável por cobrir as funcionalidades da nossa view index. No método &lt;code&gt;setUp&lt;/code&gt; salvarei a URL que estaremos acessando sempre nos testes, e para isso usaremos a função &lt;a href="https://docs.djangoproject.com/en/1.11/ref/urlresolvers/#reverse"&gt;&lt;code&gt;reverse&lt;/code&gt;&lt;/a&gt; que tratará de transformar esse namespace &lt;code&gt;'core:index'&lt;/code&gt; em uma URL válida. &lt;/p&gt;
&lt;p&gt;Feito isso, criaremos o teste &lt;code&gt;test_response_200&lt;/code&gt; que irá nos garantir que ao acessar a nossa página inicial, teremos um &lt;a href="https://httpstatusdogs.com/200-ok"&gt;status_code 200&lt;/a&gt;. Para tal, usaremos o &lt;a href="https://docs.djangoproject.com/en/1.11/topics/testing/tools/#django.test.Client"&gt;&lt;code&gt;self.client&lt;/code&gt;&lt;/a&gt;, que nada mais é do que uma instância da classe &lt;a href="https://docs.djangoproject.com/en/1.11/_modules/django/test/client/#Client"&gt;&lt;code&gt;Client&lt;/code&gt;&lt;/a&gt; do Django que atua como um cliente http que pode ser usado para testar desde API até uma página qualquer. Em outras palavras: ele vai agir como o navegador para que você possa interagir com as suas views, seja com &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt; ou qualquer outra ação HTTP. Entendida essa parte, vamos seguir adiante. Iremos salvar o resultado desse GET na variável &lt;code&gt;response&lt;/code&gt;, e a seguir usaremos novamente o &lt;code&gt;self.assertEqual&lt;/code&gt; para confirmar que o &lt;code&gt;response.status_code&lt;/code&gt; é igual a 200.&lt;/p&gt;
&lt;p&gt;Pronto, criado nosso teste, vamos... &lt;strong&gt;testar!&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Obs.: Como estamos usando uma estrutura diferente de projeto, para rodar nossos testes usaremos um comando um pouco diferente do normal.
Ao invés de usar &lt;code&gt;python manage.py test&lt;/code&gt;, vamos usar &lt;code&gt;python manage.py test backend&lt;/code&gt;. Uma vez que o diretório &lt;code&gt;backend&lt;/code&gt; será o local onde estará nossas apps, nossos testes consequentemente estarão lá também. Ao passar dessa maneira, informamos que o Django tem que procurar os testes ali dentro, e o resto pode deixar que ele se vira. Adicionalmente, passaremos a flag &lt;code&gt;v&lt;/code&gt; para termos um output um pouco mais verboso, e assim entendermos o que está acontecendo.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py &lt;span class="nb"&gt;test &lt;/span&gt;backend -v 2
Creating &lt;span class="nb"&gt;test &lt;/span&gt;database &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test_turbo_send_mail&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;...
Operations to perform:
  Synchronize unmigrated apps: compressor, messages, sitemaps, staticfiles
  Apply all migrations: admin, auth, contenttypes, sessions, sites
Synchronizing apps without migrations:
  Creating tables...
    Running deferred SQL...
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying auth.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying auth.0008_alter_user_username_max_length... OK
  Applying sessions.0001_initial... OK
  Applying sites.0001_initial... OK
  Applying sites.0002_alter_domain_unique... OK
System check identified no issues &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; silenced&lt;span class="o"&gt;)&lt;/span&gt;.
test_response_200 &lt;span class="o"&gt;(&lt;/span&gt;core.tests.IndexViewTest&lt;span class="o"&gt;)&lt;/span&gt; ... ok

----------------------------------------------------------------------
Ran &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="nb"&gt;test &lt;/span&gt;in 0.245s

OK
Destroying &lt;span class="nb"&gt;test &lt;/span&gt;database &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test_turbo_send_mail&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Com essa saída podemos ver o que está acontecendo: O Django está criando o banco de dados para o teste, roda as migrações (como não temos models e, portanto, não geramos migrações, só teremos as do Django) e por fim executa o teste. Estando correto, teremos um &lt;code&gt;ok&lt;/code&gt; como o que está lá. Agora eu vou fazer uma pequena alteração no código para que ele falhe, apenas para podermos ver qual seria a saída. Então vou mudar o segundo argumento do &lt;code&gt;self.assertEqual&lt;/code&gt; de 200 para 300, e rodar novamente os testes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py &lt;span class="nb"&gt;test &lt;/span&gt;backend -v 2
&lt;span class="o"&gt;[&lt;/span&gt;mais...&lt;span class="o"&gt;]&lt;/span&gt;
test_response_200 &lt;span class="o"&gt;(&lt;/span&gt;core.tests.IndexViewTest&lt;span class="o"&gt;)&lt;/span&gt; ... &lt;span class="nv"&gt;FAIL&lt;/span&gt;

&lt;span class="o"&gt;======================================================================&lt;/span&gt;
FAIL: test_response_200 &lt;span class="o"&gt;(&lt;/span&gt;core.tests.IndexViewTest&lt;span class="o"&gt;)&lt;/span&gt;
----------------------------------------------------------------------
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;&amp;quot;/home/mazulo/dev/github/dunderlabs/turbo_send_mail_project/backend/core/tests.py&amp;quot;&lt;/span&gt;, line 14, in test_response_200
    self.assertEqual&lt;span class="o"&gt;(&lt;/span&gt;response.status_code, 300&lt;span class="o"&gt;)&lt;/span&gt;
AssertionError: &lt;span class="m"&gt;200&lt;/span&gt; !&lt;span class="o"&gt;=&lt;/span&gt; 300

----------------------------------------------------------------------
Ran &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="nb"&gt;test &lt;/span&gt;in 0.141s

FAILED &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;failures&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1&lt;span class="o"&gt;)&lt;/span&gt;
Destroying &lt;span class="nb"&gt;test &lt;/span&gt;database &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test_turbo_send_mail&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Cada teste que falhar, vai nos trazer um traceback com as informações necessárias para que saibamos qual arquivo, teste e em qual linha ele falhou. Ao lermos, sabemos que no &lt;code&gt;AssertionError: 200 != 300&lt;/code&gt;. Ou seja, o nosso &lt;code&gt;response.status_code&lt;/code&gt; é 200, mas estamos comparando com 300. Pronto, feito isso, voltamos o nosso código para 200 e assim funcione bem.&lt;/p&gt;
&lt;p&gt;Agora pare um pouco, e vislumbre: você escreveu seu primeiro teste! :D Mas não vamos parar aí, antes de finalizarmos esse post, vamos escrever mais um, e vai ser o seguinte:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_template_used&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertTemplateUsed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;core/index.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Adicione mais esse teste no arquivo &lt;code&gt;tests.py&lt;/code&gt;. O nome do método é bem intuitivo: &lt;code&gt;test_template_used&lt;/code&gt; será onde iremos verificar se naquele response está sendo renderizado o nosso template fornecido na nossa view. Feito isso, vamos rodar mais uma vez e ver o resultado:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py &lt;span class="nb"&gt;test &lt;/span&gt;backend     
Creating &lt;span class="nb"&gt;test &lt;/span&gt;database &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;...
System check identified no issues &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; silenced&lt;span class="o"&gt;)&lt;/span&gt;.
..
----------------------------------------------------------------------
Ran &lt;span class="m"&gt;2&lt;/span&gt; tests in 0.260s

OK
Destroying &lt;span class="nb"&gt;test &lt;/span&gt;database &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Dessa vez retirei a flag de verbosidade, porque uma vez que sabemos aqueles detalhes, podemos nos atentar para um output mais limpo. E como podemos ver, nossos 2 testes passaram com sucesso!&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://media.giphy.com/media/yoJC2GnSClbPOkV0eA/giphy.gif" /&gt;&lt;/p&gt;
&lt;p&gt;Agora uma rápida otimizada: para não termos que digitar sempre isso tudo &lt;code&gt;python manage.py test backend&lt;/code&gt;, podemo colocar isso dentro do nosso arquivo &lt;code&gt;Makefile&lt;/code&gt; e usar uma chamada menor. Ao final do arquivo, você adicionaria:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    python manage.py &lt;span class="nb"&gt;test &lt;/span&gt;backend
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Após isso, você poderá chamar somente &lt;code&gt;make test&lt;/code&gt; e terá os testes sendo executados. Pronto? Quase. Lembram que estamos utilizando o git? Fizemos algumas alterações no nosso projeto, então está na hora de commitar! Ao verificar o status do seu repositório local, verá que temos alterações em 2 arquivos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git status
On branch master
Changes not staged &lt;span class="k"&gt;for&lt;/span&gt; commit:
  &lt;span class="o"&gt;(&lt;/span&gt;use &lt;span class="s2"&gt;&amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot;&lt;/span&gt; to update what will be committed&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;(&lt;/span&gt;use &lt;span class="s2"&gt;&amp;quot;git checkout -- &amp;lt;file&amp;gt;...&amp;quot;&lt;/span&gt; to discard changes in working directory&lt;span class="o"&gt;)&lt;/span&gt;

    modified:   Makefile
    modified:   backend/core/tests.py

no changes added to commit &lt;span class="o"&gt;(&lt;/span&gt;use &lt;span class="s2"&gt;&amp;quot;git add&amp;quot;&lt;/span&gt; and/or &lt;span class="s2"&gt;&amp;quot;git commit -a&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Exatamente os dois que modificamos no decorrer do post. Se você quiser saber o que está de diferente, basta executar &lt;code&gt;git diff&lt;/code&gt;. Com ele, você vai ter um output muito parecido com esse:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gh"&gt;diff --git a/Makefile b/Makefile&lt;/span&gt;
&lt;span class="gh"&gt;index 8e8bcd0..0255049 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/Makefile&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/Makefile&lt;/span&gt;
&lt;span class="gu"&gt;@@ -26,3 +26,6 @@ install-dev-requirements:&lt;/span&gt;

 setup-frontend:
        bower install --allow-root
&lt;span class="gi"&gt;+&lt;/span&gt;
&lt;span class="gi"&gt;+test:&lt;/span&gt;
&lt;span class="gi"&gt;+       python manage.py test backend&lt;/span&gt;
&lt;span class="gh"&gt;diff --git a/backend/core/tests.py b/backend/core/tests.py&lt;/span&gt;
&lt;span class="gh"&gt;index e69de29..5ae4aae 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/backend/core/tests.py&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/backend/core/tests.py&lt;/span&gt;
&lt;span class="gu"&gt;@@ -0,0 +1,19 @@&lt;/span&gt;
&lt;span class="gi"&gt;+from django.test import TestCase&lt;/span&gt;
&lt;span class="gi"&gt;+from django.core.urlresolvers import reverse&lt;/span&gt;
&lt;span class="gi"&gt;+&lt;/span&gt;
&lt;span class="gi"&gt;+&lt;/span&gt;
&lt;span class="gi"&gt;+class IndexViewTest(TestCase):&lt;/span&gt;
&lt;span class="gi"&gt;+&lt;/span&gt;
&lt;span class="gi"&gt;+    def setUp(self):&lt;/span&gt;
&lt;span class="gi"&gt;+&lt;/span&gt;
&lt;span class="gi"&gt;+        self.url = reverse(&amp;#39;core:index&amp;#39;)&lt;/span&gt;
&lt;span class="gi"&gt;+&lt;/span&gt;
&lt;span class="gi"&gt;+    def test_response_200(self):&lt;/span&gt;
&lt;span class="gi"&gt;+        response = self.client.get(self.url)&lt;/span&gt;
&lt;span class="gi"&gt;+&lt;/span&gt;
&lt;span class="gi"&gt;+        self.assertEqual(response.status_code, 200)&lt;/span&gt;
&lt;span class="gi"&gt;+&lt;/span&gt;
&lt;span class="gi"&gt;+    def test_template_used(self):&lt;/span&gt;
&lt;span class="gi"&gt;+        response = self.client.get(self.url)&lt;/span&gt;
&lt;span class="gi"&gt;+&lt;/span&gt;
&lt;span class="gi"&gt;+        self.assertTemplateUsed(response, &amp;#39;core/index.html&amp;#39;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nele você vai saber quais arquivos foram alterados, e quais as alterações. O &lt;code&gt;+&lt;/code&gt; indica que houveram adições de conteúdo no arquivo, e o &lt;code&gt;-&lt;/code&gt; a remoção. No nosso caso, só vamos ter adição. Feito isso, vamos adicionar essa mudança e commitar. Mas, faremos por partes. Uma coisa muito importante quando se trata de versionamento de código e commits, é ter tudo muito bem organizado. Um commit é como se fosse um &lt;em&gt;checkpoint&lt;/em&gt; do seu código. Você vai estar incorporando de fato uma alteração no seu repositório, e dando a ela um significado (mensagem do commit). Vimos um pouco disso no post passado.&lt;/p&gt;
&lt;p&gt;Beleza, vamos começar adicionando o nosso &lt;code&gt;tests.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git add backend/core/tests.py 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Depois disso, &lt;code&gt;git commit&lt;/code&gt; que vai nos levar para aquela tela para que possamos escrever a mensagem do commit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Add IndexViewTest
&lt;span class="c"&gt;# Please enter the commit message for your changes. Lines starting&lt;/span&gt;
&lt;span class="c"&gt;# with &amp;#39;#&amp;#39; will be ignored, and an empty message aborts the commit.&lt;/span&gt;
&lt;span class="c"&gt;# On branch master&lt;/span&gt;
&lt;span class="c"&gt;# Changes to be committed:&lt;/span&gt;
&lt;span class="c"&gt;#       modified:   backend/core/tests.py&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# Changes not staged for commit:&lt;/span&gt;
&lt;span class="c"&gt;#       modified:   Makefile&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O mesmo para o &lt;code&gt;Makefile&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git add Makefile 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;e por fim &lt;code&gt;git commit&lt;/code&gt; novamente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Add &lt;span class="nb"&gt;test command &lt;/span&gt;to makefile
&lt;span class="c"&gt;# Please enter the commit message for your changes. Lines starting&lt;/span&gt;
&lt;span class="c"&gt;# with &amp;#39;#&amp;#39; will be ignored, and an empty message aborts the commit.&lt;/span&gt;
&lt;span class="c"&gt;# On branch master&lt;/span&gt;
&lt;span class="c"&gt;# Changes to be committed:&lt;/span&gt;
&lt;span class="c"&gt;#       modified:   Makefile&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E pra fechar com chave de ouro, vamos enviar nossas alterações para o GitHub:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git push github master
Counting objects: 8, &lt;span class="k"&gt;done&lt;/span&gt;.
Delta compression using up to &lt;span class="m"&gt;4&lt;/span&gt; threads.
Compressing objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;8/8&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
Writing objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;8/8&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;972&lt;/span&gt; bytes &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; bytes/s, &lt;span class="k"&gt;done&lt;/span&gt;.
Total &lt;span class="m"&gt;8&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;delta 4&lt;span class="o"&gt;)&lt;/span&gt;, reused &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;delta 0&lt;span class="o"&gt;)&lt;/span&gt;
remote: Resolving deltas: 100% &lt;span class="o"&gt;(&lt;/span&gt;4/4&lt;span class="o"&gt;)&lt;/span&gt;, completed with &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="nb"&gt;local &lt;/span&gt;objects.
To github.com:dunderlabs/turbo_send_mail.git
   de47897..7ebcfa5  master -&amp;gt; master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora sim, podemos dormir em paz :) Ainda há &lt;strong&gt;muita coisa&lt;/strong&gt; dentro desse tema chamado testes, mas vamos vendo aos poucos e com calma. Dessa maneira, conforme nossa aplicação for crescendo, vamos nos acostumando cada vez mais. Por hoje, vamos ficar por aqui. No próximo post vamos começar a dar uma olhada no models do Django. Então fica ligado :D&lt;/p&gt;
&lt;p&gt;Dúvidas e/ou críticas, só visitar os comentários mais abaixo. Valeu pessoal, e até a próxima!&lt;/p&gt;</summary><category term="django"></category><category term="django-serie"></category></entry><entry><title>Configurando seu projeto Django</title><link href="https://dunderlabs.github.io/django-configurando-seu-projeto.html" rel="alternate"></link><updated>2017-08-04T04:54:00-03:00</updated><author><name>Patrick Mazulo</name></author><id>tag:dunderlabs.github.io,2017-08-04:django-configurando-seu-projeto.html</id><summary type="html">&lt;p&gt;&lt;img alt="Criando repositório no GitHub" src="https://dunderlabs.github.io/images/posts/criar-repositorio-github.png" /&gt;&lt;/p&gt;
&lt;p&gt;Posts anteriores da série:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dunderlabs.github.io/django-boilerplate-a-estrutura-de-projeto-django-que-tenho-usado.html"&gt;Django Boilerplate: A estrutura de projeto Django que tenho usado&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dunderlabs.github.io/django-iniciando-seu-projeto.html"&gt;Django startproject: Iniciando o seu projeto&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fala pessoal, tudo beleza? Vamos dar continuidade a nossa série de posts sobre Django. Nós já conhecemos a estrutura do template de projeto que usaremos, demos o &lt;code&gt;startproject&lt;/code&gt; usando ele, então agora vamos começar a brincar com Django. Claro, nessa série nós não vamos ver só e somente Python/Django, mas pretendo abordar um pouquinho de cada coisa que envolve o desenvolvimento de software. Não vou me aprofundar muito, mas pretendo mostrar o pouquinho que já sei :)&lt;/p&gt;
&lt;p&gt;Bom, antes de qualquer coisa, o que nós faremos será renomear algumas coisas no nosso projeto. Vocês vão ver que em alguns arquivos, como no &lt;code&gt;app.json&lt;/code&gt;, você verá referências para "DjangoBoilerplate". Sua missão será renomear essas referências com o nome do nosso projeto "TurboSendMail". Você vai fazer isso em:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;app.json&lt;/code&gt; (atualizar "name")&lt;/li&gt;
&lt;li&gt;&lt;code&gt;README.md&lt;/code&gt; (mudar informações gerais, nesse você está livre para colocar o que quiser)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bower.json&lt;/code&gt; (atualizar "name" e "authors")&lt;/li&gt;
&lt;li&gt;&lt;code&gt;package.json&lt;/code&gt; (atualizar "name", "description" e "repository", esse último com o link do seu repositório no github)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Feito isso, quero fazer uma pergunta: você já sabe o que é &lt;a href="https://git-scm.com/book/pt-br/v1/Primeiros-passos-Sobre-Controle-de-Vers%C3%A3o"&gt;Controle de Versão&lt;/a&gt; dentro do contexto do mundo do software? Caso não, dá uma lida nesse post que linkei antes de nós podermos continuar. Pronto? Vamos continuar então.&lt;/p&gt;
&lt;p&gt;Para essa série de posts, nós vamos utilizar o &lt;a href="https://git-scm.com/"&gt;Git&lt;/a&gt; para o nosso versionamento. Se você ainda não havia mexido com ele antes, no mesmo site você vai encontrar uma seção para o livro &lt;a href="https://git-scm.com/book/pt-br/v2"&gt;Pro Git v2&lt;/a&gt;, com o primeiro capítulo traduzido para pt_BR. A &lt;a href="https://git-scm.com/book/pt-br/v1"&gt;v1&lt;/a&gt; está &lt;s&gt;quase&lt;/s&gt; completamente traduzida. Tirando ele, você vai poder encontrar muito material bacana sobre na web.&lt;/p&gt;
&lt;p&gt;Conforme formos usando os comandos, vou dando rápidas explicações sobre os comandos. Então, let's go! O primeiro que vamos usar, vai ser como poderíamos esperar, o comando para iniciar. No git, ele vai ser o &lt;code&gt;git init&lt;/code&gt;. Então uma vez dentro do diretório do seu projeto, você vai executar esse comando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git init
Initialized empty Git repository in /home/mazulo/dev/github/dunderlabs/turbo_send_mail_project/.git/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como o comando vai mostrar pra você, o que ele vai fazer é criar um diretório &lt;code&gt;.git/&lt;/code&gt; dentro do diretório do seu projeto. Ele vai ser usado pelo Git para gerenciar esse diretório (ou repositório) localmente e remotamente. Só isso? Quase. Uma prática mais do que comum também é você deixar salvo o seu código na ~nuvem~. Existem alguns serviços web para isso, porém os 3 mais conhecidos são:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bitbucket.org"&gt;BitBucket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gitlab.com"&gt;GitLab&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cada um vai ter sua vantagem e desvantagem, mas há a unanimidade em usar o GitHub (que já virou sinônimo de Open Source) para projetos. Além da sua facilidade no uso. Por esse e outros motivos, usaremos ele. Após você criar sua conta, poderá criar repositórios públicos, da maneira como mostra a imagem abaixo que seria a criação de um repositório para hospedar o nosso código.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Criando repositório no GitHub" src="https://dunderlabs.github.io/images/posts/criar-repositorio-github.png" /&gt;&lt;/p&gt;
&lt;p&gt;Você pode, claro, mudar o nome do repositório e a descrição. Só &lt;strong&gt;não marque&lt;/strong&gt; aquele checkbox com texto "Initialize this repository with a README". Após preencher nome e descrição (esse último opcional), basta clicar em "Criar repositório". Após isso, você verá uma dela semelhante a essa abaixo:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Criando repositório no GitHub" src="https://dunderlabs.github.io/images/posts/add_remote_github.png" /&gt;&lt;/p&gt;
&lt;p&gt;Você verá que tem duas opções: uma criando um repositório com o &lt;code&gt;git init&lt;/code&gt;, cria um arquivo e executa alguns outros comandos antes de enviar o código (que não é o nosso caso uma vez que já fizemos isso), e outra abordagem onde você adiciona o endereço para o seu repositório online. Vamos fazer um pouco de cada. Vamos lá.&lt;/p&gt;
&lt;p&gt;Uma vez que já demos o &lt;em&gt;init&lt;/em&gt; com o Git, vamos adicionar o nosso repositório remoto ao nosso local. Faremos isso usando o &lt;code&gt;git remote&lt;/code&gt; usando a opção &lt;code&gt;add&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git remote add github git@github.com:dunderlabs/turbo_send_mail.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Você vê que eu estou passando para o comando &lt;code&gt;add&lt;/code&gt; um nome &lt;code&gt;github&lt;/code&gt; antes da URL, certo? Esse vai ser o "nome" do nosso repositório remoto. Porque isso? 2 motivos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Você não iria querer digitar aquela URL toda vez que quiser enviar seu código para o GitHub&lt;/li&gt;
&lt;li&gt;Você pode ter mais de um endereço. Por exemplo, ter o seu código no GitHub e no GitLab. Seriam 2 URLs, com 2 nomes diferentes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para você saber quais &lt;em&gt;remote&lt;/em&gt;'s você está usando, basta executar o seguinte comando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git remote -v
github  git@github.com:dunderlabs/turbo_send_mail.git &lt;span class="o"&gt;(&lt;/span&gt;fetch&lt;span class="o"&gt;)&lt;/span&gt;
github  git@github.com:dunderlabs/turbo_send_mail.git &lt;span class="o"&gt;(&lt;/span&gt;push&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Certo, agora vamos dar uma olhada em como nosso repositório local está, e pra isso usaremos o comando &lt;code&gt;git status&lt;/code&gt;. Você verá uma saída parecida com essa, mostrando os arquivos que não estão sendo rastreados ou que foram alterados.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git status
On branch master

Initial commit

Untracked files:
  &lt;span class="o"&gt;(&lt;/span&gt;use &lt;span class="s2"&gt;&amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot;&lt;/span&gt; to include in what will be committed&lt;span class="o"&gt;)&lt;/span&gt;

    .bowerrc
    .gitignore
    Makefile
    Procfile
    README.md
    app.json
    backend/
    bin/
    bower.json
    example.env
    frontend/
    manage.py
    package.json
    requirements.txt
    requirements/
    runtime.txt
    settings/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Beleza, agora vamos adicionar todos esses arquivos e diretórios para serem rastreados. Uma vez feito isso, o Git vai ter um registro de cada alteração feita dentro desse nosso repositório.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git add .
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Após adicionar, e você executar mais uma vez o &lt;code&gt;git status&lt;/code&gt;, vai notar que a mensagem está diferente. Ele está reconhecendo todos, e aguardando para que possamos escrever nossa mensagem de commit, registrando assim essa alteração.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git status
On branch master

Initial commit

Changes to be committed:
  &lt;span class="o"&gt;(&lt;/span&gt;use &lt;span class="s2"&gt;&amp;quot;git rm --cached &amp;lt;file&amp;gt;...&amp;quot;&lt;/span&gt; to unstage&lt;span class="o"&gt;)&lt;/span&gt;

    new file:   .bowerrc
    new file:   .gitignore
    new file:   Makefile
    new file:   Procfile
    new file:   README.md
    new file:   app.json
    new file:   backend/core/__init__.py
    new file:   backend/core/admin.py
    new file:   backend/core/apps.py
    new file:   backend/core/forms.py
    new file:   backend/core/migrations/__init__.py
&lt;span class="o"&gt;[&lt;/span&gt;mais...&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ao você executar &lt;code&gt;git commit&lt;/code&gt;, você provavelmente vai ser jogado no editor de texto &lt;a href="https://en.wikipedia.org/wiki/GNU_nano"&gt;Nano&lt;/a&gt;, ou no &lt;a href="https://www.vim.org/"&gt;Vim&lt;/a&gt;. Estando em algum desses, você vai poder escrever sua mensagem de commit. A minha vai ser: "Start project".&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Start project
&lt;span class="c"&gt;# Please enter the commit message for your changes. Lines starting&lt;/span&gt;
&lt;span class="c"&gt;# with &amp;#39;#&amp;#39; will be ignored, and an empty message aborts the commit.&lt;/span&gt;
&lt;span class="c"&gt;# On branch master&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# Initial commit&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# Changes to be committed:&lt;/span&gt;
&lt;span class="c"&gt;#       new file:   .bowerrc&lt;/span&gt;
&lt;span class="c"&gt;#       new file:   .gitignore&lt;/span&gt;
&lt;span class="c"&gt;#       new file:   Makefile&lt;/span&gt;
&lt;span class="c"&gt;#       new file:   Procfile&lt;/span&gt;
&lt;span class="c"&gt;#       new file:   README.md&lt;/span&gt;
&lt;span class="c"&gt;#       new file:   app.json&lt;/span&gt;
&lt;span class="c"&gt;#       new file:   backend/core/__init__.py&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;mais...&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora só resta uma coisa: enviar o nosso código para o nosso repositório remoto, lá no GitHub. Para isso, vamos usar o &lt;code&gt;git push&lt;/code&gt;. Seguido desse comando, você vai informar para qual repositório remoto você quer enviar, e qual branch local.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git push github master
Counting objects: 47, &lt;span class="k"&gt;done&lt;/span&gt;.
Delta compression using up to &lt;span class="m"&gt;4&lt;/span&gt; threads.
Compressing objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;37/37&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
Writing objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;47/47&lt;span class="o"&gt;)&lt;/span&gt;, 7.98 KiB &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; bytes/s, &lt;span class="k"&gt;done&lt;/span&gt;.
Total &lt;span class="m"&gt;47&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;delta 3&lt;span class="o"&gt;)&lt;/span&gt;, reused &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;delta 0&lt;span class="o"&gt;)&lt;/span&gt;
remote: Resolving deltas: 100% &lt;span class="o"&gt;(&lt;/span&gt;3/3&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
To github.com:dunderlabs/turbo_send_mail.git
 * &lt;span class="o"&gt;[&lt;/span&gt;new branch&lt;span class="o"&gt;]&lt;/span&gt;      master -&amp;gt; master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tudo maravilha. Agora vamos configurar o nosso &lt;code&gt;.env&lt;/code&gt;. Lembra que temos um arquivo &lt;code&gt;example.env&lt;/code&gt; no nosso boilerplate? Vamos usar ele agora. O conteúdo dele vai ser esse debaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Rename to .env&lt;/span&gt;
&lt;span class="nv"&gt;DATABASE_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;postgres://user:password@localhost:5432/database_name&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;DEBUG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True

&lt;span class="nv"&gt;SECRET_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;put-an-awesome-secret-key-here

&lt;span class="nv"&gt;STATIC_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nv"&gt;MEDIA_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;

&lt;span class="c"&gt;# Email settings&lt;/span&gt;
&lt;span class="nv"&gt;DEFAULT_FROM_EMAIL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nv"&gt;EMAIL_BACKEND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;django.core.mail.backends.console.EmailBackend
&lt;span class="nv"&gt;EMAIL_HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nv"&gt;SENDGRID_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nv"&gt;SENDGRID_USERNAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nv"&gt;EMAIL_PORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;587
&lt;span class="nv"&gt;EMAIL_USE_TLS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Eu sugiro usar o banco de dados postgres também para o desenvolvimento, mas caso você não o tenha instalado e por algum motivo não possa instalar agora, não precisa. Se você não usar, o &lt;a href="https://pypi.python.org/pypi/python-decouple"&gt;python-decouple&lt;/a&gt; vai usar outros valores. No caso do banco de dados, ao invés de usar um Postgres, usará o SQLite. Mas, vou seguir como se fôssemos utilizar a primeira opção. Para isso, vou primeiro criar o banco na minha máquina:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;createdb turbo_send_mail
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Após criar, basta mudar as credenciais em &lt;code&gt;DATABASE_URL&lt;/code&gt; do nosso arquivo. Mas antes disso, vamos fazer uma cópia dele e renomear para .env&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cp example.env .env
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora abrindo o esse novo arquivo, vamos substituir alguns valores. Ao final, ele deverá ficar parecido com isso:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Rename to .env&lt;/span&gt;
&lt;span class="nv"&gt;DATABASE_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;postgres://mazulo@localhost:5432/turbo_send_mail
&lt;span class="nv"&gt;DEBUG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True

&lt;span class="nv"&gt;SECRET_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;cb%k3i&lt;span class="nv"&gt;$$&lt;/span&gt;r2ku69te*2+ikhuwr7ve07kb&lt;span class="o"&gt;(&lt;/span&gt;nasfvbnkag3&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;8k%4
&lt;span class="nv"&gt;ALLOWED_HOSTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;127.0.0.1

&lt;span class="nv"&gt;STATIC_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/static/
&lt;span class="nv"&gt;MEDIA_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/media/

&lt;span class="c"&gt;# Email settings&lt;/span&gt;
&lt;span class="nv"&gt;DEFAULT_FROM_EMAIL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nv"&gt;EMAIL_BACKEND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;django.core.mail.backends.console.EmailBackend
&lt;span class="nv"&gt;EMAIL_HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nv"&gt;SENDGRID_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nv"&gt;SENDGRID_USERNAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nv"&gt;EMAIL_PORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;587
&lt;span class="nv"&gt;EMAIL_USE_TLS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Veja que substituí o anterior &lt;code&gt;postgres://user:password@localhost:5432/database_name&lt;/code&gt; por &lt;code&gt;postgres://mazulo@localhost:5432/turbo_send_mail&lt;/code&gt;. No meu caso, eu não coloquei a senha, porque configurei o meu postgres para localmente não precisar de autenticação. Aquela SECRET_KEY eu gerei usando um trecho de código desse &lt;a href="https://gist.github.com/ndarville/3452907"&gt;gist&lt;/a&gt;. Você não precisa se preocupar com os dados de email, por enquanto. Veremos isso depois.&lt;/p&gt;
&lt;p&gt;Pronto, temos nosso banco criado e as credenciais salvas no nosso &lt;code&gt;.env&lt;/code&gt;. Agora lembra daquela mensagem que vimos no post anterior ao rodar o &lt;code&gt;runserver&lt;/code&gt; sobre migrações não aplicadas? Então, agora que temos nosso banco, vamos aplicá-las. Sobre elas, vamos falar mais para frente :)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, sessions, sites
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying auth.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying auth.0008_alter_user_username_max_length... OK
  Applying sessions.0001_initial... OK
  Applying sites.0001_initial... OK
  Applying sites.0002_alter_domain_unique... OK
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para termos certeza que está tudo OK, você pode acessar o seu banco localmente, e ver as tabelas que foram criadas. A seguir, você vai ver respectivamente os comandos utilizados para: acessar o shell do postgres, listar os bancos, conectar em um deles e mostrar as tabelas desse banco.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;psql postgres
psql &lt;span class="o"&gt;(&lt;/span&gt;9.6.3&lt;span class="o"&gt;)&lt;/span&gt;
Type &lt;span class="s2"&gt;&amp;quot;help&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; help.

&lt;span class="nv"&gt;postgres&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="c"&gt;# \l&lt;/span&gt;
                                     List of databases
      Name       &lt;span class="p"&gt;|&lt;/span&gt;  Owner   &lt;span class="p"&gt;|&lt;/span&gt; Encoding &lt;span class="p"&gt;|&lt;/span&gt;   Collate   &lt;span class="p"&gt;|&lt;/span&gt;    Ctype    &lt;span class="p"&gt;|&lt;/span&gt;   Access privileges   
-----------------+----------+----------+-------------+-------------+-----------------------
 turbo_send_mail &lt;span class="p"&gt;|&lt;/span&gt; mazulo   &lt;span class="p"&gt;|&lt;/span&gt; UTF8     &lt;span class="p"&gt;|&lt;/span&gt; en_US.UTF-8 &lt;span class="p"&gt;|&lt;/span&gt; en_US.UTF-8 &lt;span class="p"&gt;|&lt;/span&gt;

&lt;span class="nv"&gt;postgres&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="c"&gt;# \c turbo_send_mail&lt;/span&gt;
You are now connected to database &lt;span class="s2"&gt;&amp;quot;turbo_send_mail&amp;quot;&lt;/span&gt; as user &lt;span class="s2"&gt;&amp;quot;mazulo&amp;quot;&lt;/span&gt;.

&lt;span class="nv"&gt;turbo_send_mail&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="c"&gt;# \dt&lt;/span&gt;
 public &lt;span class="p"&gt;|&lt;/span&gt; auth_group                 &lt;span class="p"&gt;|&lt;/span&gt; table &lt;span class="p"&gt;|&lt;/span&gt; mazulo
 public &lt;span class="p"&gt;|&lt;/span&gt; auth_group_permissions     &lt;span class="p"&gt;|&lt;/span&gt; table &lt;span class="p"&gt;|&lt;/span&gt; mazulo
 public &lt;span class="p"&gt;|&lt;/span&gt; auth_permission            &lt;span class="p"&gt;|&lt;/span&gt; table &lt;span class="p"&gt;|&lt;/span&gt; mazulo
 public &lt;span class="p"&gt;|&lt;/span&gt; auth_user                  &lt;span class="p"&gt;|&lt;/span&gt; table &lt;span class="p"&gt;|&lt;/span&gt; mazulo
 public &lt;span class="p"&gt;|&lt;/span&gt; auth_user_groups           &lt;span class="p"&gt;|&lt;/span&gt; table &lt;span class="p"&gt;|&lt;/span&gt; mazulo
 public &lt;span class="p"&gt;|&lt;/span&gt; auth_user_user_permissions &lt;span class="p"&gt;|&lt;/span&gt; table &lt;span class="p"&gt;|&lt;/span&gt; mazulo
 public &lt;span class="p"&gt;|&lt;/span&gt; django_admin_log           &lt;span class="p"&gt;|&lt;/span&gt; table &lt;span class="p"&gt;|&lt;/span&gt; mazulo
 public &lt;span class="p"&gt;|&lt;/span&gt; django_content_type        &lt;span class="p"&gt;|&lt;/span&gt; table &lt;span class="p"&gt;|&lt;/span&gt; mazulo
 public &lt;span class="p"&gt;|&lt;/span&gt; django_migrations          &lt;span class="p"&gt;|&lt;/span&gt; table &lt;span class="p"&gt;|&lt;/span&gt; mazulo
 public &lt;span class="p"&gt;|&lt;/span&gt; django_session             &lt;span class="p"&gt;|&lt;/span&gt; table &lt;span class="p"&gt;|&lt;/span&gt; mazulo
 public &lt;span class="p"&gt;|&lt;/span&gt; django_site                &lt;span class="p"&gt;|&lt;/span&gt; table &lt;span class="p"&gt;|&lt;/span&gt; mazulo
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finalizada toda essa parte, se rodarmos novamente o &lt;code&gt;runserver&lt;/code&gt;, não veremos novamente aquela mensagem. Ficará assim:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py runserver
Performing system checks...

System check identified no issues &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; silenced&lt;span class="o"&gt;)&lt;/span&gt;.
August 04, &lt;span class="m"&gt;2017&lt;/span&gt; - 07:15:05
Django version 1.11.3, using settings &lt;span class="s1"&gt;&amp;#39;settings&amp;#39;&lt;/span&gt;
Starting development server at http://127.0.0.1:8000/
Quit the server with CONTROL-C.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tá começando a ficar muito bacana. Eu falei que nesse post já teríamos programação, mas o post acabou ficando um pouco extenso demais, então vou pausar aqui. No próximo vou falar um pouco sobre tests, e a partir dele vamos ter bastante Python/Django. Vou tentar lançar ele amanhã, então fica ligado aqui :D&lt;/p&gt;
&lt;p&gt;Dúvidas e/ou críticas, só visitar os comentários mais abaixo. Valeu pessoal, e até a próxima!&lt;/p&gt;</summary><category term="django"></category><category term="django-serie"></category></entry><entry><title>Django startproject: Iniciando o seu projeto</title><link href="https://dunderlabs.github.io/django-iniciando-seu-projeto.html" rel="alternate"></link><updated>2017-07-27T19:21:00-03:00</updated><author><name>Patrick Mazulo</name></author><id>tag:dunderlabs.github.io,2017-07-27:django-iniciando-seu-projeto.html</id><summary type="html">&lt;p&gt;&lt;img alt="Créditos da imagem" src="https://dunderlabs.github.io/images/posts/django-startproject.png" /&gt;&lt;/p&gt;
&lt;p&gt;Posts anteriores da série:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dunderlabs.github.io/django-boilerplate-a-estrutura-de-projeto-django-que-tenho-usado.html"&gt;Django Boilerplate: A estrutura de projeto Django que tenho usado&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fala pessoal, tudo beleza? Como prometido, vamos dar prosseguimento nesta série de posts. Agora que já temos o nosso boilerplate, vamos poder iniciar nosso projeto. Antes de tudo, você precisa ter configurado o seu ambiente de desenvolvimento. Se você não tiver feito isso ainda e/ou não souber muito sobre esse tema, aqui na casa temos &lt;a href="https://dunderlabs.github.io/criando-seu-ambiente-para-desenvolvimento-web-com-django.html"&gt;outro post&lt;/a&gt; onde você vai poder tirar suas dúvidas sobre o assunto :)&lt;/p&gt;
&lt;p&gt;Sem mais delongas, vou criar o meu ambiente virtual para o projeto usando o virtualenvwrapper. O output vai ser algo muito parecido com:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mkvirtualenv turbo_send_mail
Using base prefix &lt;span class="s1"&gt;&amp;#39;/usr&amp;#39;&lt;/span&gt;
New python executable in /home/mazulo/.virtualenvs/turbo_send_mail/bin/python
Installing setuptools, pip, wheel...done.
virtualenvwrapper.user_scripts creating /home/mazulo/.virtualenvs/turbo_send_mail/bin/predeactivate
virtualenvwrapper.user_scripts creating /home/mazulo/.virtualenvs/turbo_send_mail/bin/postdeactivate
virtualenvwrapper.user_scripts creating /home/mazulo/.virtualenvs/turbo_send_mail/bin/preactivate
virtualenvwrapper.user_scripts creating /home/mazulo/.virtualenvs/turbo_send_mail/bin/postactivate
virtualenvwrapper.user_scripts creating /home/mazulo/.virtualenvs/turbo_send_mail/bin/get_env_details
Error: deactivate must be sourced. Run &lt;span class="s1"&gt;&amp;#39;source deactivate&amp;#39;&lt;/span&gt;
instead of &lt;span class="s1"&gt;&amp;#39;deactivate&amp;#39;&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Feito isso, vamos instalar o Django para que possamos utilizar o &lt;code&gt;django-admin&lt;/code&gt;. Basta um comando do &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install django
Collecting django
  Downloading Django-1.11.3-py2.py3-none-any.whl &lt;span class="o"&gt;(&lt;/span&gt;6.9MB&lt;span class="o"&gt;)&lt;/span&gt;
    100% &lt;span class="p"&gt;|&lt;/span&gt;████████████████████████████████&lt;span class="p"&gt;|&lt;/span&gt; 7.0MB 131kB/s 
Collecting pytz &lt;span class="o"&gt;(&lt;/span&gt;from django&lt;span class="o"&gt;)&lt;/span&gt;
  Using cached pytz-2017.2-py2.py3-none-any.whl
Installing collected packages: pytz, django
Successfully installed django-1.11.3 pytz-2017.2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora vamos usar alguns recursos do &lt;code&gt;django-admin&lt;/code&gt; que podem passar despercebidos. Dentre eles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--template&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Aqui você pode especificar um diretório ou uma URL de um template de projeto customizado. No caso de URL, vamos usar a do GitHub que nos dá o nosso projeto comprimido num &lt;code&gt;.zip&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--verbosity&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Especifica a quantidade de informação que aquele comando vai jogar na tela conforme ele é executado. Os níveis são:&lt;ul&gt;
&lt;li&gt;0 significa sem output&lt;/li&gt;
&lt;li&gt;1 significa output normal (default)&lt;/li&gt;
&lt;li&gt;2 significa output verboso&lt;/li&gt;
&lt;li&gt;3 significa output muito verboso&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Vou usar o 3 que é pra termos o máximo de informação de como esse processo ocorre. Ah, como comentei no post anterior, o nosso projeto vai ser um simples sistema que envia e-mails para contatos que eu salvar, como em uma agenda. O nome deste &lt;a href="https://media.giphy.com/media/aBDQ0bQ4b4sx2/giphy.gif"&gt;inovador&lt;/a&gt; projeto será: &lt;em&gt;turbo_send_mail_project&lt;/em&gt;. Nome escolhido, vamos enfim dar o start:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;django-admin startproject turbo_send_mail_project --template&lt;span class="o"&gt;=&lt;/span&gt;https://github.com/dunderlabs/django-boilerplate/archive/master.zip --verbosity 3
Rendering project template files with extensions: .py
Rendering project template files with filenames: 
Downloading https://github.com/dunderlabs/django-boilerplate/archive/master.zip
Extracting /tmp/django_project_template_6nafk1qd_download/django-boilerplate-master.zip
Creating /home/mazulo/dev/github/dunderlabs/turbo_send_mail_project/runtime.txt
Creating /home/mazulo/dev/github/dunderlabs/turbo_send_mail_project/requirements.txt
Creating /home/mazulo/dev/github/dunderlabs/turbo_send_mail_project/package.json
Creating /home/mazulo/dev/github/dunderlabs/turbo_send_mail_project/manage.py
Creating /home/mazulo/dev/github/dunderlabs/turbo_send_mail_project/example.env
Creating /home/mazulo/dev/github/dunderlabs/turbo_send_mail_project/bower.json
Creating /home/mazulo/dev/github/dunderlabs/turbo_send_mail_project/app.json
Creating /home/mazulo/dev/github/dunderlabs/turbo_send_mail_project/README.md
Creating /home/mazulo/dev/github/dunderlabs/turbo_send_mail_project/Procfile
Creating /home/mazulo/dev/github/dunderlabs/turbo_send_mail_project/Makefile
Creating /home/mazulo/dev/github/dunderlabs/turbo_send_mail_project/.gitignore
Creating /home/mazulo/dev/github/dunderlabs/turbo_send_mail_project/.bowerrc
Creating /home/mazulo/dev/github/dunderlabs/turbo_send_mail_project/settings/static.py
Creating /home/mazulo/dev/github/dunderlabs/turbo_send_mail_project/settings/security.py
Creating /home/mazulo/dev/github/dunderlabs/turbo_send_mail_project/settings/mail.py
Creating /home/mazulo/dev/github/dunderlabs/turbo_send_mail_project/settings/base.py
Creating /home/mazulo/dev/github/dunderlabs/turbo_send_mail_project/settings/__init__.py
Creating /home/mazulo/dev/github/dunderlabs/turbo_send_mail_project/requirements/test.txt
Creating /home/mazulo/dev/github/dunderlabs/turbo_send_mail_project/requirements/test.in
Creating /home/mazulo/dev/github/dunderlabs/turbo_send_mail_project/requirements/production.txt
Creating /home/mazulo/dev/github/dunderlabs/turbo_send_mail_project/requirements/production.in
Creating /home/mazulo/dev/github/dunderlabs/turbo_send_mail_project/requirements/heroku.txt
Creating /home/mazulo/dev/github/dunderlabs/turbo_send_mail_project/requirements/heroku.in
Creating /home/mazulo/dev/github/dunderlabs/turbo_send_mail_project/requirements/dev.txt
Creating /home/mazulo/dev/github/dunderlabs/turbo_send_mail_project/requirements/dev.in
Creating /home/mazulo/dev/github/dunderlabs/turbo_send_mail_project/frontend/templates/base.html
Creating /home/mazulo/dev/github/dunderlabs/turbo_send_mail_project/frontend/templates/core/index.html
Creating /home/mazulo/dev/github/dunderlabs/turbo_send_mail_project/frontend/styles/main.scss
Creating /home/mazulo/dev/github/dunderlabs/turbo_send_mail_project/bin/post_compile
Creating /home/mazulo/dev/github/dunderlabs/turbo_send_mail_project/backend/wsgi.py
Creating /home/mazulo/dev/github/dunderlabs/turbo_send_mail_project/backend/urls.py
Creating /home/mazulo/dev/github/dunderlabs/turbo_send_mail_project/backend/core/views.py
Creating /home/mazulo/dev/github/dunderlabs/turbo_send_mail_project/backend/core/utils.py
Creating /home/mazulo/dev/github/dunderlabs/turbo_send_mail_project/backend/core/urls.py
Creating /home/mazulo/dev/github/dunderlabs/turbo_send_mail_project/backend/core/tests.py
Creating /home/mazulo/dev/github/dunderlabs/turbo_send_mail_project/backend/core/models.py
Creating /home/mazulo/dev/github/dunderlabs/turbo_send_mail_project/backend/core/forms.py
Creating /home/mazulo/dev/github/dunderlabs/turbo_send_mail_project/backend/core/apps.py
Creating /home/mazulo/dev/github/dunderlabs/turbo_send_mail_project/backend/core/admin.py
Creating /home/mazulo/dev/github/dunderlabs/turbo_send_mail_project/backend/core/__init__.py
Creating /home/mazulo/dev/github/dunderlabs/turbo_send_mail_project/backend/core/migrations/__init__.py
Cleaning up temporary files.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como você pode ver, ele faz o download do nosso projeto zipado em &lt;code&gt;/tmp/django_project_template_&amp;lt;hash&amp;gt;_download/&lt;/code&gt;, um diretório que ele criou para extrair os arquivos do &lt;code&gt;.zip&lt;/code&gt; e depois criar o nosso projeto usando esses arquivos dentro do diretório onde eu rodei o comando. Após isso, ele vai limpar os arquivos extraídos naquele diretório temporário criado anteriormente, deixando só o &lt;code&gt;master.zip&lt;/code&gt;. Ao acessar o diretório do projeto que o &lt;code&gt;startproject&lt;/code&gt; criou, você vai notar que a estrutura vai ser extamente a mesma mostrada no post anterior:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;tree -d -L &lt;span class="m"&gt;4&lt;/span&gt;               
.
├── backend
│   └── core
│       └── migrations
├── bin
├── frontend
│   ├── styles
│   └── templates
│       └── core
├── requirements
└── settings
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finalizada essa parte, os próximos passos serão: atualizar os pacotes nos requirements, instalar eles e por fim instalar as dependências do front. Vou em cada um dos passos.&lt;/p&gt;
&lt;p&gt;Para o &lt;code&gt;make pip-compile&lt;/code&gt; você vai ter uma saída parecida com essa para cada um dos arquivos &lt;code&gt;requirements/*.in&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;make pip-compile 
&lt;span class="c"&gt;# Update requirements/*.txt with latest packages from requirements/*.in&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; Installing/upgrading pip-tools...
pip install -qU pip-tools
&amp;gt;&amp;gt;&amp;gt; Upgrading &lt;span class="nb"&gt;local &lt;/span&gt;packages...
pip-compile -U requirements/dev.in
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# This file is autogenerated by pip-compile&lt;/span&gt;
&lt;span class="c"&gt;# To update, run:&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;#    pip-compile --output-file requirements/dev.txt requirements/dev.in&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="nv"&gt;click&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;6.7                &lt;span class="c"&gt;# via python-dotenv&lt;/span&gt;
dj-database-url&lt;span class="o"&gt;==&lt;/span&gt;0.4.2
django-appconf&lt;span class="o"&gt;==&lt;/span&gt;1.0.2     &lt;span class="c"&gt;# via django-compressor&lt;/span&gt;
django-compressor&lt;span class="o"&gt;==&lt;/span&gt;2.1.1
&lt;span class="nv"&gt;django&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;1.11.3
&lt;span class="o"&gt;[&lt;/span&gt;mais...&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Após essa atualização, só nos resta instalar usando o comando &lt;code&gt;make install-dev-requirements&lt;/code&gt;, que vai nos dar um output semelhante a esse:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;make install-dev-requirements 
&lt;span class="c"&gt;# Install requirements for a local development environment&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; Installing dev requirements...
pip install -qU pip-tools
pip-sync requirements/*.txt
Collecting dj-database-url&lt;span class="o"&gt;==&lt;/span&gt;0.4.2
  Using cached dj_database_url-0.4.2-py2.py3-none-any.whl
Collecting django-appconf&lt;span class="o"&gt;==&lt;/span&gt;1.0.2
  Using cached django_appconf-1.0.2-py2.py3-none-any.whl
Collecting django-compressor&lt;span class="o"&gt;==&lt;/span&gt;2.1.1
&lt;span class="o"&gt;[&lt;/span&gt;mais...&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora só ficou faltando as dependências do front. Mas antes de rodar o comando, certifique-se que você tem o &lt;a href="https://bower.io/"&gt;bower&lt;/a&gt; instalado. Caso contrário, na página oficial você vai encontrar um guia de como instalar, de acordo com o seu sistema operacional. Feito isso, execute o comando &lt;code&gt;make setup-frontend&lt;/code&gt;, que vai gerar um output como esse:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;make setup-frontend 
bower install --allow-root
bower semantic#^2.2.4           cached https://github.com/Semantic-Org/Semantic-UI.git#2.2.10
bower semantic#^2.2.4         validate 2.2.10 against https://github.com/Semantic-Org/Semantic-UI.git#^2.2.4
bower susy#^2.2.12              cached https://github.com/ericam/susy.git#2.2.12
bower susy#^2.2.12            validate 2.2.12 against https://github.com/ericam/susy.git#^2.2.12
bower jquery#^3.1.0             cached https://github.com/jquery/jquery-dist.git#3.2.1
bower jquery#^3.1.0           validate 3.2.1 against https://github.com/jquery/jquery-dist.git#^3.1.0
&lt;span class="o"&gt;[&lt;/span&gt;mais...&lt;span class="o"&gt;]&lt;/span&gt;
susy#2.2.12 frontend/bower_components/susy

jquery#3.2.1 frontend/bower_components/jquery

semantic#2.2.11 frontend/bower_components/semantic
└── jquery#3.2.1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Agora estamos prontos!&lt;/strong&gt; Para testar nossa aplicação, vamos rodar o famoso &lt;code&gt;runserver&lt;/code&gt;. Ao executar esse comando, você verá uma saída como a debaixo, mas já avisando: não se preocupe com a mensagem que vai estar em vermelhos sobre &lt;em&gt;15 unapplied migrations&lt;/em&gt; por enquanto. A saída vai ser algo assim:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py runserver 8001
Performing system checks...

System check identified no issues &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; silenced&lt;span class="o"&gt;)&lt;/span&gt;.

You have &lt;span class="m"&gt;15&lt;/span&gt; unapplied migration&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;. Your project may not work properly &lt;span class="k"&gt;until&lt;/span&gt; you apply the migrations &lt;span class="k"&gt;for&lt;/span&gt; app&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;: admin, auth, contenttypes, sessions, sites.
Run &lt;span class="s1"&gt;&amp;#39;python manage.py migrate&amp;#39;&lt;/span&gt; to apply them.

July 27, &lt;span class="m"&gt;2017&lt;/span&gt; - 21:23:45
Django version 1.11.3, using settings &lt;span class="s1"&gt;&amp;#39;settings&amp;#39;&lt;/span&gt;
Starting development server at http://127.0.0.1:8001/
Quit the server with CONTROL-C.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ao acessar &lt;a href="http://localhost:8001/"&gt;http://localhost:8001/&lt;/a&gt; você verá uma página quase em branco. "Quase" porque se você abrir o arquivo &lt;code&gt;frontend/styles/main.scss&lt;/code&gt; vai ver que o &lt;code&gt;body&lt;/code&gt; vai estar com &lt;code&gt;background: #eee;&lt;/code&gt;. O que significa que o carregamento dos arquivos estáticos, bem como o compilador e "compressor" de arquivos (ou seja, o django-compreesor) está funcionando muito bem. Bom, sobre eles eu vou falar em outro post, porque esse acaba por aqui ;)&lt;/p&gt;
&lt;p&gt;No próximo post vamos começar a programar de verdade, com uns leves toques de testes automatizados. Fiquem ligados!&lt;/p&gt;
&lt;p&gt;Dúvidas e/ou críticas, só visitar os comentários mais abaixo. Valeu pessoal, e até a próxima!&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
Referências:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Documentação sobre o &lt;a href="https://docs.djangoproject.com/en/1.11/ref/django-admin/"&gt;django-admin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="django"></category><category term="django-serie"></category></entry><entry><title>Django Boilerplate: A estrutura de projeto Django que tenho usado</title><link href="https://dunderlabs.github.io/django-boilerplate-a-estrutura-de-projeto-django-que-tenho-usado.html" rel="alternate"></link><updated>2017-07-27T01:11:00-03:00</updated><author><name>Patrick Mazulo</name></author><id>tag:dunderlabs.github.io,2017-07-27:django-boilerplate-a-estrutura-de-projeto-django-que-tenho-usado.html</id><summary type="html">&lt;p&gt;&lt;img alt="Créditos da imagem" src="https://dunderlabs.github.io/images/posts/django-boilerplate.png" /&gt;&lt;/p&gt;
&lt;h1&gt;Django Boilerplate: A estrutura de projeto Django que tenho usado&lt;/h1&gt;
&lt;p&gt;Fala pessoal, tudo beleza? Finalmente eu &lt;s&gt;criei vergonha na cara&lt;/s&gt; vou iniciar uma série de posts sobre Django. YAY!&lt;/p&gt;
&lt;p&gt;Vou falar sobre alguns quesitos interessantes e que a galera lá do grupo &lt;a href="https://t.me/djangobrasil"&gt;Django Brasil&lt;/a&gt; no Telegram pediram. Inclusive fica aí a deixa pra você participar do grupo, caso ainda não conheça :)&lt;/p&gt;
&lt;p&gt;Antes de tudo, achei interessante começar falando sobre a estrutura de projeto. Nós já conhecemos o bom e velho &lt;code&gt;django-admin.py startproject myproject&lt;/code&gt;, que vai nos gerar uma estrutura parecida com essa:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;.
└── myproject
    ├── manage.py
    └── myproject
        ├── __init__.py
        ├── settings.py
        ├── urls.py
        └── wsgi.py

&lt;span class="m"&gt;2&lt;/span&gt; directories, &lt;span class="m"&gt;6&lt;/span&gt; files
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Depois de algum tempo, você começa a se aventurar em querer testar outras estruturas que possam melhorar a sua produtividade, modularidade, segurança e outros pontos do seu projeto. Um ótimo guia que você pode adquirir, é o livro &lt;a href="https://www.twoscoopspress.com/products/two-scoops-of-django-1-11"&gt;Two Scoops of Django&lt;/a&gt; que recentemente foi atualizado para a versão 1.11 (LTS) do Django. Outra maneira é pesquisar outras estruturas por aí. GitHub é uma ótima fonte, lá cê encontra &lt;strong&gt;várias&lt;/strong&gt; opções. Daí uma ótima ideia é: ver cada um, estudar seu esqueleto, a abordagem pretendida, e se ela se encaixa bem nas suas necessidades/requisitos. Feito isso, você pode:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Adotar um desses boilerplates&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pegar o que viu de melhor nos pesquisados e fazer o seu&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Há um tempo atrás, eu e 2 amigos trabalhávamos numa certa empresa. Num dado momento resolvemos mudar a maneira como iniciaríamos os novos projetos. Um desses caras havia feito uma estrutura diferente em um projeto pessoal. A partir daí, resolvemos ir lapidando até chegarmos no que tornou-se nossa estrutura "oficial". A estrutura final é aquela da imagem no início do post, e que repito aqui abaixo (save your scroll):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;.
├── backend
│   └── core
│       └── migrations
├── bin
├── frontend
│   ├── bower_components
│   │   ├── jquery
│   │   ├── semantic
│   │   └── susy
│   ├── scripts
│   ├── styles
│   └── templates
│       └── core
├── requirements
└── settings
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como vocês podem ver, separamos tudo em módulos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;backend&lt;ul&gt;
&lt;li&gt;Irá conter tudo diretamente relacionado ao backend, e com isso teremos: os módulos das apps, bem como o arquivo &lt;code&gt;urls.py&lt;/code&gt; principal e o &lt;code&gt;wsgi.py&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;frontend&lt;ul&gt;
&lt;li&gt;Tudo relacionado ao frontend estará neste diretório, ou seja, isso inclui os arquivos de template e os arquivos estáticos.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;requirements&lt;ul&gt;
&lt;li&gt;Estaremos utilizando o &lt;a href="https://github.com/jazzband/pip-tools"&gt;pip-tools&lt;/a&gt; que é uma ferramenta sensacional para ajudar a manter as versões dos seus pacotes sempre atualizadas e pinadas. Aqui você pode ler um &lt;a href="http://jamescooke.info/a-successful-pip-tools-workflow-for-managing-python-package-requirements.html"&gt;post sobre ele&lt;/a&gt; (EN). Então dentro desse diretório você vai encontrar os arquivos &lt;code&gt;.ini&lt;/code&gt; e &lt;code&gt;.txt&lt;/code&gt; dos requirements do projeto.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;settings&lt;ul&gt;
&lt;li&gt;Como o nome já sugere, será o módulo de configuração do projeto. Nele nós quebramos o que antes era um único &lt;code&gt;settings.py&lt;/code&gt; em 4 arquivos diferentes (na verdade são 5, eu sei, mas não vamos contar com o &lt;code&gt;__init__.py&lt;/code&gt;), cada um contendo partes específicas do settings, sendo eles:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;base.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__init__.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mail.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;security.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static.py&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dessa maneira, cobrimos as principais partes desse boilerplate. Agora um ponto importante a ressaltar é: esse projeto foi estruturado e criado para integrar o &lt;a href="https://bower.io/"&gt;bower&lt;/a&gt;, bem como facilitar o deploy de uma aplicação diretamente no &lt;a href="https://www.heroku.com/"&gt;Heroku&lt;/a&gt;. Sendo assim você vai encontrar também os sequintes arquivos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.bowerrc&lt;ul&gt;
&lt;li&gt;É o arquivo de configuração do bower. Nele vamos encontrar, por exemplo, o diretório no qual o bower deve instalar as dependências&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Procfile&lt;ul&gt;
&lt;li&gt;É o arquivo usado pelo ambiente do Heroku para declarar quais comandos vão ser executados pelos dynos da aplicação&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;app.json&lt;ul&gt;
&lt;li&gt;Arquivo também utilizado pelo Heroku para "descrever" as aplicações web que vão ser "deployadas" lá. Nesse arquivo você pode declarar variáveis de ambiente, bem como o buildpack dessa aplicação&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;bower.json&lt;ul&gt;
&lt;li&gt;Arquivo de dependências de frontend usadas pelo bower. Aqui você vai ter listado no formato JSON algumas informações, entre elas quais pacotes frontend o bower deve instalar&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;package.json&lt;ul&gt;
&lt;li&gt;Em resumo: é como se fosse o &lt;code&gt;bower.json&lt;/code&gt; só que utilizado pelo npm, no caso, para instalar o bower&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;runtime.txt&lt;ul&gt;
&lt;li&gt;Usado pelo Heroku para especificar qual versão do Python vai ser usada na criação do seu ambiente lá&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pra facilitar nossa vida, você vai encontrar também um &lt;code&gt;Makefile&lt;/code&gt; que vai conter atalhos para executar os comandos principais. Vão ser eles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pip-compile&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Vai atualizar os &lt;code&gt;requirements/*.txt&lt;/code&gt; com as versões mais atuais dos pacotes listados em &lt;code&gt;`requirements/*.in&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;install-dev-requirements&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Instala os requirements&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setup-frontend&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Instala as dependências frontend do projeto (não esqueça de rodar um &lt;code&gt;npm install&lt;/code&gt; caso não tenha ainda o bower na sua máquina)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Depois disso tudo, podemos agora ter uma visão geral de como ficou nosso boilerplate:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;tree -L 3
.
├── app.json
├── backend
│   ├── core
│   │   ├── admin.py
│   │   ├── apps.py
│   │   ├── forms.py
│   │   ├── __init__.py
│   │   ├── migrations
│   │   ├── models.py
│   │   ├── tests.py
│   │   ├── urls.py
│   │   ├── utils.py
│   │   └── views.py
│   ├── urls.py
│   └── wsgi.py
├── bin
│   └── post_compile
├── bower.json
├── example.env
├── frontend
│   ├── bower_components
│   │   ├── jquery
│   │   ├── semantic
│   │   └── susy
│   ├── scripts
│   ├── styles
│   │   └── main.scss
│   └── templates
│       ├── base.html
│       └── core
├── Makefile
├── manage.py
├── package.json
├── Procfile
├── README.md
├── requirements
│   ├── dev.in
│   ├── dev.txt
│   ├── heroku.in
│   ├── heroku.txt
│   ├── production.in
│   ├── production.txt
│   ├── test.in
│   └── test.txt
├── requirements.txt
├── runtime.txt
└── settings
    ├── base.py
    ├── __init__.py
    ├── mail.py
    ├── security.py
    └── static.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Eu não vou entrar em mais detalhes (como o conteúdo dos arquivos do &lt;code&gt;settings&lt;/code&gt;) porque veremos isso nos posts seguintes, como no próximo onde vou usar esse boilerplate para criar um novo projeto. Inclusive, já dando uma palhinha, essa série de posts vai ser feita em cima de um projeto bem simples: uma app Django que envia e-mails para contatos. Simples, não é? Mas dá pra fazermos um trabalho bacana e ir aprendendo juntos :)&lt;/p&gt;
&lt;p&gt;E é isso, pessoas. O link para o projeto desse boilerplate tá aqui: &lt;a href="https://github.com/dunderlabs/django-boilerplate"&gt;https://github.com/dunderlabs/django-boilerplate&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Dúvidas e/ou críticas, só visitar os comentários mais abaixo. Valeu pessoal, e até a próxima!&lt;/p&gt;</summary><category term="django"></category><category term="django-serie"></category></entry><entry><title>Map e Set: objetos que você deve conhecer em JavaScript</title><link href="https://dunderlabs.github.io/map-e-set-objetos-que-voce-deve-conhecer-em-javascript.html" rel="alternate"></link><updated>2017-04-04T02:15:00-03:00</updated><author><name>Nilton Cesar</name></author><id>tag:dunderlabs.github.io,2017-04-04:map-e-set-objetos-que-voce-deve-conhecer-em-javascript.html</id><summary type="html">&lt;p&gt;&lt;img alt="Dentro de um objeto Map" src="https://dunderlabs.github.io/images/posts/map-e-set-objetos-que-voce-deve-conhecer-em-javascript/post-cover.png" /&gt;&lt;/p&gt;
&lt;p&gt;Olá, dev amados!!!
Gostaria de abordar aqui alguns objetos desconhecidos pela maioria dos desenvolvedores JavaScript, mas que podem ser bastante úteis.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Mas porquê usá-los?!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Você não é obrigado a usá-los. Na verdade, os objetos mencionados são parecidos com objetos já conhecidos como &lt;code&gt;Object&lt;/code&gt; e &lt;code&gt;Array&lt;/code&gt;, porém de certa forma &lt;em&gt;melhorados&lt;/em&gt;. Cabe somente a você, desenvolvedor, decidir quando/se será sábio usá-los e onde.&lt;/p&gt;
&lt;h2&gt;Map&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Map&lt;/code&gt; é muito semelhante a &lt;code&gt;Object&lt;/code&gt;: uma coleção de pares chave-valor, sendo possível adicionar novos pares, acessar, modificar e deletá-los. Porém, com duas fundamentais diferenças:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;qualquer objeto pode ser uma chave&lt;/li&gt;
&lt;li&gt;um &lt;code&gt;Map&lt;/code&gt; guarda a ordem dos pares&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Ok, talvez a primeira não seja tão interessante pois geralmente as chaves são usadas como referências para os valores, por isso são nomes ou números. Embora seja interessante pensar que é possível guardar, por exemplo, um &lt;code&gt;Array&lt;/code&gt; como chave para algum outro valor &lt;em&gt;because reasons&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Mas a segunda diferença, &lt;strong&gt;pra mim&lt;/strong&gt;, é a mais importante (leia-se aplicável, prática): ele guarda a ordem dos pares, ou seja, assim é possível por exemplo realizar um loop num &lt;code&gt;Map&lt;/code&gt; e confiar que a ordem da iteração será igual ao objeto internamente! O que não acontece com &lt;code&gt;Object&lt;/code&gt;, onde geralmente você percorreria cada propriedade do próprio objeto e armazenaria num novo &lt;code&gt;Array&lt;/code&gt;, ou algo do tipo dependendo do que deseja.&lt;/p&gt;
&lt;p&gt;A forma de manipulação muda bastante também. Por exemplo, não é possível adicionar ou definir novos pares com a notação &lt;code&gt;.key = value&lt;/code&gt;/&lt;code&gt;[key] = value&lt;/code&gt;, e pegar novos valores só chamando &lt;code&gt;.key&lt;/code&gt;/&lt;code&gt;[key]&lt;/code&gt;, ao invés disso deve-se usar os métodos &lt;code&gt;.set&lt;/code&gt; e &lt;code&gt;.get&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Aqui criamos um objeto &lt;code&gt;Map&lt;/code&gt; através do construtor &lt;code&gt;new&lt;/code&gt;, setamos duas propriedades e mostramos o objeto recém-criado:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Novo Map criado" src="https://dunderlabs.github.io/images/posts/map-e-set-objetos-que-voce-deve-conhecer-em-javascript/new-map.png" /&gt;&lt;/p&gt;
&lt;p&gt;Por ter a ordem de inserção preservada, poderíamos percorrê-lo por alguma das estruturas &lt;code&gt;for&lt;/code&gt;, mas os objeto &lt;code&gt;Map&lt;/code&gt; já tem o método &lt;code&gt;forEach&lt;/code&gt;, com funcionamento quase igual aos objetos &lt;code&gt;Array&lt;/code&gt;: recebe uma função (&lt;em&gt;callback&lt;/em&gt;) que recebe dois argumentos, o primeiro sendo o valor da propriedade e o segundo o nome da propriedade (ordem inversa ao callback de &lt;code&gt;Array&lt;/code&gt;s):&lt;/p&gt;
&lt;p&gt;&lt;img alt="Método de iteração forEach em um objeto Map" src="https://dunderlabs.github.io/images/posts/map-e-set-objetos-que-voce-deve-conhecer-em-javascript/map-foreach.png" /&gt;&lt;/p&gt;
&lt;p&gt;Outras diferençãs legais são o método &lt;code&gt;has&lt;/code&gt; e a propriedade &lt;code&gt;size&lt;/code&gt;! Quem já teve que contar quantas propriedades um &lt;code&gt;Object&lt;/code&gt; tem, sabe como é penoso ter que fazer um loop no objeto, filtrar as propriedades usando &lt;code&gt;.hasOwnProperty()&lt;/code&gt; e adicionar à um contador, ou usar &lt;code&gt;Object.keys(obj).length&lt;/code&gt; pra quem usa ES6. Com o &lt;code&gt;Map&lt;/code&gt; você só tem que acessar a propriedade &lt;code&gt;size&lt;/code&gt; e TAH-DAH, é retornado o tamanho dele ;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;objSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// ES5 approach&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasOwnProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="nx"&gt;objSize&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;objSize&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// ES6 way&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Getting Map&amp;#39;s size&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Quando utilizá-los?&lt;/h3&gt;
&lt;p&gt;Na MDN tem uma &lt;a href="https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Map#Objetos_e_mapas_comparados"&gt;excelente lista&lt;/a&gt; de como identificar quando utilizar &lt;code&gt;Map&lt;/code&gt; ao invés de &lt;code&gt;Object&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;As keys são desconhecidas até o tempo de execução, você precisa procurá-las dinamicamente?&lt;/li&gt;
&lt;li&gt;Todos os valores sempre serão do mesmo tipo, e podem ser usados de forma intercambiável?&lt;/li&gt;
&lt;li&gt;Você precisa de keys que não são strings?&lt;/li&gt;
&lt;li&gt;Os pares key-value são adicionados ou removidos frequentemente?&lt;/li&gt;
&lt;li&gt;Você tem uma quantidade de pares key-value arbitrária (de troca fácil) ?
A coleção é iterada?&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://jsperf.com/map-vs-object-as-hashes/2"&gt;Alguns&lt;/a&gt; &lt;a href="https://jsperf.com/es6-map-vs-object-properties/2"&gt;testes&lt;/a&gt; de performance apresentam diferenças entre as diversas formas de percorrer &lt;code&gt;Map&lt;/code&gt;s e &lt;code&gt;Object&lt;/code&gt;s. Então, be wise ao usá-los.&lt;/p&gt;
&lt;h2&gt;Set&lt;/h2&gt;
&lt;p&gt;Outro objeto bastante interessante é o &lt;code&gt;Set&lt;/code&gt;, muito parecido com o nosso velho conhecido &lt;code&gt;Array&lt;/code&gt;. Se &lt;code&gt;Map&lt;/code&gt; está para &lt;code&gt;Object&lt;/code&gt;, &lt;code&gt;Set&lt;/code&gt; está para &lt;code&gt;Array&lt;/code&gt; :D&lt;/p&gt;
&lt;p&gt;A principal diferença conceitual entre objetos do tipo &lt;code&gt;Set&lt;/code&gt; e arrays é que &lt;code&gt;Set&lt;/code&gt; não aceita valores repetidos, ou seja, guarda &lt;strong&gt;somente valores únicos&lt;/strong&gt;. Isso pode oferecer mais segurança no código.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Set&lt;/code&gt; tem métodos de manipulação parecidos com &lt;code&gt;Map&lt;/code&gt;: &lt;code&gt;add()&lt;/code&gt; para adicionar novos itens, &lt;code&gt;delete()&lt;/code&gt; para retirar o item (através do item, não do índice), &lt;code&gt;has()&lt;/code&gt; pra verificar se o item existe, &lt;code&gt;forEach()&lt;/code&gt; pra percorrê-lo, e &lt;a href="https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Set"&gt;muitos outros&lt;/a&gt;. A propriedade &lt;code&gt;size&lt;/code&gt; também está presente retornando o tamanho.&lt;/p&gt;
&lt;p&gt;É possível também facilmente criar um &lt;code&gt;Set&lt;/code&gt; a partir de um Array passando ele dentro do construtor com &lt;code&gt;new&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Set sendo criado a partir de um Array" src="https://dunderlabs.github.io/images/posts/map-e-set-objetos-que-voce-deve-conhecer-em-javascript/new-set.png" /&gt;&lt;/p&gt;
&lt;p&gt;O interessante desse exemplo é como ele trata os valores repetidos: ele simplesmente pula as repetições e as desconsidera ;)&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;O interessante desses dois tipos de objetos é que eles são como &lt;code&gt;Object&lt;/code&gt; e &lt;code&gt;Array&lt;/code&gt; porém ~ tunados ~ permitindo que se faça muita coisa facilmente, sem precisar brigar com a linguagem pra conseguir resolver o seu problema :D&lt;/p&gt;
&lt;p&gt;Só fique atento com a compatibilidade! Eles vieram junto com o ES6, e caso você não esteja usando algum polyfill como o &lt;a href="https://babeljs.io/learn-es2015/#ecmascript-2015-features-map-set-weak-map-weak-set"&gt;Babel&lt;/a&gt; &lt;code&gt;babel-polyfill&lt;/code&gt; tem que verificar se os ambientes onde esse código vai rodar os suportam.&lt;/p&gt;
&lt;p&gt;Recomendo também conhecer os objetos "irmãos" desses, o &lt;code&gt;WeakMap&lt;/code&gt; e o &lt;code&gt;WeakSet&lt;/code&gt;, que são chamados &lt;em&gt;fracos&lt;/em&gt; porque seus objetos internos podem ser coletados caso o &lt;em&gt;garbage collector&lt;/em&gt; da &lt;em&gt;engine&lt;/em&gt; decida que suas referências devem ser removidas. Talvez por isso eles não tenham tanto valor prático se você não estiver construindo uma grande aplicação ou digamos uma biblioteca, ou algo que exija bastante otimização de performance.&lt;/p&gt;
&lt;p&gt;Você já conhecia esses objetos? Já o utlizou alguma vez? Se não, acredita que irá usar num próximo projeto? A melhor parte de escrever, além de aprender bastante pra poder explicar, é o feedback e o contato com a comunidade. Adoraria ouvir algo de vocês &amp;lt;3&lt;/p&gt;
&lt;p&gt;Brigado pela leitura :*&lt;/p&gt;</summary><category term="javascript"></category><category term="es6"></category><category term="map"></category><category term="set"></category><category term="object"></category><category term="array"></category></entry><entry><title>console dos browsers além do .log</title><link href="https://dunderlabs.github.io/console-alem-do-log.html" rel="alternate"></link><updated>2017-03-18T19:52:00-03:00</updated><author><name>Nilton Cesar</name></author><id>tag:dunderlabs.github.io,2017-03-18:console-alem-do-log.html</id><summary type="html">&lt;p&gt;&lt;img alt="Console e seus métodos" src="https://dunderlabs.github.io/images/posts/console-alem-do-log/post-cover.png" /&gt;&lt;/p&gt;
&lt;p&gt;E aí, meus queridos devs, tudo joia com vocês? ;D&lt;/p&gt;
&lt;p&gt;Vou falar de uma das ferramentas mais poderosas pra quem trabalha com JavaScript e no entanto pouco utilizada: o &lt;code&gt;console&lt;/code&gt;. A &lt;a href="https://console.spec.whatwg.org"&gt;especificação&lt;/a&gt; ainda não é consistente entre os maiores browsers do mercado. Todos os exemplos aqui foram testados no Chrome 57.&lt;/p&gt;
&lt;p&gt;Bem, calma. &lt;code&gt;console&lt;/code&gt; na verdade é um objeto JavaScript que tem uma série de métodos, incluindo o mais famoso (e acho que mais usado), &lt;code&gt;.log&lt;/code&gt;. Quem nunca usou um &lt;code&gt;console.log('enter the function')&lt;/code&gt; ou até &lt;code&gt;console.log('dados recebidos:', data)&lt;/code&gt; pra verificar o que ia acontecendo no código? É bastante útil durante o desenvolvimento porque te dá um feedback rápido do que tá acontecendo direto ali, sem precisar de muito esforço pra entender o que tá acontecendo. Disclaimer: &lt;em&gt;não estou dizendo dizendo que isso deve substituir suas rotinas de testes, ou deixar de debugar quando necessário, ou até mesmo deixar de lado seu TDD ou BDD&lt;/em&gt;. &lt;strong&gt;Nada disso&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Mostrando informações&lt;/h2&gt;
&lt;p&gt;Bom, quem nunca precisou mostrar aqueles dados que pegou via AJAX, ou marcar onde aparece aquele erro? Há formas mais eficientes de mostrar essas informações:&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;console.log()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Clássico. Mostra as informações da forma que elas vêm.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Clássico console.log" src="https://dunderlabs.github.io/images/posts/console-alem-do-log/log.png" /&gt;&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;console.warn()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Mostra as informações como uma mensagem de alerta, destacando as chamadas de função.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mensagem de alerta" src="https://dunderlabs.github.io/images/posts/console-alem-do-log/warn.png" /&gt;&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;console.error()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Mostra como uma mensagem de erro,  destacando as chamadas de função.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mensagem de erro" src="https://dunderlabs.github.io/images/posts/console-alem-do-log/error.png" /&gt;&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;console.info()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Mostra as informações de uma maneira com um ícone descritivo de informação, útil para identificar que tipo de mensagem é essa.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mensagem de informação" src="https://dunderlabs.github.io/images/posts/console-alem-do-log/info.png" /&gt;&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;console.table()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Esse é muito útil para visualização de dados (arrays e propriedades enumeráveis de objetos) pois os mostra em formato tabular.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Todos os dados tabulados" src="https://dunderlabs.github.io/images/posts/console-alem-do-log/table-all-columns.png" /&gt;&lt;/p&gt;
&lt;p&gt;Ainda é posível filtrar as colunas pelo nome!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Dados tabulados filtrados" src="https://dunderlabs.github.io/images/posts/console-alem-do-log/table-filter-column.png" /&gt;&lt;/p&gt;
&lt;p&gt;Nota: os "erros" aqui &lt;strong&gt;não&lt;/strong&gt; param a execução do código.&lt;/p&gt;
&lt;h2&gt;Contando o tempo de execução&lt;/h2&gt;
&lt;p&gt;Legal também é medir quanto tempo leva pra executar um trecho de código, colocando ele entre &lt;code&gt;.time()&lt;/code&gt; e &lt;code&gt;.timeEnd()&lt;/code&gt;. É interessante também passar como argumento um rótulo para aquele contador, pra poder identificá-los quando houver múltiplos contadores.&lt;/p&gt;
&lt;p&gt;&lt;img alt="'Tempo de execução da função'" src="https://dunderlabs.github.io/images/posts/console-alem-do-log/time.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Verificando as execuções&lt;/h2&gt;
&lt;p&gt;Usando &lt;a href="entendendo-ordenacao-de-arrays-em-javascript-sort-of.html#comment-3200924458"&gt;como exemplo um comentário do post anterior&lt;/a&gt; muito bem indicado pelo &lt;a href="https://disqus.com/by/disqus_Bu8QAZBLDU/"&gt;Hector Cardoso&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sortByReleaseYear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;objOriginal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;objTmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;([],&lt;/span&gt; &lt;span class="nx"&gt;objOriginal&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;objTmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;releaseYear&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;releaseYear&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;objTmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Execução das funções" src="https://dunderlabs.github.io/images/posts/console-alem-do-log/trace.png" /&gt;&lt;/p&gt;
&lt;p&gt;essa função retorna um array ordenado pelo ano de lançamento dos álbuns.
É possível verificar o &lt;em&gt;stack trace&lt;/em&gt;, ou seja, a "pilha" de execuções até a função que está sendo chamada. Colocando antes do &lt;code&gt;return&lt;/code&gt; o método &lt;code&gt;console.trace()&lt;/code&gt;, e executando  &lt;code&gt;sortByReleaseYear(beatlesTopFour)&lt;/code&gt;, é possível ver toda a execução que houve até aquele ponto onde o &lt;code&gt;.trace()&lt;/code&gt; está sendo chamado.&lt;/p&gt;
&lt;h2&gt;Juntando tudo&lt;/h2&gt;
&lt;p&gt;Juntando muito do que vimos até aqui podemos analisar a execução do nosso código com muita riqueza de detalhes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;original array&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;beatlesTopFour&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ordered array&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sort by release year&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sortByReleaseYear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;beatlesTopFour&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeEnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sort by release year&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Alguns métodos aplicados" src="https://dunderlabs.github.io/images/posts/console-alem-do-log/all-together.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Ainda tem muito a ser explorado, como o &lt;code&gt;.dir()&lt;/code&gt; que é útil para visualizar hierarquicamente grandes quantidades de dados (como na capa do post), trabalhar com grupos através dos métodos &lt;code&gt;group&lt;/code&gt;, &lt;code&gt;groupCollapsed&lt;/code&gt; e &lt;code&gt;groupEnd&lt;/code&gt;, fazer marcações em Timeline, inicar um Profiler... muita coisa legal na &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Console"&gt;MDN&lt;/a&gt; pra gente brincar ;D&lt;/p&gt;
&lt;p&gt;Queria deixar duas referências sensacionais, ambas do &lt;a href="https://twitter.com/fdaciuk"&gt;Fernando Daciuk&lt;/a&gt;: uma é sobre &lt;a href="http://blog.da2k.com.br/2015/01/10/debugar-javascript-no-browser"&gt;como debugar JavaScript no browser&lt;/a&gt; e a outra é sobre &lt;a href="http://blog.da2k.com.br/2015/01/08/javascript-medindo-o-tempo-de-suas-instrucoes/"&gt;como usar o &lt;code&gt;.time()&lt;/code&gt; para medir suas instruções&lt;/a&gt; que falei aqui :)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Atenção&lt;/strong&gt;: esses métodos devem ser usados para fornecer feedback ao desenvolvedor, ou seja, se você estiver construindo uma API é interessante em alguns casos você o use. Caso o seu código vá pra produção e não interesse ao usuário essas mensagens, você deve removê-los do código. Recomendo utilizar o ESLint, que entre outras regras de avaliação do seu código, já tem uma &lt;a href="http://eslint.org/docs/rules/no-console"&gt;regra específica&lt;/a&gt; que retira todas as chamadas de &lt;code&gt;console&lt;/code&gt; ;)&lt;/p&gt;
&lt;p&gt;Se faltou alguma coisa e vocês quiserem adicionar mais informações, ou deixar dúvidas, ou trocar alguma ideia sobre isso, o comentário é livre. Sinta-se à vontade, e vamos trocar uma ideia :DD&lt;/p&gt;</summary><category term="javascript"></category><category term="console"></category><category term="browser"></category><category term="log"></category><category term="debug"></category></entry><entry><title>Entendendo ordenação de arrays em JavaScript, sort of.</title><link href="https://dunderlabs.github.io/entendendo-ordenacao-de-arrays-em-javascript-sort-of.html" rel="alternate"></link><updated>2017-03-10T15:15:00-03:00</updated><author><name>Nilton Cesar</name></author><id>tag:dunderlabs.github.io,2017-03-10:entendendo-ordenacao-de-arrays-em-javascript-sort-of.html</id><summary type="html">&lt;p&gt;E aí, meus queridos devs, tudo ok com vocês? :D
Depois de uma conversinha com &lt;a href="https://twitter.com/ericleribertson"&gt;Patrick Mazulo&lt;/a&gt; sobre JavaScript, ele me veio com o seguinte cenário na ordenação de valores de um array:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Parece bem simples e direto, porém o resultado é:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1, 10, 2, 3, 4, 5, 6, 7, 8, 9&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="WHAT" src="http://i.giphy.com/EsmlrgWNx5v0Y.gif" title="ÉOQ" /&gt;&lt;/p&gt;
&lt;p&gt;Eu tive exatamente a mesma reação na primeira vez que  vi isso.&lt;/p&gt;
&lt;p&gt;Na verdade, o que acontece ali é que o método &lt;code&gt;.sort()&lt;/code&gt; ordena em ordem crescente através do caracteres da tabela Unicode quando convertidos para string. Então nesse caso, "10" vem antes do "2" porque "1", que é o primeiro caractere de "10", vem antes do "2".&lt;/p&gt;
&lt;p&gt;De acordo com a implementação da &lt;a href="http://unicode.org/charts/"&gt;tabela Unicode&lt;/a&gt;, &lt;a href="http://unicode.org/charts/PDF/U0000.pdf"&gt;é possível perceber, pelo menos no nosso subset&lt;/a&gt;, que a ordem é: alguns símbolos, números, letras maiúsculas, letras minúsculas, mais alguns outros símbolos. O que quer dizer que deverão também obedecer a essa ordem, ou seja, "a" antes do "b", "ab" depois do "a" e antes de "b", "a0" entre "a" e "ab", "Ab" antes de "a", e por aí vai.&lt;/p&gt;
&lt;h2&gt;"mas como eu ordeno números pelo valor"?&lt;/h2&gt;
&lt;p&gt;Mas voltando ao nosso problema inicial, o objetivo era ordenar os números pelo seu valor, não pelo ~código Unicode, certo?&lt;/p&gt;
&lt;p&gt;Bom, pra isso o JavaScript aceita um parâmetro opcional no método &lt;code&gt;sort&lt;/code&gt;: uma função que determina como seriam as regras da ordenação. Essa função recebe dois argumentos, por convenção chamados de &lt;strong&gt;a&lt;/strong&gt; e &lt;strong&gt;b&lt;/strong&gt;, que representam dois itens do array que estão sendo comparados.&lt;/p&gt;
&lt;p&gt;&lt;img alt="hm" src="https://media.giphy.com/media/sBl8Fowq0ErFC/giphy.gif" /&gt;&lt;/p&gt;
&lt;p&gt;A vantagem disso é que, na função, você tem controle de qual critério da ordenação utilizar, de acordo com algumas regras.&lt;/p&gt;
&lt;p&gt;Funciona assim: são comparados &lt;code&gt;a&lt;/code&gt; e &lt;code&gt;b&lt;/code&gt;, e caso:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a comparação seja menor que zero, &lt;code&gt;a&lt;/code&gt; é posicionado antes de &lt;code&gt;b&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a comparação seja maior que zero, &lt;code&gt;a&lt;/code&gt; é posicionado depois de &lt;code&gt;b&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a comparação seja igual a zero, &lt;code&gt;a&lt;/code&gt; e &lt;code&gt;b&lt;/code&gt; permancem com as posições inalteradas&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;"Bom, mas como comparar? Não entendi como essas regras se aplicam"&lt;/p&gt;
&lt;h3&gt;explicação curta (pois deadline chegando)&lt;/h3&gt;
&lt;p&gt;O que você pode fazer é diminuir os dois valores entre si, e o resultado vai decidir se &lt;code&gt;a&lt;/code&gt; ou &lt;code&gt;b&lt;/code&gt; avança, recua, ou ambos permanecem nas posições atuais.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Array original:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Array ordenado:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O código acima define um array, o ordena, e o mostra modificado. A parte-chave desse código é o &lt;code&gt;a - b&lt;/code&gt; que faz o array ser ordenado de forma &lt;strong&gt;crescente&lt;/strong&gt;. O contrário, &lt;code&gt;b - a&lt;/code&gt; o ordena de forma &lt;strong&gt;decrescente&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="wow" src="http://i.giphy.com/vLq5FWMjfN47S.gif" /&gt;&lt;/p&gt;
&lt;h3&gt;aprofundando a explicação (para nerds)&lt;/h3&gt;
&lt;p&gt;O que acontece é que o &lt;code&gt;sort()&lt;/code&gt; pega o array original, compara dois valores e os &lt;strong&gt;muda de posição de acordo com essa comparação&lt;/strong&gt;, logo em seguida ele pega novamente dois valores e os compara pra &lt;strong&gt;rearranjá-los de novo&lt;/strong&gt;, e faz isso até que todo o array esteja ordenado.&lt;/p&gt;
&lt;p&gt;Pegando o primeiro exemplo, onde usamos &lt;code&gt;a - b&lt;/code&gt;, a ordenação acontece da seguinte forma: se o primeiro elemento comparado, no caso &lt;code&gt;a&lt;/code&gt;, for maior que &lt;code&gt;b&lt;/code&gt;, a subtração &lt;code&gt;a - b&lt;/code&gt; resulta em um valor maior que zero, então &lt;code&gt;a&lt;/code&gt; é posicionado depois de &lt;code&gt;b&lt;/code&gt; (de acordo com as regras). Essa mesma lógica aplicada repetidamente no array, que está sendo modificado, faz que com que os valores maiores sejam posicionados mais ao fim do array, ou seja, faz a ordenação em ordem crescente!&lt;/p&gt;
&lt;p&gt;A mesma lógica se aplica para ordenação decrescente, &lt;code&gt;b - a&lt;/code&gt;, só que agora com os valores trocados de lugar faz com que a ordenação seja ao contrário da anterior :). Se você ficou confuso ou quer ver isso passo-a-passo, você pode visualizar os valores de &lt;code&gt;a&lt;/code&gt; e &lt;code&gt;b&lt;/code&gt; mudando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="mindblowing" src="https://media.tenor.co/images/c7eac59fb909510e714e85de277ca81a/raw" /&gt;&lt;/p&gt;
&lt;p&gt;Não encontrei na &lt;a href="http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf"&gt;especificação&lt;/a&gt;, mas você pode observar que a lógica por trás disso é semelhante a alguns algoritmos de ordenação conhecidos, como o BubbleSort. &lt;a href="https://blog.rodneyrehm.de/archives/14-sorting-were-doing-it-wrong.html"&gt;Aparentemente, cada engine implementa esse algoritmo de uma maneira&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Indo um pouco além&lt;/h2&gt;
&lt;p&gt;Já que &lt;code&gt;a&lt;/code&gt; e &lt;code&gt;b&lt;/code&gt; são, de fato, elementos do array, é possível acessá-los e expandir um pouco as possiblidades do uso do método &lt;code&gt;sort&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Digamos que você tenha um array de objetos com o nome de um álbum e o ano de lançamento em cada um:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;beatlesTopFour&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;album&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Abbey Road&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;releaseYear&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1969&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;album&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Revolver&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;releaseYear&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1966&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;album&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;The Beatles (White Album)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;releaseYear&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1968&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;album&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Rubber Soul&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;releaseYear&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1965&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pra ordenar esses objetos de acordo com o ano de lançamento, você pode comparar a propriedade &lt;code&gt;releaseYear&lt;/code&gt; de cada objeto, sem ter que manipular mais nada :)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;beatlesTopFour&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;releaseYear&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;releaseYear&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;e TCHARAM: ordenados em ordem crescente pelo ano&lt;/p&gt;
&lt;p&gt;&lt;img alt="awesome" src="https://media.giphy.com/media/aLdiZJmmx4OVW/giphy.gif" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pro-tip&lt;/strong&gt;: fique atento com a utilização do método &lt;code&gt;sort&lt;/code&gt; pois ele altera o array original. Se você está aplicando uma abordagem funcional, pode não ser interessante utilizá-lo em escopos mais externos.&lt;/p&gt;
&lt;p&gt;Espero que esse artigo tenha sido útil, e não deixem de olhar o que tem na &lt;a href="https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Array/sort"&gt;MDN&lt;/a&gt;, por exemplo, caso algo não tenha ficado claro. OU é só gritar aqui embaixo que a gente responde ;)&lt;/p&gt;
&lt;p&gt;Sempre disponível praquele feedback maroto de vocês. Até logo!&lt;/p&gt;</summary><category term="javascript"></category><category term="array"></category><category term="sort"></category><category term="number"></category><category term="ordering"></category></entry><entry><title>this or: How I Learned to Stop Worrying and Love JavaScript</title><link href="https://dunderlabs.github.io/this-or-how-i-learned-to-stop-worrying-and-love-javascript.html" rel="alternate"></link><updated>2017-03-03T15:00:00-03:00</updated><author><name>Nilton Cesar</name></author><id>tag:dunderlabs.github.io,2017-03-03:this-or-how-i-learned-to-stop-worrying-and-love-javascript.html</id><summary type="html">&lt;p&gt;Vou tentar fazer uma rápida porém merecida explicação sobre o uso do &lt;code&gt;this&lt;/code&gt; na execução de funções, tópico que tira a paciência de muita gente que tá começando na linguagem ou vem ~viciado de libs e frameworks.
Os exemplos aqui são executados no browser, mas podem ser executados no Node sem problema algum, mudando só o objeto &lt;code&gt;window&lt;/code&gt; para &lt;code&gt;global&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;O que é &lt;em&gt;isto&lt;/em&gt;?&lt;/h2&gt;
&lt;p&gt;Bom, você deve tentar adivinhar pela tradução que &lt;code&gt;this&lt;/code&gt; se refere a "isto". Não está totalmente errado, o ponto chave é o que é o "isto". Tente executar o &lt;code&gt;this&lt;/code&gt; no console, só ele e nada mais, e você vai receber o objeto &lt;code&gt;window&lt;/code&gt;. Esses são os objetos que, nos seus ambientes, guardam as referências pros outros objetos, funções, classes, etc, definidos pelo desenvolvedor. Ou seja, quando você define e atribui &lt;code&gt;var a = 7&lt;/code&gt; fora de escopo de funções ou fora de objetos, na verdade é criada uma referência para essa variável em &lt;code&gt;window&lt;/code&gt;, significando que dá pra acessar essa mesma variável tanto fazendo &lt;code&gt;a&lt;/code&gt; como &lt;code&gt;window.a&lt;/code&gt;.
Ok, mas e se eu definir uma função assim&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;outerScope&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;quando eu chamá-la eu vou rebecer a própria função? (??) Não.&lt;/p&gt;
&lt;p&gt;Quando você chama &lt;code&gt;outerScope()&lt;/code&gt; na verdade é a mesma coisa de estar chamando &lt;code&gt;window.outerScope()&lt;/code&gt; e o &lt;code&gt;this&lt;/code&gt; vai mostrar &lt;code&gt;window&lt;/code&gt;. O que acontece é que o &lt;code&gt;this&lt;/code&gt; se refere justamente ao contexto de invocação, ou seja, como e onde ela é &lt;em&gt;chamada&lt;/em&gt;. No exemplo, quem está chamando a função &lt;code&gt;outerScope&lt;/code&gt; implicitamente é o objeto &lt;code&gt;window&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;this&lt;/code&gt; em métodos&lt;/h2&gt;
&lt;p&gt;Ainda no mesmo ambiente, suponha que você agora defina um objeto &lt;code&gt;o&lt;/code&gt; assim:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;outerScope&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A chave &lt;code&gt;m&lt;/code&gt; tem como valor a função definida anteriormente, o que faz com que &lt;code&gt;m&lt;/code&gt; seja um método do objeto &lt;code&gt;o&lt;/code&gt;. Pra executar, basta &lt;code&gt;o.m()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;TCHARAN! O que foi mostrado foi o próprio objeto &lt;code&gt;o&lt;/code&gt;, porque agora ele é quem executa essa função que agora foi atribuída a ele.&lt;/p&gt;
&lt;p&gt;Percebe como nesse caso, mesmo a função sendo definida fora do objeto, quando é atribuída e trazida pra dentro do objeto,e a partir daí não tem mais relação com o que acontece externamente com a função, o &lt;code&gt;this&lt;/code&gt; muda? ;)&lt;/p&gt;
&lt;p&gt;O mesmo comportamento acontece se tratando de eventos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#submit-form&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No código acima, atribuímos um elemento HTML à variável &lt;code&gt;el&lt;/code&gt;, e depois definimos que o evento de click executa uma função que loga o &lt;code&gt;this&lt;/code&gt;. Nesse caso, também o &lt;code&gt;this&lt;/code&gt; se refere ao próprio elemento que disparou o evento, no caso &lt;code&gt;el&lt;/code&gt;.
Até agora imagino que tá tudo de boa, eu acho.&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;function&lt;/code&gt;s criam escopo, e não preservam o &lt;code&gt;this&lt;/code&gt; do contexto&lt;/h2&gt;
&lt;p&gt;Voltemos ao exemplo do objeto, mas vamos criar mais um método:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;outerScope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;inside&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;

        &lt;span class="nx"&gt;inside&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Aqui, adicionamos mais um método à &lt;code&gt;o&lt;/code&gt;, &lt;code&gt;n&lt;/code&gt;, que loga o &lt;code&gt;this&lt;/code&gt; duas vezes: uma diretamente no método e outra dentro de uma função que está &lt;em&gt;dentro&lt;/em&gt; desse método. Se você executar &lt;code&gt;o.n()&lt;/code&gt;, sua reação pode ser das mais variadas: "whatta fuck" "Q" "BÉ ISSO, MAH" e por aí vai.&lt;/p&gt;
&lt;p&gt;O primeiro &lt;code&gt;this&lt;/code&gt; se refere ao objeto &lt;code&gt;o&lt;/code&gt;, como anteriormente, porém sendo chamado dentro da função &lt;code&gt;inside&lt;/code&gt; ele mostra &lt;code&gt;window&lt;/code&gt;! Isso acontece porque, ao criar uma nova função com &lt;code&gt;function&lt;/code&gt;, o &lt;code&gt;this&lt;/code&gt; (e até &lt;code&gt;arguments&lt;/code&gt;) não é trazido do contexto da função mais externa para o função interna, e então ele se refere ao próprio &lt;code&gt;window&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="mindblowing" src="https://media.giphy.com/media/OK27wINdQS5YQ/giphy.gif" title="mindblowing" /&gt;&lt;/p&gt;
&lt;p&gt;Mas então, como diabos eu acessaria o &lt;code&gt;this&lt;/code&gt; da função externa? Quando eu tiver definindo uma função construtora e seus metódos, como é que eu ia referenciar o &lt;code&gt;this&lt;/code&gt;, que é o objeto criado?&lt;/p&gt;
&lt;h3&gt;1/2: arrow function&lt;/h3&gt;
&lt;p&gt;Se você é descolado(a) e quer usar as novas features da linguagem e dizer que tá por dentro, pode usar as queridinhas arrow functions. Mais do que uma forma curta de escrever funções anônimas (&lt;code&gt;() =&amp;gt; console.log(this)&lt;/code&gt;), as arrow functions fazem o contexto permanecer o mesmo para o &lt;code&gt;this&lt;/code&gt;, ficando o código assim&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;outerScope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// Tenho que autoexecutá-la já que é uma função anônima&lt;/span&gt;
        &lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;e mostrando duas vezes o objeto &lt;code&gt;o&lt;/code&gt;. Simples e elegante.&lt;/p&gt;
&lt;h2&gt;2/2: "that" pra quem te quer&lt;/h2&gt;
&lt;p&gt;Se você não quer usar arrow function, ou melhor, quando NÃO HAVIA ISSO NA LINGUAGEM, o que era feito era atribuir o valor de &lt;code&gt;this&lt;/code&gt; a outra variável no escopo acima, geralmente com o nome "that" ou "self" e aí sim através dela estaria disponível no escopo mais interno. Ficaria assim:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;outerScope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// TAH-DAH ;)&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;inside&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;that&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;

        &lt;span class="nx"&gt;inside&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Conclusão&lt;/h2&gt;
&lt;p&gt;Acho que consegui cobrir os principais casos do &lt;code&gt;this&lt;/code&gt; na invocação de funções. Se faltou alguma coisa (e faltou), comenta aí embaixo pra gente trocar uma ideia sobre :D
Pra um texto bem mais aprofundado e completo, recomendo demais a leitura do EXCELENTE &lt;a href="https://github.com/getify/You-Dont-Know-JS/tree/master/this%20%26%20object%20prototypes"&gt;You Don't Know JS: &lt;em&gt;this&lt;/em&gt; &amp;amp; Object Prototypes&lt;/a&gt;, especialmente os capitulos 1 e 2 tratam desse tema.&lt;/p&gt;
&lt;p&gt;Durante muito tempo eu &lt;em&gt;só&lt;/em&gt; usei jQuery nas minhas páginas, pelos motivos óbvios: mais rapidez no desenvolvimento, segurança ao fazer uma página que vai funcionar na maior quantidade de navegadores possível, biblioteca que faz de tudo um pouco, etc. E longe de mim condenar a lib, eu acho que o que merece atenção é a &lt;em&gt;atitude&lt;/em&gt; dos desenvolvedores que a utilizam sem conhecer a linguagem em si, porque você acaba ficando viciado nela sem realmente entender como a liguagem funciona e não  sabe o que fazer quando você não tem ela à mão. Recomendo botar a mão na massa.&lt;/p&gt;</summary><category term="javascript"></category><category term="lexical scope"></category><category term="dynamic scope"></category><category term="arrow function"></category></entry><entry><title>Eu deveria usar PYTHONOPTIMIZE?</title><link href="https://dunderlabs.github.io/eu-deveria-usar-pythonoptimize.html" rel="alternate"></link><updated>2016-07-26T22:09:00-03:00</updated><author><name>Patrick Mazulo</name></author><id>tag:dunderlabs.github.io,2016-07-26:eu-deveria-usar-pythonoptimize.html</id><summary type="html">&lt;p&gt;&lt;img alt="Créditos da imagem" src="https://dunderlabs.github.io/images/posts/pythonoptimize.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Créditos da imagem: &lt;a href="http://blog.ziade.org/2015/11/25/should-i-use-pythonoptimize/"&gt;http://blog.ziade.org/2015/11/25/should-i-use-pythonoptimize/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Eu deveria usar PYTHONOPTIMIZE?&lt;/h2&gt;
&lt;p&gt;Ontem, eu estava revisando alguns códigos para os nossos projetos e em um PR eu vi algo ligeiramente similar a isso:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SomeObject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;some_attribute&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;SomeObject&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;some_attribute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;AssertionError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;SomeObject&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do_something_else&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Não me levou a crer que seria uma boa ideia depender do &lt;code&gt;assert&lt;/code&gt; porque quando Python é executado usando a flag &lt;strong&gt;PYTHONOPTIMIZE&lt;/strong&gt;, que você pode ativar com o variável de ambiente de mesmo nome ou com &lt;code&gt;-O&lt;/code&gt; ou &lt;code&gt;-OO&lt;/code&gt;, todas as declarações de &lt;code&gt;assert&lt;/code&gt; são retiradas do código.&lt;/p&gt;
&lt;p&gt;Para minha surpresa, muitas pessoas estão ignorando &lt;code&gt;-O&lt;/code&gt; e &lt;code&gt;-OO&lt;/code&gt; dizendo que ninguém usa essas flags em produção, e que o código que contém asserts é bom.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PYTHONOPTIMIZE&lt;/strong&gt; tem três valores possíveis: &lt;strong&gt;0&lt;/strong&gt;, &lt;strong&gt;1&lt;/strong&gt; (-O) ou &lt;strong&gt;2&lt;/strong&gt; (-OO). &lt;strong&gt;0&lt;/strong&gt; é o default, onde nada acontece.&lt;/p&gt;
&lt;p&gt;Quando o valor é &lt;strong&gt;1&lt;/strong&gt;, é isso o que acontece:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;asserts são removidos&lt;/li&gt;
&lt;li&gt;os arquivos bytecode gerados estão usando a extensão &lt;strong&gt;.pyo&lt;/strong&gt; ao invés de &lt;strong&gt;.pyc&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sys.flags.optimize&lt;/strong&gt; é setado para 1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;strong&gt;debug&lt;/strong&gt;&lt;/strong&gt; é setado para False&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;E para &lt;strong&gt;2&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tudo que o &lt;strong&gt;1&lt;/strong&gt; faz&lt;/li&gt;
&lt;li&gt;docstrings são removidas&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A meu conhecimento, uma razão antiga para rodar com a flag &lt;strong&gt;-O&lt;/strong&gt; era produzir um código bytecode mais eficiente, mas como falei isso não é mais verdade.&lt;/p&gt;
&lt;p&gt;Um outro comportamento que mudou está relacionado ao &lt;strong&gt;pdb&lt;/strong&gt;: você não poderia rodar um debugging passo-a-passo quando &lt;strong&gt;PYTHONOPTIMIZE&lt;/strong&gt; estiver ativado.&lt;/p&gt;
&lt;p&gt;Por último, a questão &lt;strong&gt;.pyo&lt;/strong&gt; vs &lt;strong&gt;.pyc&lt;/strong&gt; deve sumir um dia, de acordo com a &lt;a href="https://www.python.org/dev/peps/pep-0488"&gt;PEP 488&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Então o que faz isso nos deixar? Há alguma boa razão para usar essas flags?&lt;/p&gt;
&lt;p&gt;Algumas aplicações aproveitam a flag &lt;strong&gt;&lt;strong&gt;debug&lt;/strong&gt;&lt;/strong&gt; para oferecer dois modos de execução. Um com mais informações de debug, ou um comportamento diferente quando um erro é encontrado.&lt;/p&gt;
&lt;p&gt;Esse é o caso para o pyglet, de acordo com a &lt;a href="http://pyglet.readthedocs.org/en/latest/programming_guide/debug.html#error-checking"&gt;documentação dele&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Algumas empresas também estão usando o modo &lt;strong&gt;-O&lt;/strong&gt; para ligeiramente reduzir o consumo de memória ao rodar aplicações. Esse parece ser o caso no YouTube.&lt;/p&gt;
&lt;p&gt;E é inteiramente possível que o próprio Python, no futuro, adicione algumas novas otimizações por trás dessa flag.&lt;/p&gt;
&lt;p&gt;Então, sim, mesmo que você não use essas opções de flags, é uma boa prática assegurar que seu código python está testado com todos os possíveis valores para &lt;strong&gt;PYTHONOPTIMIZE&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;É fácil demais, apenas rode seus testes com &lt;strong&gt;-O&lt;/strong&gt; e &lt;strong&gt;-OO&lt;/strong&gt; e sem, e assegure que seu código não depende de docstrings ou assertions.&lt;/p&gt;
&lt;p&gt;Se você tem dependências em algum deles, tenha certeza que seu código trata elegamentemente o modo otimizado, ou lança um erro no início explicando porque você não está compatível com ele.&lt;/p&gt;
&lt;p&gt;Agradecimentos a Brett Cannon, Michael Foord e outros pelo feedback no Twitter sobre este assunto.&lt;/p&gt;
&lt;p&gt;Dúvidas e/ou críticas, só visitar os comentários mais abaixo. Valeu pessoal, e até a próxima!&lt;/p&gt;
&lt;p&gt;Referências:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.ziade.org/2015/11/25/should-i-use-pythonoptimize/"&gt;Post original&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="python"></category><category term="optimization"></category><category term="translations"></category></entry><entry><title>Porque eu "commito" tanto</title><link href="https://dunderlabs.github.io/porque-eu-commito-tanto.html" rel="alternate"></link><updated>2016-06-27T18:12:00-03:00</updated><author><name>Patrick Mazulo</name></author><id>tag:dunderlabs.github.io,2016-06-27:porque-eu-commito-tanto.html</id><summary type="html">&lt;p&gt;&lt;img alt="Créditos da imagem" src="https://dunderlabs.github.io/images/posts/in-case-of-fire-1-git-commit-2-git-push-3-leave-building2.png" /&gt;&lt;/p&gt;
&lt;p&gt;Créditos da imagem: &lt;a href="https://hikaruzone.wordpress.com/2015/10/06/in-case-of-fire-1-git-commit-2-git-push-3-leave-building/"&gt;https://hikaruzone.wordpress.com/2015/10/06/in-case-of-fire-1-git-commit-2-git-push-3-leave-building/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Porque eu faço muitos git commit&lt;/h2&gt;
&lt;p&gt;Recentemente me juntei a um novo projeto, e um dos meus colegas de equipe me perguntou: "Porque você 'commita' tanto?". Eu decidi escrever este post para explicar meus motivos para ele e para qualquer outra pessoa que possa se deparar com meu trabalho no futuro.&lt;/p&gt;
&lt;h3&gt;Commits pequenos podem ser seu melhor amigo.&lt;/h3&gt;
&lt;p&gt;Assim como funções, commits pequenos focam em uma coisa: uma simples mudança. Isso força nossa mensagem do commit ser mais descritiva (desculpa caras, "fixed some stuff" não está sendo nada descritivo).
Vamos dar uma olhada neste exemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git commit -am &lt;span class="s2"&gt;&amp;quot;Updated &amp;#39;Contact us&amp;#39; to &amp;#39;Need Help? Contact Us!&amp;#39;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Neste caso, você pode simplesmente olhar as mudanças feitas no commit, mas porque olhar no código quando a descrição está ali na sua frente? Commits pequenos tornam extremamente fácil encontrar uma mudança específica que entrou, especialmente quando tiver uma lista delas para analisar. Também tornam simples de ver como o projeto foi construído, pedaço por pedaço.&lt;/p&gt;
&lt;h4&gt;1. Simplificam a revisão do código.&lt;/h4&gt;
&lt;p&gt;Commits pequenos tornam revisões de código muito mais fáceis. Permitem que você revise as mudanças, umas de cada vez, e compartilhe da mentalidade do autor. Os commits contam uma história, como se o autor estivesse explicando as mudanças para uma pessoa.&lt;/p&gt;
&lt;h4&gt;2. Ajudam você a compartilhar conhecimento.&lt;/h4&gt;
&lt;p&gt;Recentemente, eu aprendi que adicionar uma quebra de linha depois da declaração de um &lt;code&gt;return&lt;/code&gt; em JavaScript é a mesma coisa que não retornar nada (se você ficou curioso, veja &lt;a href="http://stackoverflow.com/a/8528606"&gt;esta resposta no Stack Overflow&lt;/a&gt; para a explicação). Eu removi a quebra de linha e comitei o resultado:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git commit -am &lt;span class="s2"&gt;&amp;quot;A return followed by a line break doesn&amp;#39;t actually return anything&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Graças aos pequeno commits, fui capaz de compartilhar esse conhecimento com meus colegas de equipe, sabendo que estaria salvo para sempre. Se há uma coisa que eu aprendi como um programador, é que há uma razão para tudo. Algumas vezes, o raciocínio não está claro e o comentário do código não faz sentido (pode imaginar cada &lt;code&gt;return&lt;/code&gt; de funções JavaScript tendo um comentário dizendo "Quebra de linha não vão retornar esse dado"). Pequenos commits ajudam a preencher esta lacuna.&lt;/p&gt;
&lt;h4&gt;3. Podem ajudar a consertar seus erros.&lt;/h4&gt;
&lt;p&gt;Nenhum desenvolvedor é perfeito. Algumas vezes, nós vamos pelo caminho errado e percebemos que algo que tentamos apenas não funciona. Talvez tentamos pôr em negrito algum texto ao adicionaar uma classe CSS e ajustando algumas propriedades, mas os resultados não parecem bons. E agora?&lt;/p&gt;
&lt;p&gt;Poderíamos manualmente desfazer a mudança, mas é fácil esquecer de algo (por exemplo, você pode remove a classe CSS do elemento HTML, mas esquecer de remover a definição no arquivo CSS). &lt;code&gt;git revert&lt;/code&gt; é uma maneira extremamente fácil de desfazer uma mudança sem ter que lembrar do estado inicial.&lt;/p&gt;
&lt;p&gt;De modo semelhante, cada um de nós já escreveu um bug, e também consertou um bug enquanto introduzia mais três. Normalmente, somos capazes de encontrar a raiz do problema através do uso de breakpoints e reanalisar a problemática da lógica. No entanto, existem vezes onde essa problemática simplesmente não pode ser descoberta, não importa quais passos de debug você faça.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git bisect&lt;/code&gt; está aqui para salvar o dia! Ele primeiro pede para que você forneça um "bom" commit (um que não tenha o bug em questão), e um "mau" commit (normalmente, é o último commit). Ele então executa uma busca binária, testando vários commits como "bom" ou "mau".&lt;/p&gt;
&lt;p&gt;É extremamente importante que cada commit esteja "compilável" e todos os testes passem. Por outro lado, será impossível verificar se um commit é "bom" ou "mau". No caso em que um commit quebrado se infiltrar (vindo de um colega da equipe, claro, porque nós somos bons rapazes e moças), &lt;code&gt;git bisect skip&lt;/code&gt; pode ser usado para saltar sobre ele (apenas cruze seus dedos para que este commit não seja a causa do bug). No fim, &lt;code&gt;git bisect skip&lt;/code&gt; retornará o commit que introduziu o bug. O pedaço problemático de código deve estar completamente obvio, e uma correção para ele já deve estar sendo preparada.&lt;/p&gt;
&lt;h4&gt;4. Me protegem nas apresentações.&lt;/h4&gt;
&lt;p&gt;Se eu ganhasse um centavo por cada vez que tive um 'brancão' sobre as coisas que fiz no trabalho no dia anterior durante uma apresentação, estaria milionário. Uma vez tentei fazer uma lista das coisas que eu fiz durante o dia, mas era tedioso — e redundante, já que meus pequenos commits compartilhavam da mesma informação. E claro, ninguém quer ser aquele cara que tem uma longa lista das coisas que ele trabalhou, mas ir folheando pelo histórico de commits é uma boa maneira de refrescar a memória.&lt;/p&gt;
&lt;h4&gt;5. Me permitem selecionar as mudanças.&lt;/h4&gt;
&lt;p&gt;Considere este cenário: enquanto trabalha numa tarefa separada, Joe Bob adicionou algumas novas strings aos arquivos de tradução que acabou de receber. Ele também começou a incorporar essas traduções nas views dele, mas ele continua tendo testes falhando. Susan iniciou a tarefa dela e percebeu que precisa algumas dessas strings. Não faria sentido fazer um merge da branch do Joe Bob com a dela, sendo que ele ainda está trabalhando nesta branch. Susan poderia apenas redefinir essas traduções, mas ela tem medo do temido merge conflict. Sendo que Joe Bob usa pequenos commits, Susan pode selecionar o commit que Joe Bob introduziu as traduções ao executar o comando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git cherry-pick some-hash
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Resumindo.&lt;/h4&gt;
&lt;p&gt;Não tem problema em ir pelo caminho errado, e em seguida, reverter as alterações. Ninguém se importa com pequenos erros estúpidos — na verdade isso mostra que você se importa em melhorar o projeto e, por fim, você mesmo. Se você está contribuindo para um projeto open source, normalmente é melhor ter um commit por feature ou correção. Para ter o melhor dos dois mundos, você pode &lt;a href="http://makandracards.com/makandra/527-squash-several-git-commits-into-a-single-commit"&gt;dar um squash de todos os seus pequenos commits em um só&lt;/a&gt; antes de você publicar suas mudanças. E para qualquer um que estiver curioso, eu já estive em projetos com bem mais de 20000 commits, e nunca tive problemas de lentidão com git.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;E você, commita muito?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Dúvidas e/ou críticas, só visitar os comentários mais abaixo. Valeu pessoal, e até a próxima!&lt;/p&gt;
&lt;p&gt;Referências:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://spin.atomicobject.com/2015/11/11/all-the-commits/"&gt;Post original&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="git"></category><category term="good practices"></category><category term="translations"></category></entry><entry><title>Python decorators em 12 passos fáceis</title><link href="https://dunderlabs.github.io/python-decorators-em-doze-passos.html" rel="alternate"></link><updated>2016-02-17T12:06:00-03:00</updated><author><name>Patrick Mazulo</name></author><id>tag:dunderlabs.github.io,2016-02-17:python-decorators-em-doze-passos.html</id><summary type="html">&lt;p&gt;&lt;img alt="Créditos para a imagem" src="https://dunderlabs.github.io/images/posts/decorator2.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Créditos para a imagem: &lt;a href="http://slideplayer.com.br/slide/4928758/"&gt;http://slideplayer.com.br/slide/4928758/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Entendendo Python decorators em 12 passos fáceis!&lt;/h2&gt;
&lt;p&gt;Ok, talvez eu esteja brincando. Como um instrutor Python, entender decorators é um tópico onde encontro estudantes lutando bastante para entender após a primeira exposição ao assunto. O motivo é que decorators realmente são difíceis de entender! Entendê-los requer compreender vários conceitos de programação funcional bem como se sentir confortável com algumas funcionalidades únicas sobre definição de função do Python e sintaxe de chamada de função. &lt;em&gt;Usar&lt;/em&gt; decorators é fácil (veja na Seção 10)! Mas escrevê-los pode ser complicado.&lt;/p&gt;
&lt;p&gt;Não posso tornar os decorators fáceis - mas talvez ao caminharmos por cada pedaço desse puzzle, um passo de cada vez, eu possa ajudar você a se sentir mais confiante em entender decorators. Pelo fato de decorators ser um assunto complexo, esse artigo vai ser longo - mas não desista dele! Eu prometo fazer cada pedaço tão simples quanto possível - e se você entender cada pedaço, vai entender como decorators funcionam! Estou tentando assumir mínimo conhecimento de Python mas esse artigo provavelmente vai ser mais útil para pessoas que já tenha tido pelo menos um trabalho ocasional com Python.&lt;/p&gt;
&lt;p&gt;Eu gostaria também de salientar que eu usei o módulo de doctest do Python para rodar os exemplos de código neste artigo. O código parece com uma sessão no console interativo do Python (&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; e &lt;code&gt;...&lt;/code&gt; indicam comandos Python enquanto a saída tem sua própria linha). Eventualmente podem haver comentários enigmáticos que começam com "doctest" - eles são apenas diretivas para o doctest e podem ser ignorados.&lt;/p&gt;
&lt;h3&gt;1. Funções&lt;/h3&gt;
&lt;p&gt;Funções em Python são criadas com a palavra chave &lt;code&gt;def&lt;/code&gt; e recebe um nome e uma lista opcional de parâmetros. Elas podem retornar valores com a palavra chave &lt;code&gt;return&lt;/code&gt;. Vamos fazer e chamar uma função bem simples.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def foo&lt;span class="o"&gt;()&lt;/span&gt;:
...     &lt;span class="k"&gt;return&lt;/span&gt; 1
&amp;gt;&amp;gt;&amp;gt; foo&lt;span class="o"&gt;()&lt;/span&gt;
1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O corpo da função (assim como todas as declarações multi-linhas em Python) é obrigatório e indicado por indentação. Podemos chamar funções acrescentando parênteses ao nome da função.&lt;/p&gt;
&lt;h3&gt;2. Escopo&lt;/h3&gt;
&lt;p&gt;Em Python, funções criam um novo escopo. Pythonistas também podem dizer que funções têm seu próprio namespace. Isso significa que Python olha primeiro no namespace da função para procurar nomes de variáveis que ele encontra no corpo da função. Python inclui algumas funções que nos deixam olhar nosso namespace. Vamos escrever uma função simples para investigar a diferença entre escopo local e global.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;a_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;This is a global variable&amp;quot;&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; def foo&lt;span class="o"&gt;()&lt;/span&gt;:
...     print locals&lt;span class="o"&gt;()&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; print globals&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c"&gt;# doctest: +ELLIPSIS&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;..., &lt;span class="s1"&gt;&amp;#39;a_string&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;This is a global variable&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; foo&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c"&gt;# 2&lt;/span&gt;
&lt;span class="o"&gt;{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A função builtin &lt;code&gt;globals&lt;/code&gt; retorna um dicionário contendo todos os nomes de variáveis que o Python conhece. (Por uma questão de clareza, eu omiti na saída algumas variáveis que o Python cria automaticamente.) No ponto #2 eu chamei minha função &lt;code&gt;foo&lt;/code&gt; que mostra o conteúdo do namespace local de dentro da função. Como nós podemos ver, a função &lt;code&gt;foo&lt;/code&gt; tem seu próprio e separado namespace que está atualmente vazio.&lt;/p&gt;
&lt;h3&gt;3. Regras de resolução de variáveis&lt;/h3&gt;
&lt;p&gt;Claro que isso não significa que não podemos acessar variáveis globais dentro de nossas funções. A regra do escopo do Python é que a criação de variáveis sempre cria uma nova variável local, mas acesso de variável (incluindo modificação) verifica no escopo local e então procura por todo o escopo em que está envolvido para procurar uma que bata com a busca. Então se nós modificarmos nossa função &lt;code&gt;foo&lt;/code&gt; para mostrar nossa variável global, tudo vai funcionar como esperado:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;a_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;This is a global variable&amp;quot;&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; def foo&lt;span class="o"&gt;()&lt;/span&gt;:
...     print a_string &lt;span class="c"&gt;# 1&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; foo&lt;span class="o"&gt;()&lt;/span&gt;
This is a global variable
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No ponto #1 Python procura por uma variável local na nossa função e não a encontra, então ele vai em busca de uma variável global com o mesmo nome.&lt;/p&gt;
&lt;p&gt;Por outro lado, se nós tentarmos fazer uma atribuição na variável global dentro da nossa função, isso não vai fazer o que nós pensamos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;a_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;This is a global variable&amp;quot;&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; def foo&lt;span class="o"&gt;()&lt;/span&gt;:
...     &lt;span class="nv"&gt;a_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;test&amp;quot;&lt;/span&gt; &lt;span class="c"&gt;# 1&lt;/span&gt;
...     print locals&lt;span class="o"&gt;()&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; foo&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a_string&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; a_string &lt;span class="c"&gt;# 2&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;This is a global variable&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como podemos ver, variáveis globais pode ser acessadas (mesmo se elas são  de tipos mutáveis) mas não podem (por padrão) receber atribuição. No ponto #1 dentro da nossa função, na realidade estamos criando uma nova variável local que "cobre" a variável global com o mesmo nome. Podemos ver isso ao dar &lt;code&gt;print&lt;/code&gt; no namespace &lt;code&gt;locals&lt;/code&gt; dentro da nossa função &lt;code&gt;foo&lt;/code&gt; e perceber que agora ele tem uma entrada. Podemos também ver novamente o namespace global no ponto #2 que ao checarmos o valor da variável &lt;code&gt;a_string&lt;/code&gt; que esta não foi de fato alterada.&lt;/p&gt;
&lt;h3&gt;4. Tempo de vida da variável&lt;/h3&gt;
&lt;p&gt;É importante também notar que não apenas as variáveis "vivem" dentro de um namespace, elas também tem um tempo de vida.
Considere:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def foo&lt;span class="o"&gt;()&lt;/span&gt;:
...     &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 1
&amp;gt;&amp;gt;&amp;gt; foo&lt;span class="o"&gt;()&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; print x &lt;span class="c"&gt;# 1&lt;/span&gt;
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  ...
NameError: name &lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt; is not defined
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Não é apenas uma questão de regra de escopo no ponto #1 que causa o problema (embora esse é o porque de nós termos um &lt;code&gt;NameError&lt;/code&gt;) isso também tem a ver com a forma que as chamadas de função são implementadas em Python e muitas outras linguagens. Não existe nenhuma sintaxe que possamos usar para pegar o valor da variável &lt;code&gt;x&lt;/code&gt; nesse ponto - ela literalmente não existe! O namespace criado para nossa função &lt;code&gt;foo&lt;/code&gt; é criado do zero toda vez que a função é chamada, e é destruído quando a função termina.&lt;/p&gt;
&lt;h3&gt;5. Argumentos e parâmetros de função&lt;/h3&gt;
&lt;p&gt;Python nos permite passar argumentos para funções. O nome do parâmetro se torna uma variável local na nossa função.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def foo&lt;span class="o"&gt;(&lt;/span&gt;x&lt;span class="o"&gt;)&lt;/span&gt;:
...     print locals&lt;span class="o"&gt;()&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; foo&lt;span class="o"&gt;(&lt;/span&gt;1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;: 1&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Python tem uma variedade de maneiras para definir parâmetros de função e passar argumentos para eles. Você poderá ver uma lista completa e detalhada na &lt;a href="https://docs.python.org/3/tutorial/controlflow.html#more-on-defining-functions"&gt;documentação oficial do Python sobre definição de funções&lt;/a&gt;. Vou mostrar aqui a versão resumida: parâmetros de função podem ser tanto &lt;strong&gt;posicionais&lt;/strong&gt; quanto podem ser &lt;strong&gt;obrigatórios&lt;/strong&gt; ou &lt;strong&gt;nomeados&lt;/strong&gt;, parâmetros que tem &lt;strong&gt;valor padrão&lt;/strong&gt; são &lt;strong&gt;opcionais&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def foo&lt;span class="o"&gt;(&lt;/span&gt;x, &lt;span class="nv"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="c"&gt;# 1&lt;/span&gt;
...     &lt;span class="k"&gt;return&lt;/span&gt; x - y
&amp;gt;&amp;gt;&amp;gt; foo&lt;span class="o"&gt;(&lt;/span&gt;3, 1&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 2&lt;/span&gt;
2
&amp;gt;&amp;gt;&amp;gt; foo&lt;span class="o"&gt;(&lt;/span&gt;3&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 3&lt;/span&gt;
3
&amp;gt;&amp;gt;&amp;gt; foo&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c"&gt;# 4&lt;/span&gt;
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  ...
TypeError: foo&lt;span class="o"&gt;()&lt;/span&gt; takes at least &lt;span class="m"&gt;1&lt;/span&gt; argument &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; given&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; foo&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1, &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;3&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 5&lt;/span&gt;
2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No ponto #1 estamos definindo uma função que tem um parâmetro posicional &lt;code&gt;x&lt;/code&gt; e um parâmetro nomeado &lt;code&gt;y&lt;/code&gt;. Como vemos no ponto #2 podemos chamar essa função passando argumentos normalmente - os valores são passados para os parâmetros de &lt;code&gt;foo&lt;/code&gt; pela posição embora um deles está definido na definição da função como um parâmetro nomeado. Também podemos chamar a função sem passar nenhum argumento para o parâmetro nomeado, como você pode ver no ponto #3 - Python usa o valor padrão de &lt;code&gt;0&lt;/code&gt; que declaramos se ele não receber um valor para o parâmetro nomeado &lt;code&gt;y&lt;/code&gt;. Claro que não podemos deixar de passar valores para o primeiro (obrigatório, posicional) parâmetro - ponto #4 mostra que o resultado disso é uma exceção.&lt;/p&gt;
&lt;p&gt;Tudo simples e claro? Agora vai começar a ficar um pouco confuso - Python suporta argumentos nomeados na chamada da função. Olhe no ponto #5 - aqui estamos chamando a função com dois argumentos nomeados embora ela esteja definida com um parâmetro nomeado e outro sendo posicional. Desde que tenhamos nomes para nossos parâmetros, a ordem em que passamos eles não importa.&lt;/p&gt;
&lt;p&gt;O caso contrário é verdadeiro, claro. Um dos parâmetros para nossa função está definido como um parâmetro nomeado, mas passamos um argumento para ele pela posição - a chamada &lt;code&gt;foo(3,1)&lt;/code&gt; no ponto #2 passa o &lt;code&gt;3&lt;/code&gt; como o argumento para o nosso parâmetro obrigatório &lt;code&gt;x&lt;/code&gt; e passa o segundo (o inteiro &lt;code&gt;1&lt;/code&gt;) para o segundo parâmetro embora ele já estivesse definido como um parâmetro nomeado.&lt;/p&gt;
&lt;p&gt;Wooow! Parecem ser muitas palavras para explicar um conceito bem simples: parâmetros de função podem ter nomes ou posições. Isso significa coisas ligeiramente diferentes dependendo se estamos na definição de função ou na hora da chamada de função, e podemos usar argumentos nomeados para funções definidas apenas com paramêtros posicionais e vice-versa! Novamente - se tudo isso foi muito rápido, dê uma olhada nas &lt;a href="https://docs.python.org/3/tutorial/controlflow.html#more-on-defining-functions"&gt;documentações&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;6. Funções aninhadas&lt;/h3&gt;
&lt;p&gt;Python permite a criação de funções aninhadas. Isso significa que podemos declarar funções dentro de funções e as regras sobre escopo e tempo de vida continuam valendo normalmente.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def outer&lt;span class="o"&gt;()&lt;/span&gt;:
...     &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 1
...     def inner&lt;span class="o"&gt;()&lt;/span&gt;:
...         print x &lt;span class="c"&gt;# 1&lt;/span&gt;
...     inner&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c"&gt;# 2&lt;/span&gt;
...
&amp;gt;&amp;gt;&amp;gt; outer&lt;span class="o"&gt;()&lt;/span&gt;
1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Parece um pouco complicado, mas ainda continua se comportando de uma maneira bem sensata. Considere o que acontece no ponto #1 - Python procura por uma variável local de nome &lt;code&gt;x&lt;/code&gt;, não achando ele então procura no escopo em volta que é outra função! A variável &lt;code&gt;x&lt;/code&gt; é uma variável local para nossa função &lt;code&gt;outer&lt;/code&gt; mas como antes nossa função &lt;code&gt;inner&lt;/code&gt; tem acesso ao escopo que está em sua volta (pelo menos ler e modificar o acesso). No ponto #2 nós chamamos a função &lt;code&gt;inner&lt;/code&gt;. É importante lembrar que &lt;code&gt;inner&lt;/code&gt; também é apenas um nome de variável que segue as regras de busca de variáveis do Python - Python procura no escopo de &lt;code&gt;outer&lt;/code&gt; primeiro e encontra uma variável local de nome &lt;code&gt;inner&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;7. Funções são objetos de primeira classe em Python&lt;/h3&gt;
&lt;p&gt;Esta é uma simples observação de que, em Python, funções são objetos como qualquer outro. Ah, função contendo variável, você não é tão especial!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; issubclass&lt;span class="o"&gt;(&lt;/span&gt;int, object&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# all objects in Python inherit from a common baseclass&lt;/span&gt;
True
&amp;gt;&amp;gt;&amp;gt; def foo&lt;span class="o"&gt;()&lt;/span&gt;:
...     pass
&amp;gt;&amp;gt;&amp;gt; foo.__class__ &lt;span class="c"&gt;# 1&lt;/span&gt;
&amp;lt;&lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;function&amp;#39;&lt;/span&gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; issubclass&lt;span class="o"&gt;(&lt;/span&gt;foo.__class__, object&lt;span class="o"&gt;)&lt;/span&gt;
True
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Você pode nunca ter pensando em suas funções tendo atributos - mas funções são objetos em Python, assim como qualquer outro. (E se você achou isso confuso, espere até ver que classes são objetos em Python, assim como qualquer outro objeto!) Talvez isso esteja tornando o ponto em uma maneira acadêmica - funções são apenas valores normais como qualquer outro valor em Python. Isso significa que você pode passar funções para outras funções como argumentos, ou retornar funções em uma função como seu valor de retorno! Se você nunca pensou nesse tipo de coisa, considere o seguinte código Python que funciona perfeitamente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def add&lt;span class="o"&gt;(&lt;/span&gt;x, y&lt;span class="o"&gt;)&lt;/span&gt;:
...     &lt;span class="k"&gt;return&lt;/span&gt; x + y
&amp;gt;&amp;gt;&amp;gt; def sub&lt;span class="o"&gt;(&lt;/span&gt;x, y&lt;span class="o"&gt;)&lt;/span&gt;:
...     &lt;span class="k"&gt;return&lt;/span&gt; x - y
&amp;gt;&amp;gt;&amp;gt; def apply&lt;span class="o"&gt;(&lt;/span&gt;func, x, y&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="c"&gt;# 1&lt;/span&gt;
...     &lt;span class="k"&gt;return&lt;/span&gt; func&lt;span class="o"&gt;(&lt;/span&gt;x, y&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 2&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; apply&lt;span class="o"&gt;(&lt;/span&gt;add, 2, 1&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 3&lt;/span&gt;
3
&amp;gt;&amp;gt;&amp;gt; apply&lt;span class="o"&gt;(&lt;/span&gt;sub, 2, 1&lt;span class="o"&gt;)&lt;/span&gt;
1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esse exemplo pode não parecer tão estranho pra você - &lt;code&gt;add&lt;/code&gt; e &lt;code&gt;sub&lt;/code&gt; são funções Python normais que recebem dois valores e retornam um valor calculado. No ponto #1 pode ver que a variável espera receber uma função é uma variável como qualquer outra. No ponto #2 chamamos a função passamos para &lt;code&gt;apply&lt;/code&gt; - parêntesis em Python são o operador de chamada, e eles chamam o valor que o nome daquela variável contém. E no ponto #3 você pode ver que passar funções como valores não tem nenhuma sintaxe especial em Python - nomes de função são apenas rótulos/nomes de variáveis como qualquer outra variável.&lt;/p&gt;
&lt;p&gt;Você pode ver esse tipo de comportamento antes - Python usa funções como argumentos para operações frequentemente usadas como personalização da função built-in &lt;code&gt;sorted&lt;/code&gt;, ao fornever uma função para o parâmetro &lt;code&gt;key&lt;/code&gt;. Mas e sobre retornar funções como valores? Veja:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def outer&lt;span class="o"&gt;()&lt;/span&gt;:
...     def inner&lt;span class="o"&gt;()&lt;/span&gt;:
...         print &lt;span class="s2"&gt;&amp;quot;Inside inner&amp;quot;&lt;/span&gt;
...     &lt;span class="k"&gt;return&lt;/span&gt; inner &lt;span class="c"&gt;# 1&lt;/span&gt;
...
&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; outer&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c"&gt;#2&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; foo &lt;span class="c"&gt;# doctest:+ELLIPSIS&lt;/span&gt;
&amp;lt;&lt;span class="k"&gt;function&lt;/span&gt; inner at 0x...&amp;gt;
&amp;gt;&amp;gt;&amp;gt; foo&lt;span class="o"&gt;()&lt;/span&gt;
Inside inner
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Isso pode parecer um pouco bizarro. No ponto #1 retornamos a variável &lt;code&gt;inner&lt;/code&gt; que passa a ser um rótulo/nome de função. Não há sintaxe especial aqui - nossa função está retornando a função &lt;code&gt;inner&lt;/code&gt; que de outra forma não poderia ser chamada. Lembra do tempo de vida da variável? A função &lt;code&gt;inner&lt;/code&gt; é sempre redefinida toda vez que a função &lt;code&gt;outer&lt;/code&gt; é chamada, mas se &lt;code&gt;inner&lt;/code&gt; não fosse retornada pela função, ela iria simplesmente deixar de existir quando o escopo se fosse.&lt;/p&gt;
&lt;p&gt;No ponto #2 podemos pegar o valor de retorno que é nossa função &lt;code&gt;inner&lt;/code&gt; e armazená-la em uma nova variável &lt;code&gt;foo&lt;/code&gt;. Podemos ver que se nós avaliarmos &lt;code&gt;foo&lt;/code&gt;, veremos que ela realmente contém nossa função &lt;code&gt;inner&lt;/code&gt; e que podemos chamá-la ao usar o operador de chamada (parêntesis, lembra?). Isso pode parecer um pouco estranho, mas nada difícil de entender, né? Mas calma, porque as coisas estão prestes a ficar realmente estranhas!&lt;/p&gt;
&lt;h3&gt;8. Closures&lt;/h3&gt;
&lt;p&gt;Não vamos começar com uma definição, mas sim com outro exemplo de código. Vamos dar uma copiada no nosso último exemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def outer&lt;span class="o"&gt;()&lt;/span&gt;:
...     &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 1
...     def inner&lt;span class="o"&gt;()&lt;/span&gt;:
...         print x &lt;span class="c"&gt;# 1&lt;/span&gt;
...     &lt;span class="k"&gt;return&lt;/span&gt; inner
&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; outer&lt;span class="o"&gt;()&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; foo.func_closure &lt;span class="c"&gt;# doctest: +ELLIPSIS&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&amp;lt;cell at 0x...: int object at 0x...&amp;gt;,&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A partir do nosso último exemplo, podemos ver que &lt;code&gt;inner&lt;/code&gt; é uma função retornada por &lt;code&gt;outer&lt;/code&gt; em uma variável chamada &lt;code&gt;foo&lt;/code&gt;, e que poderíamos chamar ela com &lt;code&gt;foo()&lt;/code&gt;. Mas ela vai rodar? Vamos considerar primeiro as regras de escopo.&lt;/p&gt;
&lt;p&gt;Tudo funciona de acordo com as regras de escopo do Python - &lt;code&gt;x&lt;/code&gt; é uma variável local na nossa função &lt;code&gt;outer&lt;/code&gt;. Quando &lt;code&gt;inner&lt;/code&gt; imprime &lt;code&gt;x&lt;/code&gt; no ponto #1 Python procura por uma variável local em &lt;code&gt;inner&lt;/code&gt;, e ao não encontrar, procura no escopo que está em sua volta, que é a função &lt;code&gt;outer&lt;/code&gt;, encontrando a variável lá.&lt;/p&gt;
&lt;p&gt;Mas o que acontece do ponto de vista do tempo de vida da variável? Nossa variável &lt;code&gt;x&lt;/code&gt; é local para a função &lt;code&gt;outer&lt;/code&gt;, o que significa que ela existe apenas enquanto a função &lt;code&gt;outer&lt;/code&gt; está sendo executada. Não somos capazes de chamar a função &lt;code&gt;inner&lt;/code&gt; até depois do retorno de &lt;code&gt;outer&lt;/code&gt;, então de acordo com o nosso modelo de como Python funciona, &lt;code&gt;x&lt;/code&gt; não deveria existir mais na hora que chamamos &lt;code&gt;inner&lt;/code&gt;, e talvez um erro de runtime ou algo do tipo deveria acontecer.&lt;/p&gt;
&lt;p&gt;Acontece que, contra nossas expectativas, nossa função retornada &lt;code&gt;inner&lt;/code&gt; funciona. Python tem suporte para uma funcionalidade chamada &lt;strong&gt;function closures&lt;/strong&gt; que significa que funções internas (isso é, uma função que está dentro de outra função) definidas em escopo não global lembram como era o seu namespace em tempo de definição. Isso pode ser visto ao acessar o atributo &lt;code&gt;func_closure&lt;/code&gt; da nossa função &lt;code&gt;inner&lt;/code&gt; que contém as variáveis no escopo envolto.&lt;/p&gt;
&lt;p&gt;Lembre - a função interna está sendo definida novamente toda vez que a função &lt;code&gt;outer&lt;/code&gt; é chamada. Agora o valor de &lt;code&gt;x&lt;/code&gt; não muda, então cada função &lt;code&gt;inner&lt;/code&gt; faz a mesma coisa como outra função &lt;code&gt;inner&lt;/code&gt; - mas e se mexermos nela um pouco mais?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def outer&lt;span class="o"&gt;(&lt;/span&gt;x&lt;span class="o"&gt;)&lt;/span&gt;:
...     def inner&lt;span class="o"&gt;()&lt;/span&gt;:
...         print x &lt;span class="c"&gt;# 1&lt;/span&gt;
...     &lt;span class="k"&gt;return&lt;/span&gt; inner
&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;print1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; outer&lt;span class="o"&gt;(&lt;/span&gt;1&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;print2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; outer&lt;span class="o"&gt;(&lt;/span&gt;2&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; print1&lt;span class="o"&gt;()&lt;/span&gt;
1
&amp;gt;&amp;gt;&amp;gt; print2&lt;span class="o"&gt;()&lt;/span&gt;
2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A partir desse exemplo, você pode ver que &lt;strong&gt;closures&lt;/strong&gt; - o fato que funções lembram seus escopo - podem ser usadas para construir funções customizadas que têm, essencialmente, um argumento explicito. Não estamos passando os números 1 ou 2 para nossa função &lt;code&gt;inner&lt;/code&gt;, mas estamos construindo versões customizadas da nossa função &lt;code&gt;inner&lt;/code&gt; que "se lembram" que números elas devem imprimir.&lt;/p&gt;
&lt;p&gt;Isso por si só é uma técnica poderosa - você pode até pensar dele como similar a técnicas de orientação de objeto em algumas maneiras: &lt;code&gt;outer&lt;/code&gt; é um construtor para &lt;code&gt;inner&lt;/code&gt; com &lt;code&gt;x&lt;/code&gt; agindo como uma variável privada. E os usos são numerosos - se você está familiarizado com o parâmetro &lt;code&gt;key&lt;/code&gt; da função &lt;code&gt;sorted&lt;/code&gt;, provavelmente escreveu uma função lambda para ordenar uma lista de listas pelo segundo item ao invés do primeiro. Você pode agora estar capacitado a escrever uma função &lt;code&gt;itemgetter&lt;/code&gt; que recebe o índice para recuperar e retornar uma função que poderia adequadamente ser passada ao parâmetro key.&lt;/p&gt;
&lt;p&gt;Mas não vamos fazer nada tão mundano com closures! Ao invés disso, vamos em frente mais uma vez e escrever um decorator!&lt;/p&gt;
&lt;h3&gt;9. Decorator!&lt;/h3&gt;
&lt;p&gt;Um decorator é apenas um objeto chamável que recebe uma função como parâmetro e retorna uma função substituta. Vamos começar de forma simples e trabalhar nosso caminho até úteis decorators.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def outer&lt;span class="o"&gt;(&lt;/span&gt;some_func&lt;span class="o"&gt;)&lt;/span&gt;:
...     def inner&lt;span class="o"&gt;()&lt;/span&gt;:
...         print &lt;span class="s2"&gt;&amp;quot;before some_func&amp;quot;&lt;/span&gt;
...         &lt;span class="nv"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; some_func&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c"&gt;# 1&lt;/span&gt;
...         &lt;span class="k"&gt;return&lt;/span&gt; ret + 1
...     &lt;span class="k"&gt;return&lt;/span&gt; inner
&amp;gt;&amp;gt;&amp;gt; def foo&lt;span class="o"&gt;()&lt;/span&gt;:
...     &lt;span class="k"&gt;return&lt;/span&gt; 1
&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;decorated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; outer&lt;span class="o"&gt;(&lt;/span&gt;foo&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 2&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; decorated&lt;span class="o"&gt;()&lt;/span&gt;
before some_func
2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Veja cuidadosamente nosso exemplo de decorator. Definimos uma função chamada &lt;code&gt;outer&lt;/code&gt; que tem um único parâmetro &lt;code&gt;some_func&lt;/code&gt;. Dentro de &lt;code&gt;outer&lt;/code&gt; definimos uma função aninhada chamada &lt;code&gt;inner&lt;/code&gt;. A função &lt;code&gt;inner&lt;/code&gt; vai imprimir uma string e então chamar &lt;code&gt;some_func&lt;/code&gt;, pegando seu valor de retorno no ponto #1. O valor de &lt;code&gt;some_func&lt;/code&gt; pode ser diferente em cada vez que &lt;code&gt;outer&lt;/code&gt; é chamada, mas não importa que função seja, nós vamos chamá-la. Finalmente &lt;code&gt;inner&lt;/code&gt; retorna o valor de retorno de &lt;code&gt;some_func()&lt;/code&gt; + 1 - e podemos ver que quando chamamos nossa função retornada armazenada em &lt;code&gt;decorated&lt;/code&gt; no ponto #2 temos os resultados do print e também retorna o valor 2 ao invés do valor original 1 que nós poderíamos estar esperando receber ao chamar &lt;code&gt;foo&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Poderíamos dizer que a variável &lt;code&gt;decorated&lt;/code&gt; é uma versão decorada de &lt;code&gt;foo&lt;/code&gt; - ela é &lt;code&gt;foo&lt;/code&gt; mais alguma coisa. De fato se nós escrevemos um decorator útil podemos querer substituir completamente &lt;code&gt;foo&lt;/code&gt; com a versão decorada, então sempre vamos ter nossa versão "mais alguma coisa" de &lt;code&gt;foo&lt;/code&gt;. Podemos fazer isso sem aprender uma nova sintaxe, simplesmente reatribuindo a variável que contém nossa função:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def outer&lt;span class="o"&gt;(&lt;/span&gt;some_func&lt;span class="o"&gt;)&lt;/span&gt;:
&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; outer&lt;span class="o"&gt;(&lt;/span&gt;foo&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; foo &lt;span class="c"&gt;# doctest: +ELLIPSIS&lt;/span&gt;
&amp;lt;&lt;span class="k"&gt;function&lt;/span&gt; inner at 0x...&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora todas as chamadas de &lt;code&gt;foo()&lt;/code&gt; não vão ter o resultado original de antes, terão a nossa versão decorada! Pegou a ideia? Vamos escrever um decorator mais útil.&lt;/p&gt;
&lt;p&gt;Imagine que nós temos uma biblioteca que nos dá objetos de coordenadas. Talvez eles sejam primariamente compostos de pares de coordenadas &lt;code&gt;x&lt;/code&gt; e &lt;code&gt;y&lt;/code&gt;. Infelizmente os objetos de coordenadas não suportam operações matemáticas e não podemos modificar o código fonte, então não podemos adicionar esse suporte. No entanto, vamos estar fazendo muita matemática então queremos fazer funções &lt;code&gt;add&lt;/code&gt; e &lt;code&gt;sub&lt;/code&gt; para receberem dois objetos de coordenada e fazerem a operação matemática apropriada. Esas funções seriam fácil de escrever (vou fornecer um exemplo da classe Coordenada para ilustrar)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; class Coordinate&lt;span class="o"&gt;(&lt;/span&gt;object&lt;span class="o"&gt;)&lt;/span&gt;:
...     def __init__&lt;span class="o"&gt;(&lt;/span&gt;self, x, y&lt;span class="o"&gt;)&lt;/span&gt;:
...         self.x &lt;span class="o"&gt;=&lt;/span&gt; x
...         self.y &lt;span class="o"&gt;=&lt;/span&gt; y
...     def __repr__&lt;span class="o"&gt;(&lt;/span&gt;self&lt;span class="o"&gt;)&lt;/span&gt;:
...         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Coord: &amp;quot;&lt;/span&gt; + str&lt;span class="o"&gt;(&lt;/span&gt;self.__dict__&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; def add&lt;span class="o"&gt;(&lt;/span&gt;a, b&lt;span class="o"&gt;)&lt;/span&gt;:
...     &lt;span class="k"&gt;return&lt;/span&gt; Coordinate&lt;span class="o"&gt;(&lt;/span&gt;a.x + b.x, a.y + b.y&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; def sub&lt;span class="o"&gt;(&lt;/span&gt;a, b&lt;span class="o"&gt;)&lt;/span&gt;:
...     &lt;span class="k"&gt;return&lt;/span&gt; Coordinate&lt;span class="o"&gt;(&lt;/span&gt;a.x - b.x, a.y - b.y&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;one&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Coordinate&lt;span class="o"&gt;(&lt;/span&gt;100, 200&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;two&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Coordinate&lt;span class="o"&gt;(&lt;/span&gt;300, 200&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; add&lt;span class="o"&gt;(&lt;/span&gt;one, two&lt;span class="o"&gt;)&lt;/span&gt;
Coord: &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;: 400, &lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;: 400&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Mas e se nossas funções de adição e subtração tivessem que também ter um comportamento de verificação de limites? Talvez você possa apenas somar ou subtrair baseado em coordenadas positivas e qualquer resultado deveria ser limitado a coordenadas positivas. Então atualmente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;one&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Coordinate&lt;span class="o"&gt;(&lt;/span&gt;100, 200&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;two&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Coordinate&lt;span class="o"&gt;(&lt;/span&gt;300, 200&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;three&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Coordinate&lt;span class="o"&gt;(&lt;/span&gt;-100, -100&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; sub&lt;span class="o"&gt;(&lt;/span&gt;one, two&lt;span class="o"&gt;)&lt;/span&gt;
Coord: &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;: 0, &lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;: -200&lt;span class="o"&gt;}&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; add&lt;span class="o"&gt;(&lt;/span&gt;one, three&lt;span class="o"&gt;)&lt;/span&gt;
Coord: &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;: 100, &lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;: 0&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;mas preferimos ter a diferença de &lt;code&gt;one&lt;/code&gt; e &lt;code&gt;two&lt;/code&gt; sendo &lt;code&gt;{x: 0, y: 0}&lt;/code&gt; e a soma de &lt;code&gt;one&lt;/code&gt; e &lt;code&gt;three&lt;/code&gt; sendo &lt;code&gt;{x: 100, y: 200}&lt;/code&gt; sem modificar &lt;code&gt;one&lt;/code&gt;, &lt;code&gt;two&lt;/code&gt; ou &lt;code&gt;three&lt;/code&gt;. Invés de adicionar verificação de limites na entrada de argumentos de cada função e o valor de retorno de cada função, vamos escrever um decorator de verificação de limites!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def wrapper&lt;span class="o"&gt;(&lt;/span&gt;func&lt;span class="o"&gt;)&lt;/span&gt;:
...     def checker&lt;span class="o"&gt;(&lt;/span&gt;a, b&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="c"&gt;# 1&lt;/span&gt;
...         &lt;span class="k"&gt;if&lt;/span&gt; a.x &amp;lt; &lt;span class="m"&gt;0&lt;/span&gt; or a.y &amp;lt; 0:
...             &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Coordinate&lt;span class="o"&gt;(&lt;/span&gt;a.x &lt;span class="k"&gt;if&lt;/span&gt; a.x &amp;gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; 0, a.y &lt;span class="k"&gt;if&lt;/span&gt; a.y &amp;gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; 0&lt;span class="o"&gt;)&lt;/span&gt;
...         &lt;span class="k"&gt;if&lt;/span&gt; b.x &amp;lt; &lt;span class="m"&gt;0&lt;/span&gt; or b.y &amp;lt; 0:
...             &lt;span class="nv"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Coordinate&lt;span class="o"&gt;(&lt;/span&gt;b.x &lt;span class="k"&gt;if&lt;/span&gt; b.x &amp;gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; 0, b.y &lt;span class="k"&gt;if&lt;/span&gt; b.y &amp;gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; 0&lt;span class="o"&gt;)&lt;/span&gt;
...         &lt;span class="nv"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; func&lt;span class="o"&gt;(&lt;/span&gt;a, b&lt;span class="o"&gt;)&lt;/span&gt;
...         &lt;span class="k"&gt;if&lt;/span&gt; ret.x &amp;lt; &lt;span class="m"&gt;0&lt;/span&gt; or ret.y &amp;lt; 0:
...             &lt;span class="nv"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Coordinate&lt;span class="o"&gt;(&lt;/span&gt;ret.x &lt;span class="k"&gt;if&lt;/span&gt; ret.x &amp;gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; 0, ret.y &lt;span class="k"&gt;if&lt;/span&gt; ret.y &amp;gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; 0&lt;span class="o"&gt;)&lt;/span&gt;
...         &lt;span class="k"&gt;return&lt;/span&gt; ret
...     &lt;span class="k"&gt;return&lt;/span&gt; checker
&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; wrapper&lt;span class="o"&gt;(&lt;/span&gt;add&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;sub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; wrapper&lt;span class="o"&gt;(&lt;/span&gt;sub&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; sub&lt;span class="o"&gt;(&lt;/span&gt;one, two&lt;span class="o"&gt;)&lt;/span&gt;
Coord: &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;: 0, &lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;: 0&lt;span class="o"&gt;}&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; add&lt;span class="o"&gt;(&lt;/span&gt;one, three&lt;span class="o"&gt;)&lt;/span&gt;
Coord: &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;: 200, &lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;: 100&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O decorator funciona do mesmo jeito que antes - retorna uma versão modificada de uma função, mas neste caso ela faz algo útil ao checar e normalizar a entrada de parâmetros e o valor de retorno, substituindo qualquer valor negativo de &lt;code&gt;x&lt;/code&gt; ou &lt;code&gt;y&lt;/code&gt; por 0.&lt;/p&gt;
&lt;p&gt;É uma questão de opinião quanto ao fazer isso torna nosso código mais limpo: isolar a checagem de limites na sua própria função e aplicá-la para todas as funções que nos interessam envolvendo-as com um decorator. A alternativa seria uma chamada de função em cada argumento de entrada e na saída resultante antes de retornar dentro de cada função matemática, e é inegável que usar o decorator é, pelo menos, menos repetitivo em termos de quantidade de código necessário para aplicar checagem de limites para uma função.&lt;/p&gt;
&lt;h3&gt;10. O símbolo @ aplica um decorator a uma função&lt;/h3&gt;
&lt;p&gt;A versão 2.4 do Python nos trouxe suporte para envolver uma função em um decorator ao adicionar antes da definição da função o símbolo &lt;code&gt;@&lt;/code&gt; e o nome do decorator. Nos exemplos de código acima, nós usamos decorators nas nossas funções ao substituir a variável contendo a função com a versão decorada.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; wrapper&lt;span class="o"&gt;(&lt;/span&gt;add&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esse padrão pode ser usado em qualquer momento, para envolver qualquer função. Mas se estamos definindo uma função, podemos "decorá-la" com o símbolo &lt;code&gt;@&lt;/code&gt; dessa maneira:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; @wrapper
... def add&lt;span class="o"&gt;(&lt;/span&gt;a, b&lt;span class="o"&gt;)&lt;/span&gt;:
...     &lt;span class="k"&gt;return&lt;/span&gt; Coordinate&lt;span class="o"&gt;(&lt;/span&gt;a.x + b.x, a.y + b.y&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;É importante notar que essa maneira não é diferente do que simplesmente substituir a variável original &lt;code&gt;add&lt;/code&gt; com o retorno da função &lt;code&gt;wrapper&lt;/code&gt; - Python apenas adiciona um &lt;code&gt;syntatic sugar&lt;/code&gt; para fazer aquilo que acontece de maneira explícita.&lt;/p&gt;
&lt;p&gt;Novamente - usar decorators é fácil! Ainda que escrever decorators úteis como &lt;code&gt;staticmethod&lt;/code&gt; ou &lt;code&gt;classmethod&lt;/code&gt; seja difícil, usá-los é apenas uma questão de adicionar à sua função o &lt;code&gt;@nomedodecorator&lt;/code&gt;!&lt;/p&gt;
&lt;h3&gt;11. &lt;em&gt;args e &lt;/em&gt;*kwargs&lt;/h3&gt;
&lt;p&gt;Fizemos um decorator bem útil, mas ele está codificado para funcionar em apenas um tipo particular de função - uma que recebe dois argumentos. Nossa função interna &lt;code&gt;checker&lt;/code&gt; aceita dois argumentos e passa os argumentos para a função que foi capturada na closure. E se nós quiséssemos um decorator que fizesse alguma coisa para qualquer função possível? Vamos fazer um decorator que incrementa o contador para cada chamada de função de cada função decorada sem mudar nenhuma das funções decoradas. Isso significa que o decorator teria que aceitar a assinatura de chamada de qualquer função que ele decora e também chamar as funções decoradas passando quaisquer argumentos que foram passados pra ele.&lt;/p&gt;
&lt;p&gt;Acontece que Python tem um suporte sintático para essa funcionalidade. Certifique-se de ter lido o &lt;a href="https://docs.python.org/3/tutorial/controlflow.html#arbitrary-argument-lists"&gt;Tutorial Python&lt;/a&gt; para mais detalhes, mas o operador &lt;code&gt;*&lt;/code&gt; usado ao definir uma função significa que qualquer argumento posicional extra passado para a função vão ficar na variável antecedida por &lt;code&gt;*&lt;/code&gt;. Então:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def one&lt;span class="o"&gt;(&lt;/span&gt;*args&lt;span class="o"&gt;)&lt;/span&gt;:
...     print args &lt;span class="c"&gt;# 1&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; one&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;()&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; one&lt;span class="o"&gt;(&lt;/span&gt;1, 2, 3&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;1, 2, 3&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; def two&lt;span class="o"&gt;(&lt;/span&gt;x, y, *args&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="c"&gt;# 2&lt;/span&gt;
...     print x, y, args
&amp;gt;&amp;gt;&amp;gt; two&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
a b &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;,&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A primeira função &lt;code&gt;one&lt;/code&gt; simplesmente mostra quaisquer (se houver) argumentos posicionais que foram passados pra ela. Como você pode ver no ponto #1, nos referimos a variável &lt;code&gt;args&lt;/code&gt; dentro da função - &lt;code&gt;*args&lt;/code&gt; é usado apenas na definição da função para indicar que argumentos posicionais devem ser armazenados na variável &lt;code&gt;args&lt;/code&gt;. Python também nos permite especificar algumas variáveis e pegar os parâmetros adicionais em &lt;code&gt;args&lt;/code&gt;, como podemos ver no ponto #2.&lt;/p&gt;
&lt;p&gt;O operador &lt;code&gt;*&lt;/code&gt; também pode ser usado ao chamar funções, e aqui ele tem um significado semelhante ao anterior. Uma variável antecedida por &lt;code&gt;*&lt;/code&gt; ao &lt;strong&gt;chamar&lt;/strong&gt; uma função significa que o conteúdo da variável deve ser extraído e usado como argumentos posicionais. Um exemplo para entender melhor:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def add&lt;span class="o"&gt;(&lt;/span&gt;x, y&lt;span class="o"&gt;)&lt;/span&gt;:
...     &lt;span class="k"&gt;return&lt;/span&gt; x + y
&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;lst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;1,2&lt;span class="o"&gt;]&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; add&lt;span class="o"&gt;(&lt;/span&gt;lst&lt;span class="o"&gt;[&lt;/span&gt;0&lt;span class="o"&gt;]&lt;/span&gt;, lst&lt;span class="o"&gt;[&lt;/span&gt;1&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="c"&gt;# 1&lt;/span&gt;
3
&amp;gt;&amp;gt;&amp;gt; add&lt;span class="o"&gt;(&lt;/span&gt;*lst&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 2&lt;/span&gt;
3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O código no ponto #1 faz exatamente a mesma coisa que o código no ponto #2 - Python está fazendo isso automaticamente pra nós no ponto #2 o que poderíamos fazer manualmente. Isso não é nada mal - &lt;code&gt;*args&lt;/code&gt; tanto extrair variáveis posicionais a partir de um iterável na &lt;em&gt;chamada de uma função&lt;/em&gt; quanto na &lt;em&gt;definição de uma função&lt;/em&gt; aceitar qualquer quantidade de variáveis posicionais.&lt;/p&gt;
&lt;p&gt;As coisas ficam um pouco mais complicadas ao introduzirmos o &lt;code&gt;**&lt;/code&gt; que faz em dicionários e pares chave/valor exatamente a mesma coisa que &lt;code&gt;*&lt;/code&gt; em iteráveis e parâmetros posicionais. Simples, né?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def foo&lt;span class="o"&gt;(&lt;/span&gt;**kwargs&lt;span class="o"&gt;)&lt;/span&gt;:
...     print kwargs
&amp;gt;&amp;gt;&amp;gt; foo&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{}&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; foo&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1, &lt;span class="nv"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;: 2, &lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;: 1&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Quando definimos uma função, podemos usar &lt;code&gt;**kwargs&lt;/code&gt; para indicar que todos os argumentos nomeados não capturados devem ser armazenados em um dicionário chamado &lt;code&gt;kwargs&lt;/code&gt;. Da mesma forma que antes, nem a variável &lt;code&gt;args&lt;/code&gt; ou &lt;code&gt;kwargs&lt;/code&gt; fazem parte da sintaxe do Python, mas é uma convenção usar esse nome para essas variáveis ao declarar funções. Assim como &lt;code&gt;*&lt;/code&gt;, podemos usar &lt;code&gt;**&lt;/code&gt; ao chamar uma função bem como quando definí-la.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;dct&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;: 1, &lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;: 2&lt;span class="o"&gt;}&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; def bar&lt;span class="o"&gt;(&lt;/span&gt;x, y&lt;span class="o"&gt;)&lt;/span&gt;:
...     &lt;span class="k"&gt;return&lt;/span&gt; x + y
&amp;gt;&amp;gt;&amp;gt; bar&lt;span class="o"&gt;(&lt;/span&gt;**dct&lt;span class="o"&gt;)&lt;/span&gt;
3
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;12. Decorators mais genéricos&lt;/h3&gt;
&lt;p&gt;Dado nosso novo poder, podemos criar um decorator que "registra" os argumentos para funções. Vamos apenas imprimir, por questões de simplicidade:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def logger&lt;span class="o"&gt;(&lt;/span&gt;func&lt;span class="o"&gt;)&lt;/span&gt;:
...     def inner&lt;span class="o"&gt;(&lt;/span&gt;*args, **kwargs&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="c"&gt;#1&lt;/span&gt;
...         print &lt;span class="s2"&gt;&amp;quot;Arguments were: %s, %s&amp;quot;&lt;/span&gt; % &lt;span class="o"&gt;(&lt;/span&gt;args, kwargs&lt;span class="o"&gt;)&lt;/span&gt;
...         &lt;span class="k"&gt;return&lt;/span&gt; func&lt;span class="o"&gt;(&lt;/span&gt;*args, **kwargs&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c"&gt;#2&lt;/span&gt;
...     &lt;span class="k"&gt;return&lt;/span&gt; inner
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Perceba que nossa função &lt;code&gt;inner&lt;/code&gt; recebe qualquer quantidade de parâmetros, independente de tipo no ponto #1 e os passa como argumentos para a função que foi decorada, no ponto #2. Isso nos permite envolver/decorar qualquer função, não importando sua assinatura.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; @logger
... def foo1&lt;span class="o"&gt;(&lt;/span&gt;x, &lt;span class="nv"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1&lt;span class="o"&gt;)&lt;/span&gt;:
...     &lt;span class="k"&gt;return&lt;/span&gt; x * y
&amp;gt;&amp;gt;&amp;gt; @logger
... def foo2&lt;span class="o"&gt;()&lt;/span&gt;:
...     &lt;span class="k"&gt;return&lt;/span&gt; 2
&amp;gt;&amp;gt;&amp;gt; foo1&lt;span class="o"&gt;(&lt;/span&gt;5, 4&lt;span class="o"&gt;)&lt;/span&gt;
Arguments were: &lt;span class="o"&gt;(&lt;/span&gt;5, 4&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;{}&lt;/span&gt;
20
&amp;gt;&amp;gt;&amp;gt; foo1&lt;span class="o"&gt;(&lt;/span&gt;1&lt;span class="o"&gt;)&lt;/span&gt;
Arguments were: &lt;span class="o"&gt;(&lt;/span&gt;1,&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;{}&lt;/span&gt;
1
&amp;gt;&amp;gt;&amp;gt; foo2&lt;span class="o"&gt;()&lt;/span&gt;
Arguments were: &lt;span class="o"&gt;()&lt;/span&gt;, &lt;span class="o"&gt;{}&lt;/span&gt;
2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Chamar nossas funções resulta eu um "log" de saída, bem como o retorno do valor esperado de cada função.&lt;/p&gt;
&lt;h3&gt;Mais sobre decorators&lt;/h3&gt;
&lt;p&gt;Se você conseguiu acompanhar o último exemplo, você entendeu decorators! Parabéns - Siga em frente e use seus novos poderes para o bem!&lt;/p&gt;
&lt;p&gt;Se você estiver interessado em um estudo mais aprofundado: &lt;a href="http://www.artima.com/weblogs/viewpost.jsp?thread=240808"&gt;Bruce Eckel tem um excelente artigo sobre decorators&lt;/a&gt; e implementa eles em Python com objetos ao invés de funções. Pode ser que você ache que o código na sua versão orientada a objetos mais fácil de ler do que nossa versão puramente funcional. Bruce também tem um artigo após esse primeiro sobre &lt;a href="http://www.artima.com/weblogs/viewpost.jsp?thread=240845"&gt;fornecer argumentos para decorators&lt;/a&gt; que pode também ser mais fácil de implementar com objetos do que com funções. E por fim - você também pode estudar a função built-ing &lt;code&gt;wraps&lt;/code&gt; do módulo &lt;a href="https://docs.python.org/3/library/functools.html"&gt;functools&lt;/a&gt;, que (talvez de uma maneira confusa inicialmente) é um decorator que pode ser usado em nossos decorators para modificar a assinatura das nossas funções substitutas, para que elas se pareçam mais com a função decorada.&lt;/p&gt;
&lt;p&gt;[1] Eu também li recentemente um artigo sobre &lt;a href=""&gt;decorators&lt;/a&gt; que me fez refletir...
[2] "global" é uma grande mentira no Python que dizem ser uma coisa maravilhosa, mas é uma discussão para outro dia...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Graças ao Nick eu atualizei minha terminologia no artigo para deixar mais claro que "parâmetros" são as variáveis nomeadas na assinatura da função, enquanto "argumentos" são os valores que são passados para a função.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Viu algum trecho que poderia ficar com uma tradução melhor? Manda lá nos comentários mais abaixo. Valeu pessoal, e até a próxima!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Referências:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://simeonfranklin.com/blog/2012/jul/1/python-decorators-in-12-steps/"&gt;Post original&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="python"></category><category term="python decorators"></category><category term="decorators"></category><category term="translations"></category></entry><entry><title>Wat's up, doc?</title><link href="https://dunderlabs.github.io/wats-up-doc.html" rel="alternate"></link><updated>2016-02-15T10:48:00-03:00</updated><author><name>Patrick Mazulo</name></author><id>tag:dunderlabs.github.io,2016-02-15:wats-up-doc.html</id><summary type="html">&lt;p&gt;&lt;img alt="Créditos para a imagem" src="https://dunderlabs.github.io/images/posts/wat.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Créditos para a imagem: &lt;a href="http://www.b-list.org/weblog/2015/nov/15/real-python-wat/"&gt;http://www.b-list.org/weblog/2015/nov/15/real-python-wat/&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Wat's up, doc?&lt;/h3&gt;
&lt;p&gt;No mesmo rumo da &lt;a href="https://www.destroyallsoftware.com/talks/wat"&gt;maravilhosa palestra do Gary Bernhardt sobre JavaScript&lt;/a&gt;, há também uma &lt;a href="https://github.com/cosmologicon/pywat"&gt;coleção de momentos de Python "wat"&lt;/a&gt; que muitas vezes aparecem por aí. Há também um questionário relacionado na página deste último link (que não vou dar spoiler; você pode ler ele e checar suas respostas). Toda linguagem tem algumas partes não intuitivas — ou, no mínimo, aparentemente não. Mas se você está trabalhando com Python, entender &lt;em&gt;porque&lt;/em&gt; esses pedaços de código se comportam dessa maneira é interessante, e potencialmente útil (OK, provavelmente não útil, mas no mínimo interessante). Então vamos dar uma olhada neles e ver o que realmente está acontecendo.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;"Convertendo para uma string e vice-versa"&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;O exemplo é este:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esta é uma muito simples: &lt;code&gt;str(False)&lt;/code&gt; é &lt;code&gt;"False"&lt;/code&gt;, e &lt;code&gt;bool("False")&lt;/code&gt; é &lt;code&gt;True&lt;/code&gt;, porque qualquer string não vazia é &lt;code&gt;True&lt;/code&gt; ("truthy", se quiser ser preciso, uma vez que a checagem boolean do Python raramente usa instancias reais de &lt;code&gt;bool&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;"Misturar strings com inteiros"&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;O exemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;33&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;2&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;222&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esse é um caso um pouco mais interessante, e leva as pessoas a discutirem sobre o sistema de tipos do Python. O comportamento neste caso vem do fato que Python suporta sobrecarga de operador, e não restringe quais tipos você está permitido definir que seus operadores atuem. Neste caso, o operador * está implementado nos tipos numéricos, onde é o operador de multiplicação (e, obviamente, exige que o outro operando seja um número). Mas é também implementado nos tipos sequenciais (lembre, &lt;code&gt;str&lt;/code&gt; é um tipo sequencial em Python), onde é um operador de repetição e exige que o outro operando seja numérico.&lt;/p&gt;
&lt;p&gt;Então, quando usar este operador com um operando numérico e outro operando que é sequencial, Python aplica o comportamento de repetição.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;"O operador de conversão implícita não documentado"&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hora de brincar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Entender esse requer saber um pouco da história do Python. Inicialmente não havia o tipo boolean built-in (como em muitas das outras linguagens que carecem do tipo boolean), então a convenção era usar o inteiro 1 como o valor "true" e o inteiro 0 como "false". Python 2.2.1 trouxe &lt;code&gt;bool()&lt;/code&gt; como uma função built-in, mas não o tipo boolean — em vez disso, ele definiu &lt;code&gt;True&lt;/code&gt; e &lt;code&gt;False&lt;/code&gt; como alias (apelidos) built-in para 1 e 0. A função &lt;code&gt;bool()&lt;/code&gt; retornaria 1 para valores "True" e 0 para "False". Python 2.3 implementou o tipo &lt;code&gt;bool&lt;/code&gt;, como uma sub-classe de &lt;code&gt;int&lt;/code&gt; com apenas duas instâncias: &lt;code&gt;True&lt;/code&gt; e &lt;code&gt;False&lt;/code&gt;, que teriam valores inteiros 1 e 0. Esse comportamento acabou ficando preso para o Python 3, como você pode verificar abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="mf"&gt;3.5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Sep&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt; &lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GCC&lt;/span&gt; &lt;span class="mf"&gt;4.2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;Compatible&lt;/span&gt; &lt;span class="n"&gt;Apple&lt;/span&gt; &lt;span class="n"&gt;LLVM&lt;/span&gt; &lt;span class="mf"&gt;6.1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clang&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;602.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;darwin&lt;/span&gt;
&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;help&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;information&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;issubclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para mais detalhes sobre essa esquisitice em torno da introdução do tipo &lt;code&gt;bool&lt;/code&gt;, veja esse &lt;a href="http://python-history.blogspot.com/2013/11/the-history-of-bool-true-and-false.html"&gt;post do Guido&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;"Combinação dos tipos numéricos"&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O autor diz "Note: isso não é simplesmente devido a imprecisão de ponto flutuante."
O que é tecnicamente verdade, eu acho, mas um pouco enganador: o truque aqui é empurrar a faixa no qual um float de dupla precisão pode representar cada inteiro (o deslocamento do 53º bit, como floats de dupla precisão têm apenas 53 bits de precisão). Se você brincar com ele, vai descobrir que só tem números anteriores esse ponto, como esperado para esta faixa: no IEEE 754, de &lt;code&gt;2**51&lt;/code&gt; a &lt;code&gt;2**52&lt;/code&gt;, floats de dupla precisão são espaçados por 0.5, passando a serem espaçados por 1 — isto é, todos inteiros e apenas inteiros pode ser representados — acima de &lt;code&gt;2**53&lt;/code&gt;, e além &lt;code&gt;2**53&lt;/code&gt; eles são espaçados por 2, de modo que apenas inteiros pares possam ser reprensentados.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;"Precedência de operador?"&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Isso não é exatamente sobre precedência; em vez disso, é sobre suporte do Python a operadores de comparação encadeados. Estamos acostumados a poder fazer coisas como &lt;code&gt;if x&amp;lt; y &amp;lt;= z&lt;/code&gt; em Python, e estamos com isso fazendo contruções como esta. Esse encadeamento de operadores é equivalente a &lt;code&gt;if (x &amp;lt; y) and (y &amp;lt;= z)&lt;/code&gt;, mas com &lt;code&gt;y&lt;/code&gt; sendo avaliado só na primeira.&lt;/p&gt;
&lt;p&gt;E uma vez que &lt;code&gt;==&lt;/code&gt; e &lt;code&gt;in&lt;/code&gt; são operadores de comparação, o mesmo acontece aqui: &lt;code&gt;False == False in [False]&lt;/code&gt; é equivalente a &lt;code&gt;(False == False) and (False in [False])&lt;/code&gt;. Ambas comparações são verdadeiras, então o resultado polêmico está correto.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;"Tipo iteráveis em comparação"&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esse tem um alcance maior. O que realmente está acontecendo no primeiro exemplo é que &lt;code&gt;a&lt;/code&gt; é uma lista, e &lt;code&gt;(x, y)&lt;/code&gt; é uma tupla. Uma lista e uma tupla não serão idênticas quando comparadas, mesmo se seus conteúdos forem iguais. De igual modo, &lt;code&gt;sorted()&lt;/code&gt; retorna uma lista, então você só vai ter uma comparação de igualdade bem sucedida quando comparar o resultado com uma lista.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;"Tipos de operações aritméticas"&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Python permite que comparações aritméticas de floats e ints funcionem, então &lt;code&gt;1 == 1.0&lt;/code&gt; (e &lt;code&gt;1 ** -1&lt;/code&gt; é igual a &lt;code&gt;1.0&lt;/code&gt; — expoentes negativos sempre retornam um valor float). Mas &lt;code&gt;int&lt;/code&gt; e &lt;code&gt;float&lt;/code&gt; não são do mesmo tipo, então a igualdade de tipo dará falso.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;"Brincando com iteradores"&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Novamente, esta é uma brincadeira com tipos. A função built-in &lt;code&gt;sorted()&lt;/code&gt; do Python recebe uma sequência, e retorna uma lista contendo os mesmos valores ordenados. Mas &lt;code&gt;reversed()&lt;/code&gt; retorna um objeto iterador que vai percorrer a sequência na ordem reversa.&lt;/p&gt;
&lt;p&gt;O iterador retornado pela função &lt;code&gt;reversed()&lt;/code&gt; não implementa o método &lt;code&gt;__eq__()&lt;/code&gt;, então para comparações Python volta para chamar &lt;code&gt;__hash__()&lt;/code&gt; em cada operando e compara os resultados. O iterador também não implementa &lt;code&gt;__hash__()&lt;/code&gt;, então ele pega a implementação padrão de &lt;code&gt;object&lt;/code&gt;, que por sua vez é derivada do endereço de memória do objeto. Uma vez que duas diferentes instâncias de iteradores tem endereços de memória diferentes, o resultado de duas chamadas a &lt;code&gt;reversed()&lt;/code&gt; na mesma sequência irá comparar como desigual.&lt;/p&gt;
&lt;p&gt;A comparação dos resultados de &lt;code&gt;sorted()&lt;/code&gt; no segundo exemplo é mais complicado: a primeira chamada para &lt;code&gt;sorted()&lt;/code&gt; consome o iterador retornado pelo &lt;code&gt;reversed()&lt;/code&gt; e produz a lista ordenada &lt;code&gt;[1, 2, 3]&lt;/code&gt;. Mas a segunda chamada para &lt;code&gt;sorted()&lt;/code&gt; não tem mais nada para consumir, e retorna uma lista vazia &lt;code&gt;[]&lt;/code&gt;, e é o caso em que &lt;code&gt;[1, 2, 3] != []&lt;/code&gt;;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;"Tipos circulares"&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Isso é uma daquelas coisas :)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;"extend vs +="&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;([],)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;tuple&amp;#39;&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;does&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;support&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="n"&gt;assignment&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Python não vai permitir você atribuir diretamente aos índices de uma tupla, seja através da sintaxe normal ou aumentada (+= e similares). Mas ele vai deixar você chamar métodos dos objetos na tupla, e se acontecer desses objetos serem mutáveis e deles definirem métodos que permitem você mudá-los sem usar sintaxe de atribuição, vai funcionar.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“Indexando com floats”&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt; &lt;span class="n"&gt;indices&lt;/span&gt; &lt;span class="n"&gt;must&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;integers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;}[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;}[&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esse é um pouco sorrateiro: os dois primeiros exemplos usam uma lista, e índices de listas devem ser inteiros. Os outros dois exemplos usam um dicionário, e qualquer tipo "hasheável" pode servir como uma chave de dicionário.&lt;/p&gt;
&lt;p&gt;Quanto ao motivo de &lt;code&gt;0&lt;/code&gt; e &lt;code&gt;0.0&lt;/code&gt; devolverem o mesmo valor, não estou 100% certo disso (como não tenho analisado a implementação de dicionário do CPython ultimamente), mas eu acredito que a prevenção de colisões permitem que duas chaves peguem o mesmo valor do dicionário se eles tem o mesmo hash e são comparados iguais (e uma vez que &lt;code&gt;hash(0) == hash(0.0)&lt;/code&gt; e &lt;code&gt;0 == 0.0&lt;/code&gt; você tem o resultado no exemplo).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;"tudo e vazio"&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([[]])&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([[[]]])&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Complicado, né? O argumento para &lt;code&gt;all()&lt;/code&gt; é uma sequência. Então no primeiro exemplo, nós estamos pedindo para ele avaliar uma sequência vazia; &lt;code&gt;all()&lt;/code&gt; está definido para retornar &lt;code&gt;True&lt;/code&gt; para uma sequência vazia. O segundo exemplo tem uma sequência contendo um item — uma lista vazia — que é avaliado como &lt;code&gt;False&lt;/code&gt;, então retorna &lt;code&gt;False&lt;/code&gt;. O terceiro pega uma sequência contendo um item — uma lista contendo uma lista vazia — que é avaliada como &lt;code&gt;True&lt;/code&gt; (porque a lista contendo a lista vazia é por si só não vazia), e então retorna &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“sum and strings”&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;t sum strings [use &amp;#39;&amp;#39;.join(seq) instead]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esse é outra onde uma rápida olhada na documentação da função revela o que está acontecendo.&lt;/p&gt;
&lt;p&gt;Quando dá-se uma sequência vazia, &lt;code&gt;sum()&lt;/code&gt; retornará 0, e a string vazia é uma sequência vazia. Quando dado dois argumentos, &lt;code&gt;sum()&lt;/code&gt; trata o segundo argumento como um valor acumulador inicial para retornar quando a sequência fornecida é vazia (de fato, a definição dessa função é &lt;code&gt;sum(sequence, start=0)&lt;/code&gt; então realmente, no caso de uma sequência vazia com um argumento, ela está apenas retornando o valor padrão de &lt;code&gt;start&lt;/code&gt;); isso que está acontecendo no segundo, terceiro e quarto exemplos. No quinto exemplo, &lt;code&gt;sum()&lt;/code&gt; reclama que não funciona com um valor string para o segundo parâmetro, uma vez que &lt;code&gt;sum()&lt;/code&gt; está definido para ser capaz de rejeitar tipos não numéricos.&lt;/p&gt;
&lt;p&gt;Há outro "wat": &lt;code&gt;sum()&lt;/code&gt; apenas checa o tipo do seu segundo argumento (se você quiser verificar, é a função &lt;code&gt;builtin_sum()&lt;/code&gt; no Python 2, e &lt;code&gt;builtin_sum_impl()&lt;/code&gt; no Python 3, e em ambas as versões está localizado em &lt;code&gt;Python/bltinmodule.c&lt;/code&gt; na árvore de código fonte). No Python 2, ele curto-circuita com um &lt;code&gt;TypeError&lt;/code&gt; se o segundo argumento é uma instância de &lt;code&gt;basestring&lt;/code&gt;; no Python 3 ele curto-circuita com &lt;code&gt;TypeError&lt;/code&gt; quando o segundo argumento é uma instância de &lt;code&gt;str&lt;/code&gt;, &lt;code&gt;bytes&lt;/code&gt; ou &lt;code&gt;bytearray&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Mas ele nunca checa o tipo do primeiro argumento, ou dos itens na sequência (se for uma sequência); ela simplesmente confia no fato que iteração em um tipo não sequencial lança uma exceção &lt;code&gt;TypeError&lt;/code&gt;, e adição de uma string para um inteiro vai levantar um &lt;code&gt;TypeError&lt;/code&gt; (o último porque você não pode passar um valor do tipo string para o segundo argumento, e esse argumento é padrão 0 quando não especificado).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“Comparing NaNs”&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;1e400&lt;/span&gt;  &lt;span class="c"&gt;# nan&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;1e400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;1e400&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;1e400&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;NaN&lt;/code&gt; é estranho. IEEE 754 nos fala que comparações com &lt;code&gt;NaN&lt;/code&gt; são desordenadas; &lt;code&gt;NaN&lt;/code&gt; não é nem maior, menor ou igual a qualquer valor de ponto flutuante, incluindo ele mesmo.&lt;/p&gt;
&lt;p&gt;Então, na primeira chamada de &lt;code&gt;len()&lt;/code&gt;, em teoria nós devemos esperar 6 como resposta; todos os valores são &lt;code&gt;NaN&lt;/code&gt; e nenhum deles são iguais aos outros, de modo que o conjunto literal não deve suprimir qualquer valor duplicado. De igual modo, a segunda chamada de &lt;code&gt;len()&lt;/code&gt; deveria retornar 3.&lt;/p&gt;
&lt;p&gt;O que realmente parece estar acontecendo é que Python está considerando &lt;code&gt;x&lt;/code&gt; e &lt;code&gt;x&lt;/code&gt; serem valores duplicados, &lt;code&gt;float(x)&lt;/code&gt; e &lt;code&gt;float(x)&lt;/code&gt; também serem valores duplicados, e &lt;code&gt;0*1e400&lt;/code&gt; and &lt;code&gt;0*1e400&lt;/code&gt; serem valores "distintos". ~~O porque eu não tenho certeza. Eu acredito que é possível que esteja acontecendo algum tipo complicado de avaliação única, mas isso exigiria Python saber &lt;code&gt;float(x)&lt;/code&gt; sempre retorna o mesmo valor para o mesmo &lt;code&gt;x&lt;/code&gt; (e neste caso não é verdade no caso que ambas as chamadas retornam valores &lt;code&gt;NaN&lt;/code&gt; que são desiguais).~~&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Edit&lt;/em&gt;: &lt;a href="https://www.reddit.com/r/Python/comments/3ojwf9/explaining_the_python_wats/cvxxto3"&gt;um comentário no reddit acertou na solução&lt;/a&gt;. Python parece estar usando o identificador como um curto-circuito otimizado para evitar fazer uma checagem de igualdade potencialmente custosa. E realmente, ambos &lt;code&gt;x is x&lt;/code&gt; e &lt;code&gt;float(x) is float(x)&lt;/code&gt; retornam &lt;code&gt;True&lt;/code&gt; com &lt;code&gt;x = 0*1e400&lt;/code&gt;, mas &lt;code&gt;0*1e400 is 0*1e400&lt;/code&gt; retorna &lt;code&gt;False&lt;/code&gt;. Se alguém mais quiser se divertir um pouco mais, dê uma olhada em &lt;em&gt;porquê&lt;/em&gt; &lt;code&gt;*1e400 is not 0*1e400&lt;/code&gt; retorna &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Viu algum trecho que poderia ficar com uma tradução melhor? Manda lá nos comentários mais abaixo. Valeu pessoal, e até a próxima!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Referências:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.b-list.org/weblog/2015/oct/13/wats-doc/"&gt;Post original&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="python"></category><category term="python wat"></category><category term="translations"></category></entry><entry><title>Criando seu ambiente isolado para desenvolvimento web com Django</title><link href="https://dunderlabs.github.io/criando-seu-ambiente-para-desenvolvimento-web-com-django.html" rel="alternate"></link><updated>2016-01-25T23:29:00-03:00</updated><author><name>Patrick Mazulo</name></author><id>tag:dunderlabs.github.io,2016-01-25:criando-seu-ambiente-para-desenvolvimento-web-com-django.html</id><summary type="html">&lt;p&gt;&lt;img alt="Créditos da imagem" src="https://dunderlabs.github.io/images/posts/criando_ambiente_django.png" /&gt;&lt;/p&gt;
&lt;p&gt;Créditos da imagem: &lt;a href="https://www.howtoforge.com/tutorial/how-to-install-django-1-9-on-ubuntu-15-04/"&gt;https://www.howtoforge.com/tutorial/how-to-install-django-1-9-on-ubuntu-15-04/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;O começo de qualquer nova atividade é sempre meio complicada. Você se vê perdido no meio de tantas possibilidades e maneiras diferentes de se fazer a mesma coisa. Se você não tiver um mínimo de mentoria, como alguém mais experiente que lhe mostre alguns macetes iniciais, ou que indique o tão famoso "caminho das pedras", essa nova estrada vai estar cheia de obstáculos que você ainda não conhece. Dentre os vários tipos de pessoas no mundo, existem aquelas que documentam essas experiências, para servir de guia para quem estará passando por ele também. E é isso que este post será. Simbora?&lt;/p&gt;
&lt;p&gt;Que Python é uma maravilha e que deveria estar na lista das maravilhas deste mundo, todo mundo já sabe. E com ele foi criado um dos mais conhecidos frameworks web: Django. Mas qual a dessa história toda de ambiente de desenvolvimento? Para ilustrar melhor, vamos imaginar o seguinte cenário:&lt;/p&gt;
&lt;p&gt;Digamos que você foi contratado para desenvolver um sistema web, e para ele você vai utilizar uma determinada versão do Django. Então você vai lá na sua máquina e instala:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install &lt;span class="nv"&gt;django&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;1.6
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Obs.: Ao não especificar a versão que será instalada, o pip irá instalar a versão mais recente e estável.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Porém nesse sistema você terá que utilizar algumas libs externas. Simples, só instalar usando o pip:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install gunicorn&amp;lt;&lt;span class="o"&gt;=&lt;/span&gt;18.0 lxml&amp;lt;&lt;span class="o"&gt;=&lt;/span&gt;3.2.4
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Obs.: Se você estiver utilizando o &lt;a href="http://www.zsh.org/"&gt;zsh&lt;/a&gt; como seu shell padrão, terá que envolver cada uma das declarações de pacote com aspas simples, ficando assim: &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install &lt;span class="s1"&gt;&amp;#39;gunicorn&amp;lt;=18.0&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;lxml&amp;lt;=3.2.4&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pronto, você acaba de instalar no seu SO esses 3 pacotes, e já pode começar a desenvolver. Mas agora digamos que você também vai trabalhar em outro projeto paralelo. E agora se vê diante de um problema ao olhar as versões que terá que usar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;django # 1.9
gunicorn # 19.4.5
lxml # 3.5
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E agora, o que fazer? Vou ter que desinstalar as versões anteriores para instalar essas específicas deste novo projeto? E quando eu for para outro, terei que fazer isso novamente?&lt;/p&gt;
&lt;p&gt;A resposta é: Sim, caso você não use a abordagem de trabalhar com ambientes virtuais isolados.&lt;/p&gt;
&lt;p&gt;Ambiente virtual isolado é auto-explicativo. Você terá um ambiente isolado do seu sistema, onde nele você poderá ter todas as dependências instaladas para o seu projeto. Uma vez criado e instalado os pacotes, você pode iniciar seu projeto. Vai começar outro projeto com outras dependências? Beleza, só criar outro ambiente e ser feliz!&lt;/p&gt;
&lt;p&gt;Mas como começar a usar essa abordagem? Aqui que a parada começa a ficar interessante ;-)&lt;/p&gt;
&lt;p&gt;Lhes apresento o &lt;a href="https://virtualenv.readthedocs.org/en/latest/"&gt;virtualenv&lt;/a&gt; e &lt;a href="https://virtualenvwrapper.readthedocs.org/en/latest/install.html"&gt;virtualenvwrapper&lt;/a&gt;!
São duas ferramentas maravilhosas que vão possibilitar essa nova maneira de trabalhar. Mas o que é um ou outro? Vamo lá.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;virtualenv&lt;/code&gt; é uma ferramenta para criar para criar ambientes Python isolados. Para instalar é super simples:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;sudo&lt;span class="o"&gt;]&lt;/span&gt; pip install virtualenv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A instalação dele é feita globalmente, então dependendo do seu SO talvez seja necessário usar o &lt;code&gt;sudo&lt;/code&gt; neste comando. Ao finalizar, já podemos criar nossa primeira env:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;virtualenv minha_env
New python executable in /home/mazulo/dev/python/minha_env/bin/python
Installing setuptools, pip, wheel...done.
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Obs.: Ao executar dessa maneira, a env criada usará como python padrão o mesmo Python que é padrão no seu SO. No caso do Ubuntu, até a versão 14.04 (a que eu uso), o Python 2.7.6 é o padrão. Sendo assim o python do &lt;code&gt;minha_env&lt;/code&gt; será o python 2.7.6. Caso você queira usar uma versão diferente, basta usar o parâmetro &lt;code&gt;-p&lt;/code&gt; (ou &lt;code&gt;--python&lt;/code&gt;) e indicar qual versão utilizar. Caso eu use a versão 3.x, ficaria dessa maneira:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;virtualenv minha_env -p python3 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Isso criará no seu diretório atual uma pasta chamada &lt;code&gt;minha_env&lt;/code&gt;. Dentro deste diretório teremos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;minha_env/lib/&lt;/strong&gt; e &lt;strong&gt;minha_env/include/&lt;/strong&gt;, contendo arquivos da biblioteca de suporte para um virtualenv python. Pacotes de terceiros (instalados via pip, por exemplo) instalados neste ambiente ficarão em &lt;strong&gt;minha_env/lib/pythonX.X/site-packages/&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;minha_env/bin/&lt;/strong&gt; é onde os executáveis ficam, como o próprio python, por exemplo. Sendo assim, executar um arquivo com &lt;code&gt;#! /caminho/para/minha_env/bin/python&lt;/code&gt; usará a versão do Python desta virtualenv.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Os pacotes principais, &lt;code&gt;pip&lt;/code&gt; e &lt;code&gt;setuptools&lt;/code&gt; já estão instalados. Dessa maneira, você pode instalar novos pacotes dentro da própria env.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;env criada, agora vamos ativá-la:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source &lt;/span&gt;minha_env/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esse comando ativará sua env. Um indicativo disso será o nome da sua env aparecer entre () antes do nome do seu usuário no seu bash.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;minha_env&lt;span class="o"&gt;)&lt;/span&gt;user@machine:~&lt;span class="err"&gt;$&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Eu uso &lt;a href="http://www.zsh.org/"&gt;zsh&lt;/a&gt; com o tema fox, e ao ativar a env ele fica da seguinte maneira:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;minha_env&lt;span class="o"&gt;)&lt;/span&gt; ┌&lt;span class="o"&gt;[&lt;/span&gt;mazulo☮cabuloso&lt;span class="o"&gt;]&lt;/span&gt;-&lt;span class="o"&gt;(&lt;/span&gt;~/dev/python&lt;span class="o"&gt;)&lt;/span&gt;
└&amp;gt; &lt;span class="c"&gt;# sim, o nome do meu PC é cabuloso hahaha&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Obs.: Daqui em diante, os exemplos do terminal serão um ctrl+c ctrl+v do meu terminal, que usa o tema citado acima.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A partir deste momento, você está totalmente isolado do seu sistema, e pode começar a instalar todas as dependências do seu projeto sem medo de ser feliz. &lt;/p&gt;
&lt;p&gt;Porém...&lt;/p&gt;
&lt;p&gt;Como você percebeu, o &lt;code&gt;virtualenv&lt;/code&gt; cria uma pasta no seu diretório atual, o que pode se tornar uma chatice, principalmente se você utilizar versionamento de código. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"Ah, mas é só colocar essa pasta no .gitignore"&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Verdade, mas seria bem melhor não ter que fazer isso, né? Bom, uma maneira seria centralizar todas suas envs dentro de uma pasta, chamada &lt;code&gt;virtualenvs&lt;/code&gt;, por exemplo. Ela ficaria na sua home (ou onde você achar melhor). Daí sempre na hora de criar uma nova env, você navegaria até este diretório, criaria sua env, ativaria ela e depois iria para o seu diretório de trabalho... Eita, meus dedos até cansaram de digitar todo esse percurso :-P&lt;/p&gt;
&lt;p&gt;Com o tempo isso pode se tornar extremamente fatigante. Mas não perca as esperanças, pois está na hora do &lt;a href="https://virtualenvwrapper.readthedocs.org/en/latest/install.html"&gt;virtualenvwrapper&lt;/a&gt; entrar em ação!&lt;/p&gt;
&lt;p&gt;virtualenvwrapper é um conjunto de extensões para o virtualenv. Essas extensões incluem wrappers para criação e exclusão de ambientes virtuais, além de gerenciar seu workflow de desenvolvimento, tornando fácil trabalhar em mais de um projeto.&lt;/p&gt;
&lt;p&gt;Suas features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Organizar todos os seus ambientes virtuais em um só lugar(!!!!)&lt;/li&gt;
&lt;li&gt;Wrappers para gerenciar seus ambientes (criar, deletar, copiar e etc)&lt;/li&gt;
&lt;li&gt;Usar um simples comando para trocar entre ambientes(!!!!!!!!!!!!!!)&lt;/li&gt;
&lt;li&gt;Autocomplete com tab para comandos que recebem um ambiente virtual como argumento&lt;/li&gt;
&lt;li&gt;Gatilhos configuráveis pelo usuário para todas as operações&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;dentre algumas outras.&lt;/p&gt;
&lt;p&gt;Conseguem ver a maravilha que isso é?! Acho simplesmente sensacional! E para poder usufruir de tudo isso, vamos para o passo a passo.&lt;/p&gt;
&lt;p&gt;Da mesma maneira que o &lt;code&gt;virtualenv&lt;/code&gt;, a instalação do &lt;code&gt;virtualenvwrapper&lt;/code&gt; será feita globalmente.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;sudo&lt;span class="o"&gt;]&lt;/span&gt; pip install virtualenvwrapper
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora nós vamos adicionar 3 linhas no arquivo de inicialização do seu shell &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;.bashrc&lt;/em&gt; ou &lt;em&gt;.profile&lt;/em&gt; para o bash padrão&lt;/li&gt;
&lt;li&gt;&lt;em&gt;.zshrc&lt;/em&gt; para zsh shell&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;export WORKON_HOME=&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="x"&gt;/.virtualenvs&lt;/span&gt;
&lt;span class="x"&gt;export PROJECT_HOME=&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="x"&gt;/Devel&lt;/span&gt;
&lt;span class="x"&gt;source /usr/local/bin/virtualenvwrapper.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A primeira linha configura a localização de onde seus ambientes virtuais vão ficar. Na segunda teremos a localização dos seus diretórios de projetos em desenvolvimento (pode apagar essa, se quiser), e na terceira a localização do script instalado com esse pacote. Depois disso você terá que recarregar a inicialização deste arquivo&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; ~/.zshrc &lt;span class="c"&gt;# ou .bashrc, ou o arquivo que o seu shell usa&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pronto, agora você pode criar/ativar suas envs da maneira mais simples possível :)
Exemplo executado na minha máquina:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;[&lt;/span&gt;mazulo☮cabuloso&lt;span class="o"&gt;]&lt;/span&gt;-&lt;span class="o"&gt;(&lt;/span&gt;~/dev/python&lt;span class="o"&gt;)&lt;/span&gt;
└&amp;gt; mkvirtualenv nova_env -p /usr/bin/python3.4 
Running virtualenv with interpreter /usr/bin/python3.4
Using base prefix &lt;span class="s1"&gt;&amp;#39;/usr&amp;#39;&lt;/span&gt;
New python executable in /home/mazulo/.virtualenvs/nova_env/bin/python3.4
Also creating executable in /home/mazulo/.virtualenvs/nova_env/bin/python
Installing setuptools, pip, wheel...done.
virtualenvwrapper.user_scripts creating /home/mazulo/.virtualenvs/nova_env/bin/predeactivate
virtualenvwrapper.user_scripts creating /home/mazulo/.virtualenvs/nova_env/bin/postdeactivate
virtualenvwrapper.user_scripts creating /home/mazulo/.virtualenvs/nova_env/bin/preactivate
virtualenvwrapper.user_scripts creating /home/mazulo/.virtualenvs/nova_env/bin/postactivate
virtualenvwrapper.user_scripts creating /home/mazulo/.virtualenvs/nova_env/bin/get_env_details
&lt;span class="o"&gt;(&lt;/span&gt;nova_env&lt;span class="o"&gt;)&lt;/span&gt; ┌&lt;span class="o"&gt;[&lt;/span&gt;mazulo☮cabuloso&lt;span class="o"&gt;]&lt;/span&gt;-&lt;span class="o"&gt;(&lt;/span&gt;~/dev/python&lt;span class="o"&gt;)&lt;/span&gt;
└&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Estou criando uma outra env, chamada &lt;strong&gt;nova_env&lt;/strong&gt;, agora utilizando o wrapper do &lt;code&gt;virtualenvwrapper&lt;/code&gt; chamado &lt;code&gt;mkvirtualenv&lt;/code&gt;. Ele vai criar essa env dentro do diretório que nós configuramos naquela 1ª das 3 linhas que adicionamos no arquivo de configuração do shell, e após isso já ativa ela pra nós!&lt;/p&gt;
&lt;p&gt;Agora digamos que eu vá trabalhar em outro projeto. Vou criar a env para ele:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;nova_env&lt;span class="o"&gt;)&lt;/span&gt; ┌&lt;span class="o"&gt;[&lt;/span&gt;mazulo☮cabuloso&lt;span class="o"&gt;]&lt;/span&gt;-&lt;span class="o"&gt;(&lt;/span&gt;~/dev/python&lt;span class="o"&gt;)&lt;/span&gt;
└&amp;gt; mkvirtualenv django_project -p /usr/bin/python3.4 
Running virtualenv with interpreter /usr/bin/python3.4
Using base prefix &lt;span class="s1"&gt;&amp;#39;/usr&amp;#39;&lt;/span&gt;
New python executable in /home/mazulo/.virtualenvs/django_project/bin/python3.4
Also creating executable in /home/mazulo/.virtualenvs/django_project/bin/python
Installing setuptools, pip, wheel...done.
virtualenvwrapper.user_scripts creating /home/mazulo/.virtualenvs/django_project/bin/predeactivate
virtualenvwrapper.user_scripts creating /home/mazulo/.virtualenvs/django_project/bin/postdeactivate
virtualenvwrapper.user_scripts creating /home/mazulo/.virtualenvs/django_project/bin/preactivate
virtualenvwrapper.user_scripts creating /home/mazulo/.virtualenvs/django_project/bin/postactivate
virtualenvwrapper.user_scripts creating /home/mazulo/.virtualenvs/django_project/bin/get_env_details
&lt;span class="o"&gt;(&lt;/span&gt;django_project&lt;span class="o"&gt;)&lt;/span&gt; ┌&lt;span class="o"&gt;[&lt;/span&gt;mazulo☮cabuloso&lt;span class="o"&gt;]&lt;/span&gt;-&lt;span class="o"&gt;(&lt;/span&gt;~/dev/python&lt;span class="o"&gt;)&lt;/span&gt;
└&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Perceba que eu ainda estava com a &lt;strong&gt;nova_env&lt;/strong&gt; ativada ao criar a env &lt;strong&gt;django_project&lt;/strong&gt;. Mas sem problemas, o &lt;code&gt;virtualenvwrapper&lt;/code&gt; cria a env, desativa a anterior e ativa a nova pra mim :)&lt;/p&gt;
&lt;p&gt;E caso eu queira trocar de ambiente para voltar a trabalhar na nova_env? Simples:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;django_project&lt;span class="o"&gt;)&lt;/span&gt; ┌&lt;span class="o"&gt;[&lt;/span&gt;mazulo☮cabuloso&lt;span class="o"&gt;]&lt;/span&gt;-&lt;span class="o"&gt;(&lt;/span&gt;~/dev/python&lt;span class="o"&gt;)&lt;/span&gt;
└&amp;gt; workon nova_env 
&lt;span class="o"&gt;(&lt;/span&gt;nova_env&lt;span class="o"&gt;)&lt;/span&gt;┌&lt;span class="o"&gt;[&lt;/span&gt;mazulo☮cabuloso&lt;span class="o"&gt;]&lt;/span&gt;-&lt;span class="o"&gt;(&lt;/span&gt;~/dev/python&lt;span class="o"&gt;)&lt;/span&gt;
└&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vou utilizar o &lt;code&gt;workon&lt;/code&gt; para trocar de maneira rápida e fácil de ambiente. O bacana é que ele permite você usar autocomplete com o tab para a env que deseja ativar. Sem trocar de diretório para isso. Sensacional, diz aí!&lt;/p&gt;
&lt;p&gt;Bom, basicamente era isso que eu gostaria de mostrar sobre o &lt;a href="https://virtualenv.readthedocs.org/en/latest/"&gt;virtualenv&lt;/a&gt; e &lt;a href="https://virtualenvwrapper.readthedocs.org/en/latest/install.html"&gt;virtualenvwrapper&lt;/a&gt;, e como configurar um ambiente para começar a trabalhar com django.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"Ah, mas você nem falou como instalar o django"&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Super fácil, ora pois:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;django_project&lt;span class="o"&gt;)&lt;/span&gt; ┌&lt;span class="o"&gt;[&lt;/span&gt;mazulo☮cabuloso&lt;span class="o"&gt;]&lt;/span&gt;-&lt;span class="o"&gt;(&lt;/span&gt;~/dev/python&lt;span class="o"&gt;)&lt;/span&gt;
└&amp;gt; pip install django
Collecting django
  Downloading Django-1.9.1-py2.py3-none-any.whl &lt;span class="o"&gt;(&lt;/span&gt;6.6MB&lt;span class="o"&gt;)&lt;/span&gt;
    100% &lt;span class="p"&gt;|&lt;/span&gt;████████████████████████████████&lt;span class="p"&gt;|&lt;/span&gt; 6.6MB 181kB/s 
Installing collected packages: django
Successfully installed django-1.9.1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pronto, django instalado de maneira isolada no seu ambiente. Agora só começar a codar!&lt;/p&gt;
&lt;p&gt;Dúvidas e/ou críticas, só visitar os comentários mais abaixo. Valeu pessoal, e até a próxima!&lt;/p&gt;
&lt;p&gt;Referências:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://virtualenv.readthedocs.org/en/latest/index.html"&gt;Virtualenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://virtualenvwrapper.readthedocs.org/en/latest/"&gt;virtualenvwrapper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="python"></category><category term="django"></category><category term="django environment"></category><category term="web development"></category></entry><entry><title>Série Django - Settings</title><link href="https://dunderlabs.github.io/serie-django-settings.html" rel="alternate"></link><updated>2016-01-17T21:34:00-03:00</updated><author><name>Patrick Mazulo</name></author><id>tag:dunderlabs.github.io,2016-01-17:serie-django-settings.html</id><summary type="html">&lt;p&gt;&lt;img alt="Créditos da imagem" src="https://dunderlabs.github.io/images/posts/django-settings.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;Créditos da imagem: &lt;a href="https://www.coderedcorp.com/blog/django-settings-for-multiple-environments/"&gt;https://www.coderedcorp.com/blog/django-settings-for-multiple-environments/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Estaremos iniciando uma nova série no blog. Mas vamos tentar fazer de uma maneira diferente. Ao invés de criarmos uma aplicação, vamos falar sobre o Django em si, seus componentes, como funcionam, como se interrelacionam e etc. O post de hoje na realidade é uma "transcrição" de um hangout que aconteceu há um tempo atrás, de um grupo de estudo no Telegram chamado "Django Group - Initial Steps". Caso tenha interesse, &lt;a href="http://pastebin.com/nwYyG7Ar"&gt;neste link&lt;/a&gt; vc terá informações sobre como se juntar ao grupo.&lt;/p&gt;
&lt;p&gt;Neste &lt;a href="https://youtu.be/m7PujnjPboU"&gt;hangout&lt;/a&gt; em questão falamos sobre o módulo &lt;code&gt;settings.py&lt;/code&gt;. Então, vamos discutir um pouco sobre ele aqui neste post.&lt;/p&gt;
&lt;p&gt;O &lt;code&gt;settings.py&lt;/code&gt; nada mais é do que um arquivo de configuração do Django que contém todas as configurações da sua instalação do framework. Esse arquivo nada mais é do que também um módulo Python com váriaveis de nível de módulo.&lt;/p&gt;
&lt;p&gt;Agora vamos percorrer suas linhas e entender o que cada uma faz.&lt;/p&gt;
&lt;p&gt;Ao início do arquivo, você terá uma string de múltiplas linhas, com informações relevantes, incluindo links da documentação para você depois ter mais informações sobre este arquivo.
Agora vamos trazer atenção para estas linhas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="n"&gt;BASE_DIR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O que está acontecendo? E para que serve esta variável &lt;code&gt;BASE_DIR&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;O módulo &lt;code&gt;os&lt;/code&gt; do Python nos fornece uma maneira portável de usar funcionalidades do sistema operacional. No caso estaremos usando para manipular caminhos de diretórios (paths).&lt;/p&gt;
&lt;p&gt;BASE_DIR é a variável que vai ter o caminho para o nosso projeto Django, e será usada mais a frente. Serve como uma maneira facilitada para que não tenhamos que trabalhar com caminho absoluto (absolute paths). Imagine que você salve o caminho para o seu projeto com o caminho absoluto como  &lt;code&gt;BASE_DIR = '/home/&amp;lt;user&amp;gt;/dev/django_projects/my_project'&lt;/code&gt;, e por algum motivo tenha que mudar seu projeto para outra máquina. Quanta dor de cabeça seria para mudar todos os arquivos onde você precise desse caminho? Pois bem, o settings, ao iniciar o projeto, já vem com uma abordagem bem bacana para facilitar e nos livrar desse imenso trabalho.&lt;/p&gt;
&lt;p&gt;Mas para entender melhor vamos pedaço por pedaço.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__file__&lt;/code&gt; é um atributo do módulo atual que representa o nome do arquivo. Faça um teste: salve um arquivo .py apenas com um &lt;code&gt;print(__file__)&lt;/code&gt; e execute-o para ver o que será printado na tela.
Este vai ser o ponto de partida para descobrirmos o restante do caminho para o projeto.
Agora vamos realizar as chamadas dos métodos de dentro para fora, para podermos ver como vamos conseguir realizar tal façanha.&lt;/p&gt;
&lt;p&gt;A chamada mais interna é esta: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O &lt;code&gt;abspath&lt;/code&gt; vai nos retornar uma versão absoluta e normalizada do caminho deste arquivo (arquivo este disponibilizado pelo &lt;code&gt;__file__&lt;/code&gt;, lembra?). Digamos que na minha máquina eu tenha um projeto django chamado "django_project_1_9". O &lt;code&gt;abspath&lt;/code&gt; retornaria o seguinte caminho:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/home/mazulo/dev/web/django_projects/django_project_1_9/django_project_1_9/settings.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Perceba que ao final do arquivo nós temos o próprio arquivo &lt;code&gt;settings.py&lt;/code&gt;. Pois bem, o resultado desta chamada vai ser imediatamente jogado para a chamada mais externa, que no caso é o:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O &lt;code&gt;dirname&lt;/code&gt; vai retorna o nome do diretório pai do caminho passado ao diretório. Vai ser o primeiro elemento do par retornado ao passar este path para a função &lt;code&gt;os.path.split()&lt;/code&gt;. O resultado será:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/home/mazulo/dev/web/django_projects/django_project_1_9/django_project_1_9
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note que ele apenas retirou o nome do arquivo &lt;code&gt;settings.py&lt;/code&gt;. Este é o diretório onde está o arquivo &lt;code&gt;settings.py&lt;/code&gt;, ainda não é a raiz do nosso projeto, nosso atual objetivo. O resultado dessa chamada será então jogado como parâmetro para a última função encadeada:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Usamos novamente o &lt;code&gt;dirname&lt;/code&gt; para pegar o diretório pai. Uma vez o último diretório era onde está armazenado o settings, acima dele teremos a raiz do nosso projeto, onde também está o arquivo &lt;code&gt;manage.py&lt;/code&gt;. E é exatamente isso que será retornado e atribuído para a variável &lt;code&gt;BASE_DIR&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/home/mazulo/dev/web/django_projects/django_project_1_9
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pronto, aí está o caminho para a raiz do nosso projeto sendo setada de maneira dinâmica. Agora, independente de quantas vezes trocarmos nosso projeto de pasta/máquina, este caminho estará funcionando perfeitamente.&lt;/p&gt;
&lt;p&gt;Seguindo em frente teremos o &lt;code&gt;DEBUG&lt;/code&gt;. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sua função basicamente é mostrar informações detalhadas em uma página sobre o erro ocorrido. Lembra daquela página amarela?&lt;/p&gt;
&lt;p&gt;&lt;img alt="Exemplo da página de erro" src="https://dunderlabs.github.io/images/posts/django_page_error.png" /&gt;&lt;/p&gt;
&lt;p&gt;Mas não somente na documentação, como em qualquer post você vai encontrar o seguinte conseglho: &lt;strong&gt;NUNCA&lt;/strong&gt; faça deploy de um sistema com o modo &lt;code&gt;DEBUG&lt;/code&gt; ligado. &lt;strong&gt;NUNCA&lt;/strong&gt;. O motivo é que nessa tela de erro, junto com o traceback do erro, são mostradas muitos metadados sobre o seu ambiente, assim como o que está definido no seu settings. Então, fica dado o recado: &lt;strong&gt;NUNCA&lt;/strong&gt; &lt;em&gt;faça deploy de um sistema com o modo &lt;code&gt;DEBUG&lt;/code&gt; ligado.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Logo após a declaração do &lt;code&gt;BASE_DIR&lt;/code&gt;, teremos o &lt;code&gt;ALLOWED_HOSTS&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ALLOWED_HOSTS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O &lt;code&gt;ALLOWED_HOSTS&lt;/code&gt; é uma lista de strings representando o host/nome de domínio que o projeto Django pode servir. Serve como uma medida de segurança para impedir que um invasor possa realizar certos tipos de ataque (evenenamento de cache, disparo de e-mails de redefinição de senha contendo links para hosts maliciosos e etc).&lt;/p&gt;
&lt;p&gt;Seguindo em frente teremos uma das mais conhecidas variáveis deste módulo, e primeiramente modificadas ao início de um projeto: &lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Application definition&lt;/span&gt;

&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.admin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.auth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.contenttypes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.sessions&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.messages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.staticfiles&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;myapp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt; é uma lista de strings designando todas as aplicações que estão habilitadas nesta instalação do Django. Cada string deve ser um caminho Python (com pontos, algo como 'module.class') para:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Uma classe de configuração de aplicação, ou&lt;/li&gt;
&lt;li&gt;Um pacote contendo uma aplicação (o caso daquele 'myapp')&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Logo após teremos o &lt;code&gt;MIDDLEWARE_CLASSES&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;MIDDLEWARE_CLASSES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.middleware.security.SecurityMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.sessions.middleware.SessionMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.middleware.common.CommonMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.middleware.csrf.CsrfViewMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.auth.middleware.AuthenticationMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.auth.middleware.SessionAuthenticationMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.messages.middleware.MessageMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.middleware.clickjacking.XFrameOptionsMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O &lt;code&gt;MIDDLEWARE_CLASSES&lt;/code&gt; é uma lista de classes Middleware que serão usadas no seu projeto Django. Middleware na realidade é um framework do Django, que tem um conjunto de classes que servem como "gatilhos" para processar e modificar request/response. Cada componente é responsável por fazer alguma coisa em específico. Por exemplo, é por causa do &lt;code&gt;'django.contrib.auth.middleware.AuthenticationMiddleware'&lt;/code&gt; que você consegue ter acesso ao usuário da requisição (&lt;code&gt;request.user&lt;/code&gt;, para ver o código do Django responsável por isso, &lt;a href="https://github.com/django/django/blob/master/django/contrib/auth/middleware.py#L22"&gt;clique aqui&lt;/a&gt;), e também ao dicionário session (&lt;code&gt;request.session&lt;/code&gt;), tendo a classe &lt;code&gt;'django.contrib.sessions.middleware.SessionMiddleware'&lt;/code&gt; como responsável por isso. A ordem em que está configurado realmente importa, porque um middleware pode depender de outro. Por exemplo os que citamos aqui: a classe &lt;code&gt;AuthenticationMiddleware&lt;/code&gt; armazena o usuário na sessão, então ele deve rodar depois do &lt;code&gt;SessionMiddleware&lt;/code&gt;. Tudo beleza? Próximo, então.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TEMPLATES&lt;/code&gt; é uma lista de configuraçẽs para todas as engines de templates a serem usadas pelo Django. Cada item da lista é um dicionário contendo as opções para uma única engine. Neste dicionário teremos as seguintes chaves para sua configuração:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;TEMPLATES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;BACKEND&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django.template.backends.django.DjangoTemplates&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;DIRS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;templates&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),],&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;APP_DIRS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;OPTIONS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;context_processors&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;django.template.context_processors.debug&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;django.template.context_processors.request&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;django.contrib.auth.context_processors.auth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;django.contrib.messages.context_processors.messages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;BACKEND&lt;/code&gt;: o backend/engine que será usado para renderizar os templates. Por padrão é usado o &lt;code&gt;DjangoTemplates&lt;/code&gt;, mas você pode trocar e usar o &lt;code&gt;Jinja2&lt;/code&gt; no lugar, que também já vem por padrão. Você também pode usar alguma outra engine de terceiros, basta indicar o caminho completo: &lt;code&gt;'mypackage.whatever.Backend'&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DIRS&lt;/code&gt;: Diretórios onde a engine vai procurar por arquivos de templates, em ordem de pesquisa.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;APP_DIRS&lt;/code&gt;: Valor booleano que vai indicar se a engine deve procurar por arquivos de templates dentro das aplicações instaladas no projeto.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;OPTIONS&lt;/code&gt;: Um dicionário que servirá como parâmetros extras para passar ao backend do template. Esses parâmetros podem variar dependendo do backend. Por padrão virá apenas com apenas uma chave-valor, chamado &lt;code&gt;context_processors&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;context_processors&lt;/code&gt; é uma lista de objetos chamáveis que são usados para popular o contexto no objeto &lt;code&gt;RequestContext&lt;/code&gt;. Esses chamáveis recebem um objeto request como argumento e retornam um dicionário de item para serem incorporados no contexto.&lt;/p&gt;
&lt;p&gt;Vamos aos &lt;code&gt;WSGI_APPLICATION&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;WSGI_APPLICATION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django_project_1_9.wsgi.application&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;É o caminho Python completo para o objeto WSGI da aplicação que os servidores built-in (&lt;code&gt;runserver&lt;/code&gt;, por exemplo) do Django vão usar. Ao executar o &lt;code&gt;django-admin.py startproject&lt;/code&gt;, o comando vai criar um arquivo &lt;code&gt;wsgi.py&lt;/code&gt; simples com um &lt;code&gt;application&lt;/code&gt; chamável e apontar essa configuração para essa &lt;code&gt;application&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Agora chegamos em outro também muito importante, o &lt;code&gt;DATABASES&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Database&lt;/span&gt;
&lt;span class="c"&gt;# https://docs.djangoproject.com/en/1.9/ref/settings/#databases&lt;/span&gt;

&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django.db.backends.sqlite3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;db.sqlite3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nada mais é do que um dicionário de dicionários (dicionário aninhado) onde cada dicionário contém as configurações para uso de um banco de dados, possibilitando assim o uso de múltiplos banco num mesmo projeto. A configuração mais simples para esta variável encontra-se no &lt;code&gt;default&lt;/code&gt; gerado pelo &lt;code&gt;django-admin.py&lt;/code&gt; (snippet acima).&lt;/p&gt;
&lt;p&gt;Seguindo em frente teremos o &lt;code&gt;AUTH_PASSWORD_VALIDATORS&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Password validation&lt;/span&gt;
&lt;span class="c"&gt;# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators&lt;/span&gt;

&lt;span class="n"&gt;AUTH_PASSWORD_VALIDATORS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django.contrib.auth.password_validation.UserAttributeSimilarityValidator&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django.contrib.auth.password_validation.MinimumLengthValidator&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django.contrib.auth.password_validation.CommonPasswordValidator&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django.contrib.auth.password_validation.NumericPasswordValidator&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;É uma lisa de validadores que são usados para checar a força da senha do usuário. O Django já disponibiliza alguns por padrão, mas nada o impede de criar os seus próprios e usar nesta configuração.&lt;/p&gt;
&lt;p&gt;Internacionalização:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Internationalization&lt;/span&gt;
&lt;span class="c"&gt;# https://docs.djangoproject.com/en/1.9/topics/i18n/&lt;/span&gt;

&lt;span class="n"&gt;LANGUAGE_CODE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;en-us&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;TIME_ZONE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;UTC&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;USE_I18N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="n"&gt;USE_L10N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="n"&gt;USE_TZ&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos por partes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;LANGUAGE_CODE&lt;/code&gt;: Uma string que representa o código do idioma para esta instalação. Esse código tem de estar de acordo com o &lt;a href="https://docs.djangoproject.com/en/1.9/topics/i18n/#term-language-code"&gt;formato padrão de ID de linguagem&lt;/a&gt;. Essa variável tem dois propósitos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Se o locale middleware não está em uso, ele vai decidir qual tradução vai ser servida para todos os usuários&lt;/li&gt;
&lt;li&gt;Se o locale middleware está ativado, ele fornece um idioma como fallback no caso do idioma escolhido pelo usuário não puder ser determinado, ou não for suportado pelo website.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;TIME_ZONE&lt;/code&gt;: Uma string representando a time zone para essa instalação. Essa não necessariamente vai ser a time zone do server. Um servidor pode servir múltiplos projetos Django, cada um com sua configuração de time zone separada. Ao usar &lt;code&gt;USE_TZ&lt;/code&gt; como &lt;code&gt;False&lt;/code&gt;, essa será a time zone na qual Django vai armazenar todos os horários (datetimes). Já quando o &lt;code&gt;USE_TZ&lt;/code&gt; está setado como &lt;code&gt;True&lt;/code&gt;, esse vai ser a time zone padrão que o Django vai usar para mostrar horários em templates, e interpretar datas/horários submetidos em forms.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;USE_TZ&lt;/code&gt;: Um boolean que indica se datas/horários serão reconhecidos pela timezone, ou não. Se for &lt;code&gt;True&lt;/code&gt;, então o Django vai usar esse reconhecimento de datetimes internamente. Caso contrário, Django vai usar datetimes no tempo local.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;USE_I18N&lt;/code&gt;: Um boolean indicando se o sistema de tradução do Django deve ser habilitado.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;USE_L10N&lt;/code&gt;: Indica se os dados devem ser formatados levando em consideração sua localização. Se for &lt;code&gt;True&lt;/code&gt;, Django vai mostrar números e datas usando o formato local atual.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;E por fim, ao final do &lt;code&gt;settings.py&lt;/code&gt; padrão gerado pelo &lt;code&gt;django-admin.py&lt;/code&gt;, teremos o &lt;code&gt;STATIC_URL&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Static files (CSS, JavaScript, Images)&lt;/span&gt;
&lt;span class="c"&gt;# https://docs.djangoproject.com/en/1.9/howto/static-files/&lt;/span&gt;

&lt;span class="n"&gt;STATIC_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/static/&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vai ser a URL usada para se referir aos arquivos estáticos localizados no &lt;code&gt;STATIC_ROOT&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Exemplo: "/static/" (como no snippet acima), ou "http://static.server.com/"&lt;/p&gt;
&lt;p&gt;Digamos que seus arquivos estáticos estão dentro do seu projeto Django, que seu &lt;code&gt;STATIC_URL&lt;/code&gt; é "static", e que seu site se chama "http://meusite.com". No seu projeto você tem uma pasta "staticfiles" onde há um diretório para imagens chamado "img/". Ao acessar pela web a URL de alguma imagem do seu site, o caminho seria algo como: &lt;code&gt;http://meusite.com/static/img/imagem.jpg&lt;/code&gt;. Sacou? :)&lt;/p&gt;
&lt;p&gt;Bom pessoal, por enquanto é isso. Ainda tem &lt;strong&gt;MUITA&lt;/strong&gt; coisa, que se eu fosse cobrir tornaria este post gigantescamente maior do que ficou hahaha. Caso tenha curiosidade, não esqueça de visitar a documentação.
E se você curtiu esse post, compartilhe com os amigos devs! :D&lt;/p&gt;
&lt;p&gt;PS.: Há um python packate muito bacana chamado &lt;a href="https://github.com/drgarcia1986/simple-settings"&gt;simple-settings&lt;/a&gt;, desenvolvido pelo &lt;a href="https://twitter.com/drgarcia1986"&gt;@drgarcia1986&lt;/a&gt;, com o intuito de facilitar a maneira como você gerencia os settings dos projetos. Vale a pena dar uma olhada.&lt;/p&gt;
&lt;p&gt;Valeu pessoal, e até a próxima!&lt;/p&gt;
&lt;p&gt;Referências:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.9/topics/settings/"&gt;Documentação Django - settings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.djangobook.com/en/2.0/chapter17.html"&gt;Django Book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.9/_images/middleware.svg"&gt;Image how middleware works&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://agiliq.com/blog/2015/07/understanding-django-middlewares/"&gt;Understanding django middlewares&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/20957388/what-is-a-context-in-django"&gt;What is a context in django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.b-list.org/weblog/2006/jun/14/django-tips-template-context-processors/"&gt;Django tips: Template context processors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="python"></category><category term="django"></category><category term="django settings"></category><category term="web development"></category></entry><entry><title>O caminho do desenvolvedor web Python</title><link href="https://dunderlabs.github.io/o-caminho-do-desenvolvedor-web-python.html" rel="alternate"></link><updated>2015-03-17T14:13:00-03:00</updated><author><name>Patrick Mazulo</name></author><id>tag:dunderlabs.github.io,2015-03-17:o-caminho-do-desenvolvedor-web-python.html</id><summary type="html">&lt;p&gt;&lt;img alt="Créditos da imagem" src="https://dunderlabs.github.io/images/posts/dev_way2.png" /&gt;&lt;/p&gt;
&lt;p&gt;Créditos da imagem: &lt;a href="http://brianmcdonnell.github.io/pycon_ie_2013/#/"&gt;http://brianmcdonnell.github.io/pycon_ie_2013/#/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Do começo do ano passado para cá, acabei ficando bem ativo no
grupo Python Brasil do Facebook, sempre compartilhando coisas legais que
eu encontrava pela internet, e/ou respondendo perguntas que eu poderia
ajudar. Nesse meio tempo, uma das perguntas mais recorrentes que eu
tenho visto tem sido esta: &lt;strong&gt;O que eu devo fazer/estudar para
desenvolver para web com Python?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Numa das últimas vezes que eu vi uma dessas, eu acabei comentando (com
textão hahaha) a minha opinião acerca deste assunto, sobre qual seria
uma boa via para seguir. Mas pelo fato de, como falei anteriormente,
esta pergunta ser recorrente ~~e porque o comentário ficou enorme,~~ e o
Facebook ter um fluxo alto de threads fazendo com que perguntas fiquem
lá atrás rapidamente, eu resolvi transformar em um post.&lt;/p&gt;
&lt;p&gt;Aqui eu colocarei minha opinião, claro. E como tal é passível de
críticas. Logicamente que você pode não concordar com alguma parte, ou
por completo, ou quem sabe achar tudo bacana e querer testar. Mas, os
comentários estão ali pra isso :p deixe sua opinião sobre como foi pra
você caminhar por este percurso, ou o que achou das dicas ;)&lt;/p&gt;
&lt;p&gt;Sem mais delongas, vamos lá!&lt;/p&gt;
&lt;p&gt;Em algumas muitas vezes, esta pergunta sobre ser um desenvolvedor web
Python sempre vem acompanhada com alguma outra, como web e jogos, ou web
e desktop. Sobre isso, eu tenho o seguinte a falar:&lt;/p&gt;
&lt;p&gt;Primeiramente, eu lhe dou a dica de ver suas prioridades e objetivos.
Por exemplo, qual seu objetivo para aprender games com Python? Diversão?
Realmente se especializar e tentar fazer dele algo rentável e trabalhar
realmente neste ramo? Cada uma dessas áreas, jogos, web, destops e etc
requerem uma GRANDE quantidade de tempo, esforço e dedicação. Mas nada
lhe impede de estudá-las em simultâneo, porém, lhe dou a seguinte dica:
veja qual sua prioridade. Quer trabalhar e ganhar dinheiro com web? Pois
foque a maior parte do tempo em estudar isso, e uma pequena parcela do
tempo estudando jogos, para diversão. E assim vice-versa.&lt;/p&gt;
&lt;p&gt;Mas, levando em consideração o intuito de ser desenvolvedor web Python,
vamos falar agora sobre isso.&lt;/p&gt;
&lt;p&gt;Antes de tudo, tenha certeza de realmente conhecer Python, e não só
saber as coisas superficiais: "while, for, funções, objetos e etc". Mas
sim saber como cada uma dessas coisas funcionam. O que é uma função?
Como ela funciona? E objetos? O que acontece em um for? O que são
realmente classes? E metaclass?&lt;br /&gt;
Para isso, você pode contar com uma série de livros que podem lhe
ajudar. Entre eles tem o &lt;a href="http://www.diveintopython3.net/"&gt;Dive into Python
3&lt;/a&gt;, (disponíve online), onde você vai
aprender muita coisa bacana sobre Python. Conheço muitos bons devs
Python que começaram lendo esse livro. Temos também o &lt;a href="http://shop.oreilly.com/product/0636920027072.do"&gt;Python 3
Cookbook&lt;/a&gt; (compra
online), onde você vai poder aprofundar tudo que aprendeu no livro
anterior. Aqui no blog também temos materiais sobre Python, incluindo
uma série que estamos traduzindo que falam sobre o funcionamento de
algumas coisas da linguagem. &lt;a href="http://indacode.com/pythonista-intermediario/"&gt;Dá uma conferida lá
também&lt;/a&gt;. Além desses,
existem diversos outros livros e materiais que você pode usar, como o
curso &lt;a href="http://pycursos.com/python-para-zumbis/"&gt;Python para Zombies&lt;/a&gt;,
ministrado pelo professor Fernando Massanori (eu fiz esse curso, e achei
super bacana!). Existem ótimos blogs que contam com ótimos materiais,
como o &lt;a href="http://pythonclub.com.br/"&gt;Python Club&lt;/a&gt; e o &lt;a href="http://programeempython.blog.br/"&gt;Programe em
Python&lt;/a&gt;, dentre vários outros (sério,
são muitos).&lt;/p&gt;
&lt;p&gt;Claro que você não precisa ser um Guido Van Hossum, o modaFuckingFoda em
Python. Mas ter real conhecimento sobre a linguagem vai lhe ajudar
muito. Esse é o diferencial de um bom programador para um cara que só
programa. Beleza, mas para que vai servir isso?&lt;/p&gt;
&lt;p&gt;Mas sempre vem a(s) pergunta(s): Mas pra que estudar Python antes? Eu
não posso já começar a estudar o framework e aprender durante esse
estudo? Sim, pode. porém tendo esse conhecimento prévio da linguagem,
vai ficar muito mais fácil entender o funcionamento dos frameworks web.
Falo isso por experiência própria. Se parar pra pensar, os frameworks
com os quais você vai trabalhar são feitos em que linguagem? Python.
Então, como você vai poder usar todo o potencial do framework se não
souber bem a linguagem em que ele foi feita? É como querer construir um
carro sem conhecer as ferramentas necessárias para tal. Pode até
funcionar, mas o nível de código macarrônico/gambiarra pode ser muito
grande.&lt;/p&gt;
&lt;p&gt;Finalizando essa parte do Python, eu aconselho que você estude também
sobre conceitos web. O que é HTTP? E HTTPS? o que é uma request? E
response? O que é um server e client? Como eles interagem? Saber dessas
coisas é mais do que essencial, porque afinal você vai estar lidando com
web, né?&lt;/p&gt;
&lt;p&gt;&lt;img alt="Créditos da imagem" src="{filename}/images/dev_way3.jpg" /&gt;
Créditos da imagem: http://pt.slideshare.net/ricobl/python-e-django-na-globocom&lt;/p&gt;
&lt;p&gt;Bom, agora chega a hora de escolher qual framework. E essa é a parte
complicada da história, causa de infinitas flamewars na comunidade.
Existem diversos frameworks web Python, mas alguns acabam se destacando
entre os outros. Entre eles podemos citar: Django, Web2Py, Flask e
Bottle. Cada um tendo suas particularidades, prós e contras. Vamos falar
um pouco sobre alguns.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://flask.pocoo.org/docs/0.10/"&gt;Flask&lt;/a&gt;: é um leve framework web
    criado pelo austríaco &lt;a href="https://github.com/mitsuhiko" title="Perfil GitHub"&gt;Armin
    Ronacher&lt;/a&gt;, baseado no
    kit WSGI e Jinja2 na engine de templates. Flask é bem simples de
    iniciar, uma vez que em um único arquivo você pode criar um "Hello
    World" (que em outros frameworks poderiam levar mais código). Não
    mostrarei exemplos de código aqui, mas você pode ver estes 2
    tutoriais que mostram exemplos práticos de criação de webapps com
    Flask
    (&lt;a href="https://stormpath.com/blog/build-a-flask-app-in-30-minutes/"&gt;aqui&lt;/a&gt;
    e
    &lt;a href="https://realpython.com/blog/python/python-web-applications-with-flask-part-i/"&gt;aqui&lt;/a&gt;,
    e neste &lt;a href="http://mitsuhiko.pocoo.org/flask-pycon-2011.pdf"&gt;link&lt;/a&gt; você
    pode ler um slide do criador sobre o porque de ter criado Flask).&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com"&gt;Django&lt;/a&gt;: nasceu no outono de 2003,
    quando 2 programadores (Adrian Holovaty e Simon Willison) web do
    jornal Lawrence Journal-World começaram a usar Python para construir
    aplicações web. Ele foi lançado publicamente em 2005. Em junho de
    2008 foi formada a DSF (Django Software Foundation), que seria
    responsável por manter o Django dali em diante. Ele é amplamente
    usado no desenvolvimento web, e muito conhecido por suas "baterias
    inclusas", que são funcionalidades comuns no desenvolvimento web (
    authentication, URL routing, a sistema de template, um ORM e etc).
    Possui uma ótima documentação e comunidade, tanto quanto materiais
    de aprendizado. Dentre eles destaco o curso do Allisson de Azevedo,
    &lt;a href="https://www.youtube.com/playlist?list=PLfkVgm8720kzm6fmTekjtKyFcppyD4Ubd"&gt;Django para iniciantes&lt;/a&gt;,
    e o livro online &lt;a href="www.tangowithdjango.com/book17/"&gt;Tango with Django&lt;/a&gt;, bem como a própria
    documentação do framework.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.web2py.com/init/default/documentation"&gt;Web2Py&lt;/a&gt;: criado
    por uma comunidade de profissionais e professores do curso de
    Ciência da Computação na DePaul University, em Chicago, tendo como
    desenvolvedor lider Massimo DiPierro. Web2py foi originalmente
    projetado como uma ferramenta de ensino, com ênfase no fácil uso
    e desenvolvimento. Seu design foi inspirado no Ruby on Rails (e no
    Django), que é focado no rápido desenvolvimento e permite o design
    MVC (model-view-controller). Ele é menos verboso e sua sintaxe muito
    clara, o que torna a construção de webapps muito fácil; e também vem
    com algumas baterias inclusas, para algumas funcionalidades.
    &lt;a href="https://www.youtube.com/watch?v=6h73Tkco4pY"&gt;Aqui&lt;/a&gt; você vai
    encontrar um vídeo do Bruno Rocha falando sobre o desenvolvimento
    com web2py. E
    &lt;a href="http://pycursos.com/desenvolvimento-agil-para-web-com-web2py/"&gt;aqui&lt;/a&gt;
    você vai encontrar um curso (pago) pela PyCursos, da incrível
    Júlia Rizza. Super recomendo!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Agora eu irei focar em um deles, que no caso será o que eu estou
atualmente estudando.&lt;/p&gt;
&lt;p&gt;O 1ª framework que usei e tive contato foi o Django. Para aprender
Django, como falei antes e mostrei 1/3 da ponta do iceberg nos links,
nós temos &lt;strong&gt;MUITOS&lt;/strong&gt; materiais sobre Django. Diversos livros e vídeo
aulas podem ser encontrados. No youtube você vai encontrar MUITAS aulas
sobre Django. Em pt-br tem alguns hangouts dos episódios do Mutirão
Python que falam sobre desenvolvimento web com Django; e você encontrará
muitos bons cursos em inglês (como
&lt;a href="https://www.youtube.com/playlist?list=PLEsfXFp6DpzT5veidCTZ1mQriBX0Mu2LF"&gt;este&lt;/a&gt; e
&lt;a href="https://www.youtube.com/playlist?list=PLEsfXFp6DpzRgedo9IzmcpXYoSeDg29Tx"&gt;este&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Sobre livros eu recomendo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pro Django (inglês). Estou lendo ele atualmente, e é realmente muito
    bom! Ele inicia explicando conceitos do funcionamento da
    linguagem Python. Conceitos esses que são usados dentro
    do framework. Após assistir as aulas do Allisson, você poderia
    partir para esse livro aqui. E ao finalizar este, poderia passar
    para este outro chamado;&lt;/li&gt;
&lt;li&gt;Lightweight Django (inglês), que cobre a versão mais nova, 1.7.
    Porém esse é um pouco mais avançado.&lt;/li&gt;
&lt;li&gt;&lt;a href="www.tangowithdjango.com/book17/"&gt;Tango with Django&lt;/a&gt; (inglês bem
    simples): um livro online onde você estuda Django construindo
    uma aplicação.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Em acompanhamento aos estudos, crie um projeto e vá implementando de
acordo com o conhecimento que vai adquirindo. Pode ser qualquer coisa,
um sistema de cadastro de usuários, agenda de contatos, QUALQUER coisa.
Mas o importante é praticar todo santo dia. Ao finalizar essa timeline,
creio que você já estará em ótimas condições de conhecimento sobre web.
E a partir daí, já vai saber lidar com futuros desafios que encontrar
pela frente.&lt;/p&gt;
&lt;p&gt;Bom, após tudo isso cabe a você agora testar cada dica e ver com qual
framework você se identificou mais. Lembre-se que esse caminho não é
curto, na verdade podemos dizer que ele nunca acaba, porque você sempre
vai estar estudando sobre alguma coisa relacionada a web. Então dê-se o
tempo necessário até que você pegue no gancho, e comece e realmente
sentir as coisas fluindo. Pode ser bem complicado no começo, mas posso
lhe dizer que com o tempo só tende a melhorar :) Bons estudos!&lt;/p&gt;</summary><category term="python"></category><category term="web development"></category><category term="tips"></category><category term="web frameworks"></category></entry><entry><title>Classes e Objetos I</title><link href="https://dunderlabs.github.io/classes-e-objetos-i.html" rel="alternate"></link><updated>2015-03-16T11:58:00-03:00</updated><author><name>Patrick Mazulo</name></author><id>tag:dunderlabs.github.io,2015-03-16:classes-e-objetos-i.html</id><summary type="html">&lt;p&gt;&lt;img alt="Créditos para a imagem" src="https://dunderlabs.github.io/images/posts/python-model.png" /&gt;
Créditos para a imagem: &lt;a href="http://blog.invisivel.net/2012/04/10/pythons-object-model-explained/"&gt;http://blog.invisivel.net/2012/04/10/pythons-object-model-explained/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Em Python, tudo é um objeto. Classes fornecem o mecanismo para criar novos tipos de objetos. Neste tutorial, nós vamos deixar um pouco de lado o básico de classes e programação orientada a objetos e focaremos em tópicos que proveem um melhor entendimento deste paradigma de programação em Python. É assumido que nós estamos lidando com um novo estilo de classes. Existem classes Python que herdam da super classe &lt;em&gt;object&lt;/em&gt;.
Definindo Classes&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;A declaração &lt;span style="color: #000088;"&gt;class&lt;/span&gt; é usada para definir novas classes. Esta declaração define um conjunto de atributos, variáveis e métodos, que estão associados e compartilhados por uma coleção de instâncias de tal classe. Uma simples definição de classe é dada abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; 
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt; 
        &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;del_account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deposit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt; 

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;withdraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt; 

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inquiry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Definições de classe introduzem os seguintes novos objetos:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Objeto de classe&lt;/li&gt;
&lt;li&gt;Objeto de Instância&lt;/li&gt;
&lt;li&gt;Objeto de método&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Objetos de Classe&lt;/h2&gt;
&lt;p&gt;Quando uma definição de classe é encontrada durante a execução de um programa, um novo namespace é criado, e este serve como o namespace em que todas as variáveis de classe e definições de métodos se ligam. Note que este namespace não cria um novo escopo local que pode ser usado por métodos de classe, daí a necessidade por nomes completos ao acessar variáveis em métodos. A classe &lt;span style="color: #660066;"&gt;Account&lt;/span&gt; da seção anterior ilustra isto; métodos que tentam acessar a variável &lt;span style="color: #000000;"&gt;num_of_accounts&lt;/span&gt; devem usar o nome completo, &lt;span style="color: #660066;"&gt;Account&lt;/span&gt;.&lt;span style="color: #000000;"&gt;num_of_accounts&lt;/span&gt;, senão resulta em um erro como mostrado abaixo, quando o nome completo não é usado no método __init__:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; 
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt; 
        &lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;del_account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deposit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt; 

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;withdraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt; 

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inquiry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;acct&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Account&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;obi&amp;#39;&lt;/span&gt;, 10&lt;span class="o"&gt;)&lt;/span&gt;
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;&amp;quot;python&amp;quot;&lt;/span&gt;, line 1, in &amp;lt;module&amp;gt;
  File &lt;span class="s2"&gt;&amp;quot;python&amp;quot;&lt;/span&gt;, line 9, in __init__
UnboundLocalError: &lt;span class="nb"&gt;local &lt;/span&gt;variable &lt;span class="s1"&gt;&amp;#39;num_of_accounts&amp;#39;&lt;/span&gt; referenced before assignment
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No fim da execução de uma definição de classe, um objeto de classe é criado. O escopo que estava em vigor imediatamente antes que a definição de classe fosse criada é reintegrada, e o objeto classe é ligado aqui ao nome de classe dado no cabeçalho da definição de classe.&lt;/p&gt;
&lt;p&gt;Agora vejamos uma curiosidade aqui. Alguém pode perguntar: &lt;strong&gt;&lt;em&gt;se a classe criada é um objeto, então qual é a classe da classe objeto?&lt;/em&gt;&lt;/strong&gt;. De acordo com a filosofia de Python em que &lt;em&gt;tudo é um objeto&lt;/em&gt;, o objeto de classe, de fato, tem uma classe da qual é criada, e no novo tipo de classes de Python, esta é a classe &lt;span style="color: #000000;"&gt;type&lt;/span&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;Account&lt;span class="o"&gt;)&lt;/span&gt;
&amp;lt;class &lt;span class="s1"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Então, só pra confundir você um pouco mais, o tipo de um type (o tipo de Account), é type. A classe type é uma &lt;strong&gt;&lt;em&gt;metaclass&lt;/em&gt;&lt;/strong&gt;, uma classe criada para criar outras classes. Discutiremos sobre elas em um próximo tutorial.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Créditos para a imagem" src="{filename}/images/types_map.png" /&gt;
Créditos para a imagem: http://blog.invisivel.net/2012/04/10/pythons-object-model-explained/&lt;/p&gt;
&lt;p&gt;Objetos de classe suportam referência de atributo e instanciação.
Atributos são referenciados usando a sintaxe padrão de objetos, um ponto
seguido pelo nome do atributo: obj.name. Nomes de atributos válidos são
todos os nomes de variáveis e métodos presentes no namespace da classe,
quando o objeto de classe foi criado. Por exemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; Account.num_of_accounts
&amp;gt;&amp;gt;&amp;gt; 0
&amp;gt;&amp;gt;&amp;gt; Account.deposit
&amp;gt;&amp;gt;&amp;gt; &amp;lt;unbound method Account.deposit&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Instanciação de classe usa notação de função. Instanciação envolve
chamar o objeto de classe como uma função normal, sem parâmetros, como
mostrado abaixo para a classe Account:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; Account&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Depois da instanciação de um objeto de classe, um objeto de instância é
retornado, e o &lt;span style="color: #000000;"&gt;__init__&lt;/span&gt; que foi
definido na classe, é chamado com a instância como o primeiro argumento.
Isto executa qualquer inicialização definida pelo programador, como
inicializar os valores das variáveis de instância. No caso da classe
Account, o nome da conta e o balanço são setados, e o número de objetos
de instâncias é incrementado por mais 1.&lt;/p&gt;
&lt;h2&gt;Objetos de Instância&lt;/h2&gt;
&lt;p&gt;Se imaginarmos os objetos de classe como cortadores de biscoitos, então
os objetos de instância são os biscoitos que são os resultados de
instanciar objetos de classe. Atributos, dados e métodos: referência são
as únicas operações que são válidas em objetos de instância.&lt;/p&gt;
&lt;h2&gt;Método de objetos&lt;/h2&gt;
&lt;p&gt;Métodos de objeto são similares a objetos de função. Se &lt;span
style="color: #000000;"&gt;x&lt;/span&gt; é uma instância da classe &lt;span
style="color: #660066;"&gt;Account&lt;/span&gt;, &lt;span
style="color: #000000;"&gt;x.deposit&lt;/span&gt; é um exemplo de um método de
objeto. Métodos têm um argumento extra incluído em sua definição, o
argumento &lt;span style="color: #000088;"&gt;self&lt;/span&gt;. Este argumento
&lt;span style="color: #000088;"&gt;self&lt;/span&gt; se refere a uma instância da
classe. &lt;em&gt;Porque nós temos que passar uma instância como argumento para
um método?&lt;/em&gt; Isso é melhor ilustrado por uma chamada de método:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Account&lt;span class="o"&gt;()&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; x.inquiry&lt;span class="o"&gt;()&lt;/span&gt;
10
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O que exatamente acontece quando um método de instância é chamado? Você
pode ter notado que x.inquiry() acima é chamado sem um argumento, embora
a definição do método &lt;span style="color: #000000;"&gt;inquiry()&lt;/span&gt;
requeira o argumento &lt;span style="color: #000088;"&gt;self&lt;/span&gt;. O que
aconteceu com este argumento?&lt;/p&gt;
&lt;p&gt;O que tornam os métodos tão especiais é que o objeto no qual um método
está sendo chamado é passado como primeiro argumento da função. Em nosso
exemplo, a chamada para &lt;span style="color: #000000;"&gt;x.inquiry()&lt;/span&gt;
é exatamente equivalente a &lt;span
style="color: #660066;"&gt;Account&lt;/span&gt;.&lt;span
style="color: #000000;"&gt;f(x)&lt;/span&gt;. Geralmente, chamar um método com
uma lista de &lt;em&gt;n&lt;/em&gt; argumentos é equivalente a chamar a função
correspondente com uma lista de argumentos que é criada ao inserir o
objeto do método antes do primeiro argumento.&lt;/p&gt;
&lt;p&gt;O tutorial do Python diz:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Quando um atributo de instância é referenciado de que não é um
atributo de dados, sua classe é pesquisada. Se o nome indica um
atributo de classe válido que seja um objeto de função, um método de
objeto é criado ao embalar (ponteiros) o objeto de instância e o
objeto de função, ficando juntos em um objeto abstrato: este é o
método de objeto. Quando o método de objeto é chamado com uma lista de
argumentos, uma nova lista de argumento é construída a partir do
objeto de instância e da list de argumentos, e o objeto de função é
chamado com esta nova lista de argumentos.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;O acima citado se aplica para todos os método de objetos de instância,
incluindo o método &lt;span style="color: #000000;"&gt;__init__&lt;/span&gt;. O
argumento self não é, na verdade, uma palavra chave, e qualquer nome de
argumento pode ser usado como demonstrado na definição abaixo para a
classe Account:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; 
        &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt; 
        &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;del_account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deposit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt; 

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;withdraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt; 

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inquiry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; Account.num_of_accounts
&amp;gt;&amp;gt;&amp;gt; 0
&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Account&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;obi&amp;#39;&lt;/span&gt;, 0&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; x.deposit&lt;span class="o"&gt;(&lt;/span&gt;10&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; Account.inquiry&lt;span class="o"&gt;(&lt;/span&gt;x&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; 10
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Métodos de classe e estáticos&lt;/h2&gt;
&lt;p&gt;Todos os métodos definidos em uma classe por padrão operam em
instancias. No entanto, podemos definir métodos de classe ou estáticos
ao decorar tais métodos com os decoradores correspondentes &lt;span
style="color: #006666;"&gt;@staticmethods&lt;/span&gt; ou &lt;span
style="color: #006666;"&gt;@classmethods&lt;/span&gt;.&lt;/p&gt;
&lt;h3&gt;Métodos Estáticos&lt;/h3&gt;
&lt;p&gt;Métodos estáticos são métodos funções normais que existem no namespace
de uma classe. Referenciar um método estático de uma classe mostra que
em vez de um método type não ligado, uma &lt;em&gt;função&lt;/em&gt; type é retornada como
mostrado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; 
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt; 
        &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;del_account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deposit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt; 

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;withdraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt; 

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inquiry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Name={}, balance={}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;type&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Current Account&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; Account.deposit
&amp;lt;unbound method Account.deposit&amp;gt;
&amp;gt;&amp;gt;&amp;gt; Account.type
&amp;lt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nb"&gt;type &lt;/span&gt;at 0x106893668&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para definir um método estático, o decorador &lt;span
style="color: #006666;"&gt;@staticmethod&lt;/span&gt; é usado, e tal método não
requer o argumento &lt;span style="color: #000088;"&gt;self&lt;/span&gt;. Métodos
estáticos fornecem um mecanismo para melhor organização, como o código
relacionado a uma classe são colocados nessa classe e podem ser
sobrescritos em uma sub-classe como necessário.&lt;/p&gt;
&lt;h3&gt;Métodos de classe&lt;/h3&gt;
&lt;p&gt;Métodos de classe, como o nome implica, operam nas classes em si em vez
de instâncias. Métodos de classe são criados usando o decorador &lt;span
style="color: #006666;"&gt;@classmethod&lt;/span&gt; com a classe passada como o
primeiro argumento para o método em vez da instância.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; 
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt; 
        &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;del_account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deposit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt; 

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;withdraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt; 

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inquiry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Name={}, balance={}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt; 
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;from_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params_json&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params_json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;balance&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;type&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Current Account&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Um exemplo motivador do uso de métodos de classe é como uma &lt;em&gt;fábrica&lt;/em&gt;
para criação de objeto. Imagine que dados para a classe &lt;span
style="color: #660066;"&gt;Account&lt;/span&gt; venham em diferentes formatos,
tais como tuplas, JSON, strings e etc. Nós não podemos definir múltiplos
métodos &lt;span style="color: #000000;"&gt;__init__&lt;/span&gt;, sendo que uma
classe Python pode ter apenas um método &lt;span
style="color: #000000;"&gt;__init__&lt;/span&gt;, desse modo métodos de
classe vêm a calhar nessas situações. Na classe &lt;span
style="color: #660066;"&gt;Account&lt;/span&gt; definida acima no exemplo, nós
queremos inicializar uma conta a partir de um objeto JSON, então nós
definimos um método de classe, &lt;span
style="color: #000000;"&gt;from_json&lt;/span&gt; que recebe um objeto JSON e
manipula a extração de parâmetros e criação do objeto Account usando os
parâmetros extraídos. Um outro exemplo de um método de classe em ação é
o &lt;span style="color: #000000;"&gt;dict.fromkeys&lt;/span&gt;, método que é usado
para criar objetos dict de uma sequência de chaves e valores fornecidas.&lt;/p&gt;
&lt;h4&gt;Métodos especiais Python&lt;/h4&gt;
&lt;p&gt;Algumas vezes podemos querer customizar classes que definimos. Isto pode
ser alterar a maneira que objetos de classe são criados e inicializados,
ou fornecer comportamento polimórfico para certas operações.
Comportamento polimórfico habilita as classes que criamos a definir sua
própria implementação para certas operações Python, tais como a operação
+. Python fornece métodos &lt;em&gt;especiais&lt;/em&gt; que habilitam isso. Esses métodos
estão normalmente na forma &lt;span
style="color: #000000;"&gt;__*__&lt;/span&gt; onde &lt;span
style="color: #000000;"&gt;*&lt;/span&gt; se refere ao nome do método. Exemplo
de tais métodos são &lt;span style="color: #000000;"&gt;__init__&lt;/span&gt; e
&lt;span style="color: #000000;"&gt;__new__&lt;/span&gt; para customizar criação
e inicialização de objeto, &lt;span
style="color: #000000;"&gt;__getitem__&lt;/span&gt;, &lt;span
style="color: #000000;"&gt;__get__&lt;/span&gt;, &lt;span
style="color: #000000;"&gt;__add__&lt;/span&gt; e &lt;span
style="color: #000000;"&gt;__sub__&lt;/span&gt; para emular tipos padrões do
Python, &lt;span style="color: #000000;"&gt;__getattribute__&lt;/span&gt;, &lt;span
style="color: #000000;"&gt;__getattr__&lt;/span&gt; e etc. para customizar
acesso de atributos. Esses são apenas alguns dos métodos especiais.
Discutiremos alguns métodos especiais abaixo para prover um
entendimento, mas a &lt;a href="https://docs.python.org/3/reference/datamodel.html#special-method-names"&gt;documentação
Python&lt;/a&gt;
fornece uma lista compreensiva desses métodos.&lt;/p&gt;
&lt;h3&gt;Métodos Especiais para Criação de Objetos&lt;/h3&gt;
&lt;p&gt;Novas instâncias de classes são criadas em um processo de 2 passos:
usando o método &lt;span style="color: #000000;"&gt;__new__&lt;/span&gt; para
criar uma nova instância e o método &lt;span
style="color: #000000;"&gt;__init__&lt;/span&gt; para inicializar o novo
objeto criado. Programadores já estão familiarizados com a definição do
método &lt;span style="color: #000000;"&gt;__init__&lt;/span&gt;; o método &lt;span
style="color: #000000;"&gt;__new__&lt;/span&gt; é raramente definido pelo
programador pra cada classe, mas é possível que algum queira customizar
a criação de instâncias de classe.&lt;/p&gt;
&lt;h3&gt;Métodos Especiais para Acesso de Atributos&lt;/h3&gt;
&lt;p&gt;Nós podemos customizar o acesso de atributos para instâncias de classe
ao implementar os seguintes métodos listados:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; 
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt; 
        &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;del_account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__getattr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hey I dont see any attribute called {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deposit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt; 

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;withdraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt; 

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inquiry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Name={}, balance={}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt; 
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;from_dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;params_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;params_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;balance&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;type&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Current Account&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;obi&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;span style="color: #000000;"&gt;__getattr__&lt;/span&gt;(&lt;span
    style="color: #000088;"&gt;self&lt;/span&gt;, &lt;span
    style="color: #000000;"&gt;name&lt;/span&gt;): Este método é apenas chamado
    quando um atributo, &lt;em&gt;name&lt;/em&gt;, que está referenciado não é nem um
    atributo de instância ou nem é encontrado na árvore da classe para
    o objeto. Este método deve retornar algum valor para o atributo, ou
    lança uma exceção &lt;span
    style="color: #660066;"&gt;AttributeError&lt;/span&gt;. Por exemplo, se &lt;em&gt;x&lt;/em&gt; é
    uma instância da classe &lt;em&gt;Account&lt;/em&gt; definida acima, tentar acessar um
    atributo que não existe resultará em uma chamada para este método.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; acct = Account(&amp;quot;obi&amp;quot;, 10)
&amp;gt;&amp;gt;&amp;gt; acct.number
Hey I dont see any attribute called number
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;p&gt;
Note que se o código &lt;span
style="color: #000000;"&gt;__getattr__&lt;/span&gt; referencia atributos
de instância, e esses atributos não existem, um loop infinito pode
ocorrer porque o método &lt;span
style="color: #000000;"&gt;__getattr__&lt;/span&gt; é chamado
sucessivamente sem um fim&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span style="color: #000000;"&gt;__setattr__&lt;/span&gt;(&lt;span
    style="color: #000088;"&gt;self&lt;/span&gt;, &lt;span
    style="color: #000000;"&gt;name&lt;/span&gt;, &lt;span
    style="color: #000000;"&gt;value&lt;/span&gt;): Este método é chamado sempre
    que uma atribuição de atributos é tentada. &lt;span
    style="color: #000000;"&gt;__setattr__&lt;/span&gt; deve inserir o valor
    sendo atribuído no dicionário do atributo de instância em vez de
    usar self.name=value, que resulta em uma chamada recursiva e,
    consequentemente, para um loop infinito.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style="color: #000000;"&gt;__delattr__&lt;/span&gt;(&lt;span
    style="color: #000088;"&gt;self&lt;/span&gt;, &lt;span
    style="color: #000000;"&gt;name&lt;/span&gt;): Este é chamado sempre que del
    obj é chamado.&lt;/li&gt;
&lt;li&gt;&lt;span style="color: #000000;"&gt;__getattribute__&lt;/span&gt;(&lt;span
    style="color: #000088;"&gt;self&lt;/span&gt;, &lt;span
    style="color: #000000;"&gt;name&lt;/span&gt;): Este método é sempre chamado
    para implementar acessos de atributos para instâncias de classe.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Métodos Especiais para Emulação de Tipos&lt;/h2&gt;
&lt;p&gt;Python define certa sintaxe especial para usar com certos tipos; por
exemplo, os elementos em listas e tuplas podem ser acessados usando a
notação de índice &lt;span style="color: #000000;"&gt;[]&lt;/span&gt;, valores
numéricos podem ser somados com o operador &lt;span
style="color: #000000;"&gt;+&lt;/span&gt;, e assim por diante. Podemos criar
nossas próprias classes que fazem uso desta sintaxe especial ao
implementar certos métodos especiais que o interpretador Python chama
sempre que ele encontra tais sintaxes. Ilustramos isso com um exemplo
muito simples abaixo, que emula o básico de uma lista Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# the class is just a wrapper around another list to &lt;/span&gt;
        &lt;span class="c"&gt;# illustrate special methods&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__len__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# called when a user calls len(CustomList instance)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__getitem__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# called when a user uses square brackets for indexing &lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__setitem__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# called when a user performs an index assignment&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;IndexError&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__contains__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# called when the user uses the &amp;#39;in&amp;#39; keyword&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__add__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;otherList&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# provides support for the use of the + operator &lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;CustomList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;otherList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No exemplo acima, o CustomList é um wrapper fino em torno de uma lista
real. Nós implementamos alguns métodos customizados para fins de
ilustração:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;span style="color: #000000;"&gt;__len__&lt;/span&gt;(&lt;span
    style="color: #000088;"&gt;self&lt;/span&gt;): Este é chamado quando a
    função len() é chamada em uma instância de CustomList, como mostrado
    abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; myList = CustomList() 
&amp;gt;&amp;gt;&amp;gt; myList.append(1)    
&amp;gt;&amp;gt;&amp;gt; myList.append(2)
&amp;gt;&amp;gt;&amp;gt; myList.append(3)
&amp;gt;&amp;gt;&amp;gt; myList.append(4)
&amp;gt;&amp;gt;&amp;gt; len(myList)
4
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span style="color: #000000;"&gt;__getitem__&lt;/span&gt;(&lt;span
    style="color: #000088;"&gt;self&lt;/span&gt;, &lt;span
    style="color: #000000;"&gt;value&lt;/span&gt;): fornece suporte para o uso de
    colchetes para indexação em uma instância da classe CustomList:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; myList = CustomList()
&amp;gt;&amp;gt;&amp;gt; myList.append(1)    
&amp;gt;&amp;gt;&amp;gt; myList.append(2)
&amp;gt;&amp;gt;&amp;gt; myList.append(3)
&amp;gt;&amp;gt;&amp;gt; myList.append(4)
&amp;gt;&amp;gt;&amp;gt; myList[3]
4
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span style="color: #000000;"&gt;__setitem__&lt;/span&gt;(&lt;span
    style="color: #000088;"&gt;self&lt;/span&gt;, &lt;span
    style="color: #000000;"&gt;key&lt;/span&gt;, &lt;span
    style="color: #000000;"&gt;value&lt;/span&gt;): Chamado para implementar a
    atribuição de valor para self[key] em uma instância da classe
    CustomList:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; myList = CustomList()
&amp;gt;&amp;gt;&amp;gt; myList.append(1)    
&amp;gt;&amp;gt;&amp;gt; myList.append(2)
&amp;gt;&amp;gt;&amp;gt; myList.append(3)
&amp;gt;&amp;gt;&amp;gt; myList.append(4)
&amp;gt;&amp;gt;&amp;gt; myList[3] = 100
4
&amp;gt;&amp;gt;&amp;gt; myList[3]
100
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span style="color: #000000;"&gt;__contains__&lt;/span&gt;(&lt;span
    style="color: #000088;"&gt;self&lt;/span&gt;, &lt;span
    style="color: #000000;"&gt;key&lt;/span&gt;): Chamado para implementar
    operadores de teste de membros. Deve retornar &lt;em&gt;true&lt;/em&gt; se item está em
    self, e &lt;em&gt;false&lt;/em&gt; se não estiver:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; myList = CustomList()
&amp;gt;&amp;gt;&amp;gt; myList.append(1)    
&amp;gt;&amp;gt;&amp;gt; myList.append(2)
&amp;gt;&amp;gt;&amp;gt; myList.append(3)
&amp;gt;&amp;gt;&amp;gt; myList.append(4)
&amp;gt;&amp;gt;&amp;gt; 4 in myList
True
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span style="color: #000000;"&gt;__repr__&lt;/span&gt;(&lt;span
    style="color: #000088;"&gt;self&lt;/span&gt;): Chamado para computar a
    representação do objeto para &lt;em&gt;self&lt;/em&gt; quando print é chamado com o
    objeto como argumento:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; myList = CustomList()
&amp;gt;&amp;gt;&amp;gt; myList.append(1)    
&amp;gt;&amp;gt;&amp;gt; myList.append(2)
&amp;gt;&amp;gt;&amp;gt; myList.append(3)
&amp;gt;&amp;gt;&amp;gt; myList.append(4)
&amp;gt;&amp;gt;&amp;gt; print(myList)
[1, 2, 3, 4]
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span style="color: #000000;"&gt;__add__&lt;/span&gt;(&lt;span
    style="color: #000088;"&gt;self&lt;/span&gt;, &lt;span
    style="color: #000000;"&gt;otherList&lt;/span&gt;): Chamado para computar a
    adição de duas instâncias de CustomList quando o operador + é usado
    para somar duas instâncias juntas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; myList = CustomList()
&amp;gt;&amp;gt;&amp;gt; otherList = CustomList()
&amp;gt;&amp;gt;&amp;gt; otherList.append(100)
&amp;gt;&amp;gt;&amp;gt; myList.append(1)    
&amp;gt;&amp;gt;&amp;gt; myList.append(2)
&amp;gt;&amp;gt;&amp;gt; myList.append(3)
&amp;gt;&amp;gt;&amp;gt; myList.append(4)
&amp;gt;&amp;gt;&amp;gt; myList + otherList + otherList
[1, 2, 3, 4, 100, 100]
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Acima temos um exemplo de como podemos customizar comportamento de
classe ao definir certos métodos especiais de classe. Para uma listagem
de todos os métodos, veja a &lt;a href="https://docs.python.org/3/reference/datamodel.html#basic-customization"&gt;documentação
Python&lt;/a&gt;.
No tutorial seguinte, nós colocaremos em prática o que discutimos aqui
sobre métodos especiais e explicaremos &lt;strong&gt;descriptors&lt;/strong&gt;, uma
funcionalidade muito importante, que tem uso generalizado em programação
orientada a objetos em Python.&lt;/p&gt;
&lt;p&gt;NT.: Pessoal, tive uma certa dificuldade ao traduzir este artigo, pela
forma meio complicada que o autor o escreveu. Então desde já me desculpo
se alguma parte ficou meio -no sense-, e peço que coloquem nos
comentários qualquer possível melhoria que eu editarei o post :)&lt;/p&gt;
&lt;h2&gt;Leitura Complementar&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/reference/datamodel.html#"&gt;Python Data Model&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://dunderlabs.github.io/pages/pythonista-intermediario.html"&gt;Clique aqui para voltar para a tabela de conteúdo.&lt;/a&gt;&lt;/p&gt;</summary><category term="python"></category><category term="python class"></category><category term="python data model"></category><category term="translations"></category></entry><entry><title>Funções Python II: decorators</title><link href="https://dunderlabs.github.io/funcoes-python-ii-decorators.html" rel="alternate"></link><updated>2015-02-18T12:38:00-03:00</updated><author><name>Patrick Mazulo</name></author><id>tag:dunderlabs.github.io,2015-02-18:funcoes-python-ii-decorators.html</id><summary type="html">&lt;p&gt;&lt;img alt="Créditos da imagem" src="https://dunderlabs.github.io/images/posts/DecoratorsVisuallyExplained.png" /&gt;&lt;/p&gt;
&lt;p&gt;Créditos da imagem: &lt;a href="https://www.freshbooks.com/developers/blog/logging-actions-with-python-decorators-part-i-decorating-logged-functions"&gt;https://www.freshbooks.com/developers/blog/logging-actions-with-python-decorators-part-i-decorating-logged-functions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Decoradores de função (&lt;em&gt;Function Decorators&lt;/em&gt;) habilitam a adição de nova
funcionalidade para a função sem alterar a funcionalidade original dela.
Antes de ler esse post, é importante que você tenha lido e entendido o a
&lt;a href="http://indacode.com/funcoes-python/" title="Funções Python"&gt;primeira parte&lt;/a&gt;
sobre funções python. O pensamento principal que devemos tirar a partir
desse tutorial, é que funções Python são objetos de primeira classe; um
resultado disso é que:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Funções Python podem ser passadas como argumentos para outras
    funções&lt;/li&gt;
&lt;li&gt;Funções Python podem ser retornadas de outras chamadas de funções.&lt;/li&gt;
&lt;li&gt;Funções Python podem ser definidas dentro de outras funções
    resultando em closures.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As propriedades de funções Python listadas acima fornecem a função
necessária para explicar decoradores de função (que a partir daqui,
passaremos a nos referir no original, &lt;em&gt;function decorators&lt;/em&gt;).
Simplificando, &lt;em&gt;function decorators&lt;/em&gt; são &lt;strong&gt;containers (&lt;em&gt;wrappers&lt;/em&gt;) que
deixam você executar código antes&lt;/strong&gt; &lt;strong&gt;das funções que elas decoraram sem
modificar a função em si&lt;/strong&gt;. A estrutura desse tutorial segue uma
excelente resposta encontrada no &lt;a href="http://stackoverflow.com/questions/739654/how-can-i-make-a-chain-of-function-decorators-in-python/1594484#1594484"&gt;stack
overflow&lt;/a&gt; explicando
sobre &lt;em&gt;python decorators&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Function Decorators&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Function decorators&lt;/em&gt; não são exclusivos ao Python, então para
explica-los, ignoremos a sintaxe de &lt;em&gt;function decorator &lt;/em&gt;em Python por
enquanto, e ao invés disso vamos focar na essência de &lt;em&gt;function
decorators&lt;/em&gt;. Para entender o que decorators fazem, nós implementamos uma
função bem simples que é decorada (&lt;em&gt;decorated&lt;/em&gt;, termo em inglês) com uma
outra função simples que registra as chamadas para as funções decoradas.
A &lt;em&gt;decoração da função&lt;/em&gt; é conseguida através da composição de funções,
como mostrado abaixo (seguem as explicações nos comentários):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;

&lt;span class="c"&gt;# o decorator esperar uma outra função como argumento&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="c"&gt;# um container (wrapper) é definido na hora&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func_wrapper&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

        &lt;span class="c"&gt;# adicione qualquer funcionalidade de execução na função original&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Calling function: {} at {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;

        &lt;span class="c"&gt;# execute a função original&lt;/span&gt;
        &lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c"&gt;# adicione qualquer funcionalidade de execução na função original&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Finished calling : {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="c"&gt;# retorne a função wrapper definida no momento. O corpo da&lt;/span&gt;
    &lt;span class="c"&gt;# função wrapper não foi executado ainda, mas um closure&lt;/span&gt;
    &lt;span class="c"&gt;# na função func_to_decorate foi criado    &lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func_wrapper&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_full_name&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;My name is John Doe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt;decorated_func &lt;span class="o"&gt;=&lt;/span&gt; logger&lt;span class="o"&gt;(&lt;/span&gt;print_full_name&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt;decorated_func
&lt;span class="c"&gt;# o valor retornado, decorated_func, é uma referência para a func_wrapper&lt;/span&gt;
&amp;lt;&lt;span class="k"&gt;function&lt;/span&gt; func_wrapper at 0x101ed2578&amp;gt;
&amp;gt;&amp;gt;&amp;gt;decorated_func&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="c"&gt;# decorated_func chamada&lt;/span&gt;
Calling &lt;span class="k"&gt;function&lt;/span&gt;: print_full_name at 2015-01-24 13:48:05.261413
&lt;span class="c"&gt;# a funcionalidade original é preservada&lt;/span&gt;
My name is John Doe
Finished calling : print_full_name
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No simples exemplo definido acima, o decorator adiciona uma nova
funcionalidade, mostrando alguma informação antes e depois da chamada
original da função, para a função original sem altera-la. O decorator
&lt;span style="color: #000000;"&gt;logger&lt;/span&gt; recebe uma função para ser
decorada, &lt;span style="color: #000000;"&gt;print_full_name&lt;/span&gt; e
retorna uma função, &lt;span style="color: #000000;"&gt;func_wrapper&lt;/span&gt;
que chama a função decorada, &lt;span
style="color: #000000;"&gt;print_full_name&lt;/span&gt;, quando é executada. A
função retornada, &lt;span style="color: #000000;"&gt;func_wrapper&lt;/span&gt;
está fechada sobre a referência da função decorada (&lt;em&gt;closure&lt;/em&gt;), &lt;span
style="color: #000000;"&gt;print_full_name&lt;/span&gt; e portanto pode invocar
a função decorada quando está executando. No exemplo acima, chamando
&lt;span style="color: #000000;"&gt;decorated_func&lt;/span&gt; resulta em &lt;span
style="color: #000000;"&gt;print_full_name&lt;/span&gt; sendo executada além de
algum outro código implementando uma nova funcionalidade. Essa
habilidade de adicionar nova funcionalidade para uma função sem
modificar a função original é a essência de &lt;em&gt;function decorators&lt;/em&gt;. Uma
vez que esse conceito é entendido, o conceito de &lt;em&gt;decorators&lt;/em&gt; está
entendido.&lt;/p&gt;
&lt;h2&gt;Python decorators&lt;/h2&gt;
&lt;p&gt;Agora que nós felizmente entendemos a essência de &lt;em&gt;function decorators&lt;/em&gt;,
nós podemos seguir em frente para desconstruir construções Python que
permitem-nos definir decorators mais facilmente. A seção anterior
descreve a essência de decorators, mas ter que usar decorators através
de composições de funções como descrito é muito custoso. Python introduz
o símbolo &lt;span style="color: #666600;"&gt;@&lt;/span&gt; para decoração de
funções. Decorar uma função usando a sintaxe de decorator Python é
conseguida como mostrada abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@decorator&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;a_stand_alone_function&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Chamando &lt;span style="color: #000000;"&gt;stand_alone_function&lt;/span&gt;
agora é o equivalente a chamar a função &lt;span
style="color: #000000;"&gt;decorated_func&lt;/span&gt; da seção anterior, mas
não precisamos mais definir a função intermediária &lt;span
style="color: #000000;"&gt;decorated_func&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Note que decorators podem ser aplicados não apenas em funções Python,
mas também em classes Python e métodos de classe, mas discutiremos sobre
decorators de classes e métodos em um próximo tutorial.&lt;/p&gt;
&lt;p&gt;É importante entender o que o símbolo &lt;span
style="color: #666600;"&gt;@&lt;/span&gt; faz em respeito aos decorators em
Python. A linha &lt;span style="color: #006666;"&gt;@decorator&lt;/span&gt; não
define um decorator, em vez disso pode-se pensar dele como um açúcar
sintático (&lt;em&gt;syntatic sugar&lt;/em&gt;) para &lt;strong&gt;decorar uma função&lt;/strong&gt;. Eu gosto de
definir &lt;strong&gt;decorar uma função&lt;/strong&gt; como o processo de aplicar um decorator
existente a uma função. O &lt;strong&gt;&lt;em&gt;decorator&lt;/em&gt;&lt;/strong&gt; é a função real, &lt;span
style="color: #000000;"&gt;decorator&lt;/span&gt; que adiciona a nova
funcionalidade para a função original. De acordo com a PEP 318, o
seguinte trecho de decorator&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@dec2&lt;/span&gt;
&lt;span class="nd"&gt;@dec1&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;é equivalente a:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dec2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dec1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;sem o argumento intermediário &lt;span style="color: #000000;"&gt;func&lt;/span&gt;.
No exemplo acima, &lt;span style="color: #006666;"&gt;@dec1&lt;/span&gt; e &lt;span
style="color: #006666;"&gt;@dec2&lt;/span&gt; são os invocadores dos decorators.
Agora pare, pense cuidadosamente e garanta que você entendeu isso. &lt;span
style="color: #000000;"&gt;dec1&lt;/span&gt; e &lt;span
style="color: #000000;"&gt;dec2&lt;/span&gt; são referências de objeto de função,
e esses são os decorators reais. Esses valores podem ainda ser
substituídos por qualquer &lt;strong&gt;&lt;em&gt;chamada de função ou um valor que quando
avaliado retorna uma função que recebe uma outra função.&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;O que é de
suma importância é que o nome de referência&lt;/em&gt; seguindo o símbolo &lt;span
style="color: #666600;"&gt;@&lt;/span&gt; é uma referência para um objeto função
(para esse tutorial, nós assumimos que esta referência deve ser um
objeto função, mas na realidade ela deve ser um objeto &lt;strong&gt;chamável&lt;/strong&gt;
(&lt;strong&gt;callable)&lt;/strong&gt;) que recebe uma função como argumento. Entender esse fato
profundo ajudará em entender decorators Python e tópicos sobre
decorators mais envolventes, tais como decorators que recebem
argumentos.&lt;/p&gt;
&lt;h2&gt;Argumentos de funções para funções decoradas&lt;/h2&gt;
&lt;p&gt;Argumentos podem ser passados para funções que estão sendo decoradas ao
simplesmente passar essa função dentro da função que envolve ela, &lt;strong&gt;isto
é a função interna retornada quando o decorator é invocado&lt;/strong&gt;, a função
decorada. Nós ilustramos isso com um exemplo abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;

&lt;span class="c"&gt;# decorator espera uma outra função como argumento&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="c"&gt;# Uma função wrapper é definida na hora&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="c"&gt;# adicione qualquer funcionalidade de execução na função original&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Calling function: {} at {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;

        &lt;span class="c"&gt;# executa a função original&lt;/span&gt;
        &lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;# adicione qualquer funcionalidade de execução na função original&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Finished calling : {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c"&gt;# retorne a função wrapper definida no momento. O corpo da&lt;/span&gt;
    &lt;span class="c"&gt;# função wrapper não foi executado ainda, mas um closure&lt;/span&gt;
    &lt;span class="c"&gt;# na função func_to_decorate foi criado &lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func_wrapper&lt;/span&gt;

&lt;span class="nd"&gt;@logger&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_full_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;My name is {} {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;print_full_name&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;John&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;Doe&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

Calling &lt;span class="k"&gt;function&lt;/span&gt;: print_full_name at 2015-01-24 14:36:36.691557
My name is John Doe
Finished calling : print_full_name
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note como nós usamos &lt;span style="color: #666600;"&gt;*&lt;/span&gt;&lt;span
style="color: #000000;"&gt;args&lt;/span&gt; e &lt;span
style="color: #666600;"&gt;**&lt;/span&gt;&lt;span
style="color: #000000;"&gt;kwargs&lt;/span&gt; na definição da função wrapper
interna; isso é pelo simples motivo que nós não podemos saber de antemão
quais argumentos estão sendo passados para uma função que está sendo
decorada.&lt;/p&gt;
&lt;h2&gt;Função decorator com argumentos de função&lt;/h2&gt;
&lt;p&gt;Nós também podemos passar argumentos para a função decorator atual, mas
isso é mais complexo do que o caso de passar funções para funções
decoradas. Nós ilustramos isso com um grande exemplo abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Essa função recebe argumentos e retorna uma função&lt;/span&gt;
&lt;span class="c"&gt;# a função retornada é nosso decorator real&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator_maker_with_arguments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;decorator_arg1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="c"&gt;# isso é nosso decorator real que aceita uma função&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# a função wrapper recebe argumentos para a função decoradora&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function_arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function_arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c"&gt;# adicione qualquer funcionalidade de execução na função original&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Calling function: {} at {} with decorator arguments: {} and function arguments:{} {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;  
               &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;decorator_arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function_arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function_arg2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

            &lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function_arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function_arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="c"&gt;# adicione qualquer funcionalidade de execução na função original&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Finished calling : {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapped&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;decorator&lt;/span&gt;

&lt;span class="nd"&gt;@decorator_maker_with_arguments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Apollo 11 Landing&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function_arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function_arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;My full name is -- {} {} --&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function_arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function_arg2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; print_name&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Tranquility base &amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;To Houston&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

Calling &lt;span class="k"&gt;function&lt;/span&gt;: print_name at 2015-01-24 15:03:23.696982 with decorator arguments: Apollo &lt;span class="m"&gt;11&lt;/span&gt; Landing and &lt;span class="k"&gt;function&lt;/span&gt; arguments:Tranquility base  To Houston
My full name is -- Tranquility base  To Houston --
Finished calling : print_name
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como mencionado anteriormente, a chave para entender o que está
acontecendo com isso é notar que nós podemos substituir o valor de
referência seguindo a @ em uma decoração de função com qualquer valor
que &lt;strong&gt;&lt;em&gt;resulta em um objeto de função que recebe uma outra função como
argumento&lt;/em&gt;&lt;/strong&gt;. No exemplo acima, o valor retornado pela chamada de
função, &lt;span
style="color: #000000;"&gt;decorator_make_with_arguments&lt;/span&gt;(&lt;span
style="color: #008800;"&gt;"Apollo 11 landing"&lt;/span&gt;), é o decorator. A
chamada resulta em uma função, decorator que aceita uma função como
argumento. Assim a decoração '@decorator_maker_with_arguments("Apollo
11 landing")' é equivalente a &lt;span
style="color: #006666;"&gt;@decorator&lt;/span&gt; mas com o decorador, &lt;span
style="color: #000000;"&gt;decorator&lt;/span&gt;, fechado sobre o
argumento &lt;span style="color: #008800;"&gt;Apollo 11 landing&lt;/span&gt; pela
chamada da função &lt;span
style="color: #000000;"&gt;decorator_maker_with_arguments&lt;/span&gt;. Note
que os argumentos fornecidos para um decorator não pode ser
dinamicamente mudado em tempo de execução como eles são executados na
importação do script.&lt;/p&gt;
&lt;h2&gt;Functools.wrap&lt;/h2&gt;
&lt;p&gt;Usar decorators envolve trocar de uma função para uma outra. Um
resultado disso é que meta informações, tais como docstrings são
perdidas quando usar um decorator com tal função. Isso é ilustrado
abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;

&lt;span class="c"&gt;# decorator espera uma outra função como argumento&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="c"&gt;# uma função wrapper é definida na hora&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func_wrapper&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

        &lt;span class="c"&gt;# adicione qualquer funcionalidade de execução na função original&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Calling function: {} at {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;

        &lt;span class="c"&gt;# execute a função original&lt;/span&gt;
        &lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c"&gt;# adicione qualquer funcionalidade de execução na função original&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Finished calling : {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c"&gt;# retorne a função wrapper definida no momento. O corpo da&lt;/span&gt;
    &lt;span class="c"&gt;# função wrapper não foi executado ainda, mas um closure&lt;/span&gt;
    &lt;span class="c"&gt;# na função func_to_decorate foi criado &lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func_wrapper&lt;/span&gt;

&lt;span class="nd"&gt;@logger&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_full_name&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;return john doe&amp;#39;s full name&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;My name is John Doe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; print&lt;span class="o"&gt;(&lt;/span&gt;print_full_name.__doc__&lt;span class="o"&gt;)&lt;/span&gt;
None
&amp;gt;&amp;gt;&amp;gt; print&lt;span class="o"&gt;(&lt;/span&gt;print_full_name.__name__&lt;span class="o"&gt;)&lt;/span&gt;
func_wrapper
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No exemplo acima uma tentativa de mostrar a string de documentação
retorna &lt;span style="color: #000088;"&gt;None&lt;/span&gt; porque o decorator
trocou a função &lt;span style="color: #000000;"&gt;print_full_name&lt;/span&gt;
com a função &lt;span style="color: #000000;"&gt;func_wrapper&lt;/span&gt; que não
tem string de documentação. Até mesmo o nome da função agora referencia
o nome da função wrapper, em vez da função real. Isso, na maioria das
vezes, não o que nós queremos quando usamos decorators. Para contornar
isso, o módulo Python &lt;span style="color: #000000;"&gt;functools&lt;/span&gt;
fornece a função &lt;span style="color: #000000;"&gt;wraps&lt;/span&gt; que também
passa a ser um decorator. Esse decorator é aplicado a função wrapper e
recebe a função a ser decorada como argumento. O uso é ilustrado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;wraps&lt;/span&gt; 

&lt;span class="c"&gt;# decorator espera uma outra função como argumento&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="nd"&gt;@wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;# uma função wrapper é definida na hora&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="c"&gt;# adicione qualquer funcionalidade de execução na função original&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Calling function: {} at {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;

        &lt;span class="c"&gt;# execute a função original&lt;/span&gt;
        &lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;# adicione qualquer funcionalidade de execução na função original&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Finished calling : {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c"&gt;# retorne a função wrapper definida no momento. O corpo da&lt;/span&gt;
    &lt;span class="c"&gt;# função wrapper não foi executado ainda, mas um closure&lt;/span&gt;
    &lt;span class="c"&gt;# na função func_to_decorate foi criado &lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func_wrapper&lt;/span&gt;

&lt;span class="nd"&gt;@logger&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_full_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;return john doe&amp;#39;s full name&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;My name is {} {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; print&lt;span class="o"&gt;(&lt;/span&gt;print_full_name.__doc__&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; john doe&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s full name
&amp;gt;&amp;gt;&amp;gt;print&lt;span class="o"&gt;(&lt;/span&gt;print_full_name.__name__&lt;span class="o"&gt;)&lt;/span&gt;
print_full_name
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Aplicação de Decoradores&lt;/h2&gt;
&lt;p&gt;Decorators tem uma ampla variedades de aplicações em Python, e todas
essas não podem ser cobertas nesse artigo. Alguns exemplos de aplicações
de decorators incluem:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Memoização (&lt;em&gt;memoization&lt;/em&gt;) que é o cache de valores para prevenir
    recomputar tais valores se a computação é muito custosa; Um
    decorator de memoização pode ser usado para decorar uma função que
    executa o cálculo real, e a funcionalidade adicionada é que, para um
    dado argumento se o resultado já foi computado anteriormente então o
    valor armazenado é retornado para o chamador.&lt;/li&gt;
&lt;li&gt;Em aplicações web, decorators podem ser usados para proteger
    endpoints que requer autenticação; um endpoint é protegido com um
    decorator que checa se um usuário está autenticado quando uma
    requisição é feita para o endpoint. Django, um popular framework
    web, faz uso de decorators para gerenciar cache e permissões
    de views.&lt;/li&gt;
&lt;li&gt;Decorators podem também fornecer uma maneira limpa para realização
    de tarefas domésticas, tais como chamadas de funções de logging,
    tempo de função e etc.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;O uso de decorators é um campo de atuação muito largo, que é único para
diferentes situações. A &lt;a href="https://wiki.python.org/moin/PythonDecoratorLibrary"&gt;biblioteca de decorator
Python&lt;/a&gt; fornecem
ricos casos de uso de decorators Python. Navegando por esta coleção
fornecerá visão prática para o uso de decorators Python.&lt;/p&gt;
&lt;h2&gt;Leitura complementar&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-0318/"&gt;PEP 318 - Decorators for Functions and Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/739654/how-can-i-make-a-chain-of-function-decorators-in-python/1594484#1594484"&gt;StackOverflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://dunderlabs.github.io/pages/pythonista-intermediario.html"&gt;Clique aqui para voltar para a tabela de conteúdo.&lt;/a&gt;&lt;/p&gt;</summary><category term="python"></category><category term="python function"></category><category term="decorators"></category><category term="translations"></category></entry><entry><title>Funções Python</title><link href="https://dunderlabs.github.io/funcoes-python.html" rel="alternate"></link><updated>2015-02-11T13:15:00-03:00</updated><author><name>Patrick Mazulo</name></author><id>tag:dunderlabs.github.io,2015-02-11:funcoes-python.html</id><summary type="html">&lt;p&gt;&lt;img alt="Créditos da imagem" src="https://dunderlabs.github.io/images/posts/python_function_syntax.png" /&gt;
Créditos da imagem: &lt;a href="http://www.voidspace.org.uk/python/weblog/arch_Tools.shtml"&gt;http://www.voidspace.org.uk/python/weblog/arch_Tools.shtml&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Funções Python nomeadas ou &lt;em&gt;anônimas&lt;/em&gt; são um conjunto de declarações ou
expressões. Em Python, &lt;strong&gt;&lt;em&gt;funções são objetos de primeira classe&lt;/em&gt;&lt;/strong&gt;.
Isso significa que não há restrição no uso de funções. Funções python
podem ser usadas assim como qualquer outro valor python, tal como
strings e números. Funções Python tem atributos que podem ser
introspectados ao usar a função &lt;span style="color: #000088;"&gt;&lt;a href="https://docs.python.org/2/library/functions.html#dir"&gt;dir&lt;/a&gt;&lt;/span&gt;
do Python, como mostrado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; square
&amp;lt;&lt;span class="k"&gt;function&lt;/span&gt; square at 0x031AA230&amp;gt;
&amp;gt;&amp;gt;&amp;gt; dir&lt;span class="o"&gt;(&lt;/span&gt;square&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__call__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__class__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__closure__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__code__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__defaults__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__delattr__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__dict__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__doc__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__format__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__get__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__getattribute__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__globals__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__hash__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__init__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__module__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__name__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__new__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__reduce__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__reduce_ex__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__repr__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__setattr__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__sizeof__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__str__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__subclasshook__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;func_closure&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;func_code&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;func_defaults&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;func_dict&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;func_doc&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;func_globals&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;func_name&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Alguns atributos importantes das funções incluem:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;__&lt;span style="color: #000000;"&gt;doc&lt;/span&gt;__ retorna a string da
    documentação da função.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def square&lt;span class="o"&gt;(&lt;/span&gt;x&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;return square of given number&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; x**2

&amp;gt;&amp;gt;&amp;gt; square.__doc__
&lt;span class="s1"&gt;&amp;#39;return square of given number&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;__&lt;span style="color: #000000;"&gt;name&lt;/span&gt;__ retorna o nome da
    função&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;```` {.theme:shell-default .toolbar:1 .toolbar-overlay:false .striped:false .nums:false .lang:sh .decode:true}
def square(x):
    """return square of given number"""
    return x**2&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;square.func_name
'square'&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;-   \_\_&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;color: #000000;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;module&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;\_\_ retorna o nome
    do módulo que a função está definida.

````python
def square(x):
    &amp;quot;&amp;quot;&amp;quot;return square of given number&amp;quot;&amp;quot;&amp;quot;
    return x**2
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; square.__module__
&lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;span style="color: #000000;"&gt;func_defaults&lt;/span&gt; retorna uma
    tupla com os valores padrões dos argumentos.&lt;/li&gt;
&lt;li&gt;&lt;span style="color: #000000;"&gt;func_globals&lt;/span&gt; retorna uma
    referência para um dicionário que contém as variáveis globais
    da função.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;return square of given number&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; square.func_globals
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__builtins__&amp;#39;&lt;/span&gt;: &amp;lt;module &lt;span class="s1"&gt;&amp;#39;__builtin__&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;built-in&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt;, &lt;span class="s1"&gt;&amp;#39;__name__&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;square&amp;#39;&lt;/span&gt;: &amp;lt;&lt;span class="k"&gt;function&lt;/span&gt; square at 0x10f099c08&amp;gt;, &lt;span class="s1"&gt;&amp;#39;__doc__&amp;#39;&lt;/span&gt;: None, &lt;span class="s1"&gt;&amp;#39;__package__&amp;#39;&lt;/span&gt;: None&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;span style="color: #000000;"&gt;func_dict&lt;/span&gt; retorna o dicionário
    que define o namespace local para os atributos desta função&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;return square of given number&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="sb"&gt;````&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;

&lt;span class="sb"&gt;````&lt;/span&gt;&lt;span class="n"&gt;shell&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;square&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_dict&lt;/span&gt;
&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;span style="color: #000000;"&gt;func_closure&lt;/span&gt; retorna tupla de
    células que contém ligações para variáveis livres das funções.
    Closure serão discutidos mais tarde.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Funções podem ser repassadas como argumentos para outras funções. Essas
funções que recebem outras funções como argumento são comumente chamadas
como funções &lt;strong&gt;&lt;em&gt;de alta ordem&lt;/em&gt;&lt;/strong&gt; (ou &lt;strong&gt;&lt;em&gt;ordem superior&lt;/em&gt;&lt;/strong&gt;) e elas formam
uma parte muito importante na &lt;strong&gt;&lt;em&gt;programação funcional&lt;/em&gt;&lt;/strong&gt;. Um exemplo
muito bom dessas funções de alta ordem é a função &lt;a href="https://docs.python.org/2/library/functions.html#map"&gt;&lt;span
style="color: #000000;"&gt;map&lt;/span&gt;&lt;/a&gt;
que recebe uma função e um &lt;span
style="color: #000000;"&gt;iterável&lt;/span&gt;, e aplica a função para cada
item no &lt;span style="color: #000000;"&gt;iterável&lt;/span&gt;, retornando uma
nova lista. No exemplo abaixo, nós ilustramos isso ao passar a função
&lt;span style="color: #000000;"&gt;square&lt;/span&gt; definida anteriormente e um
&lt;span style="color: #000000;"&gt;iterável&lt;/span&gt; de números para a função
&lt;span style="color: #000000;"&gt;map&lt;/span&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; map&lt;span class="o"&gt;(&lt;/span&gt;square, range&lt;span class="o"&gt;(&lt;/span&gt;10&lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;0, 1, 4, 9, 16, 25, 36, 49, 64, 81&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Funções podem ser definidas dentro do bloco de código de outras funções,
e podem ser retornadas a partir da chamada de outras funções.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;outer&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;outer_var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;outer variable&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;outer_var&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;inner&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No exemplo acima, nós declaramos uma função, &lt;span
style="color: #000000;"&gt;inner&lt;/span&gt;, dentro de uma outra função, &lt;span
style="color: #000000;"&gt;outer&lt;/span&gt;, e retornamos a função &lt;span
style="color: #000000;"&gt;inner&lt;/span&gt; quando a função &lt;span
style="color: #000000;"&gt;outer&lt;/span&gt; é executada.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;outer&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;outer_var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;outer variable&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;outer_var&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;inner&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; outer&lt;span class="o"&gt;()&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; func
&amp;lt;&lt;span class="k"&gt;function&lt;/span&gt; inner at 0x031AA270&amp;gt;
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No exemplo acima, a função outer retorna uma função quando é chamada, e
esta é atribuída para a variável func. Essa variável pode ser chamada
assim como a função retornada:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; func&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;outer variable&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Definições de Função&lt;/h2&gt;
&lt;p&gt;A palavra reservada &lt;span style="color: #000088;"&gt;def&lt;/span&gt; é usada
para criar funções definidas pelo usuário. Definições de funções são
instruções executadas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Na função &lt;span style="color: #000000;"&gt;square&lt;/span&gt; acima, quando o
módulo contendo a função é carregado no interpretador python, ou se está
definida dentro do &lt;strong&gt;REPL&lt;/strong&gt; python, então a instrução da definição da
função que está em &lt;span style="color: #000088;"&gt;def&lt;/span&gt; &lt;span
style="color: #000000;"&gt;square&lt;/span&gt;(x) é executada. Isso tem algumas
implicações para argumentos padrões que tem estruturas de dados mutáveis
como valores; isso será coberto mais a frente neste tutorial. A execução
de uma definição de função liga o nome da função no atual namespace
local (&lt;em&gt;pense em namespaces como nomes para mapeamento de valores que
podem também ser aninhados. namespaces e escopo serão cobertos em mais
detalhes em um outro tutorial&lt;/em&gt;) para um objeto de função que é um
wrapper em torno do código executável para a função. Esse objeto função
contém uma referência para o atual namespace global que é o namespace
global que é usado quando a função é chamada. A definição da função não
executa o corpo da função; este é executado apenas quando a função é
chamada.&lt;/p&gt;
&lt;h2&gt;Argumentos da Chamada de Função&lt;/h2&gt;
&lt;p&gt;Além dos argumentos normais, funções python suportam número variável de
argumentos. Esses números variáveis de argumentos vêm em três tipos que
estão descritos abaixo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Valor padrão do argumento&lt;/strong&gt;: Isso permite um usuário definir
    alguns valores padrões para os argumentos da função. Nesse caso, tal
    função pode ser chamada com menos argumentos. Python usa o valor
    padrão fornecido para argumentos que não são fornecidos durante a
    chamada da função. Este exemplo abaixo é ilustrativo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def show_args(arg, def_arg=1, def_arg2=2):
    return &amp;quot;arg={}, def_arg={}, def_arg2={}&amp;quot;.format(arg, def_arg, def_arg2)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A função acima foi definida com um único argumento posicional
normal, &lt;span style="color: #000000;"&gt;arg&lt;/span&gt; e dois argumentos
padrões, &lt;span style="color: #000000;"&gt;def_arg&lt;/span&gt; e &lt;span
style="color: #000000;"&gt;def_arg2&lt;/span&gt;. A função acima pode ser
chamada em qualquer das seguintes maneiras abaixo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Fornecendo apenas o valor do argumento posicional não
    predefinido; nesse caso os outros argumentos recebem os valores
    padrões fornecidos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def show_args(arg, def_arg=1, def_arg2=2):
    return &amp;quot;arg={}, def_arg={}, def_arg2={}&amp;quot;.format(arg, def_arg, def_arg2)
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;shell&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; show_args(&amp;quot;tranquility&amp;quot;)
    &amp;#39;arg=tranquility, def_arg=1, def_arg2=2&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fornecendo valores para sobrescrever algum argumento padrão além
    do argumento posicional que não foi predefinido.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def show_args(arg, def_arg=1, def_arg2=2):
    return &amp;quot;arg={}, def_arg={}, def_arg2={}&amp;quot;.format(arg, def_arg, def_arg2)
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;shell&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; show_args(&amp;quot;tranquility&amp;quot;, &amp;quot;to Houston&amp;quot;)
    &amp;#39;arg=tranquility, def_arg=to Houston, def_arg2=2&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fornecendo valores para todos os argumentos, sobrescrevendo
    todos os argumentos com valores padrões.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def show_args(arg, def_arg=1, def_arg2=2):
    return &amp;quot;arg={}, def_arg={}, def_arg2={}&amp;quot;.format(arg, def_arg, def_arg2)
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;shell&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; show_args(&amp;quot;tranquility&amp;quot;, &amp;quot;to Houston&amp;quot;, &amp;quot;the eagle has landed&amp;quot;)
    &amp;#39;arg=tranquility, def_arg=to Houston, def_arg2=the eagle has landed&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;É também muito importante ser cuidadoso quando usar estruturas
    de dados mutáveis como argumentos padrões. Definições de função
    são executadas uma vez que essas estruturas de dados mutáveis,
    que são valores de referência, são criados na hora da definição.
    Isto significa que a mesma estrutura mutável de dado é usada
    para todas as funções chamadas, como mostrado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def show_args_using_mutable_defaults(arg, def_arg=[]):
    def_arg.append(&amp;quot;Hello World&amp;quot;)
    return &amp;quot;arg={}, def_arg={}&amp;quot;.format(arg, def_arg)
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;shell&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; show_args_using_mutable_defaults(&amp;quot;test&amp;quot;)
    &amp;quot;arg=test, def_arg=[&amp;#39;Hello World&amp;#39;]&amp;quot; 
&amp;gt;&amp;gt;&amp;gt; show_args_using_mutable_defaults(&amp;quot;test 2&amp;quot;)
    &amp;quot;arg=test 2, def_arg=[&amp;#39;Hello World&amp;#39;, &amp;#39;Hello World&amp;#39;]&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;p&gt;
Em cada chamada de função, &lt;span style="color: #660066;"&gt;Hello
World&lt;/span&gt; é adicionado a lista &lt;span
style="color: #000000;"&gt;def_arg&lt;/span&gt;, e depois de duas
chamadas de função, o argumento padrão tem 2 strings
hello world. É importante tomar nota disso quando usar
argumentos mutáveis padrão como valores padrão. A razão para
isso ficará claro quando nós discutirmos o Python Data Model.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Argumento Chave&lt;/strong&gt;: funções podem ser chamadas usando argumentos
    chave da forma &lt;span style="color: #000000;"&gt;kwarg&lt;/span&gt;&lt;span
    style="color: #666600;"&gt;=&lt;/span&gt;&lt;span
    style="color: #000000;"&gt;valor.&lt;/span&gt;Um kwarg refere ao nome do
    argumento usado na definição da função. Pegue a função definida
    abaixo com argumentos padrão e posicionado&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def show_args(arg, def_arg=1):
    return &amp;quot;arg={}, def_arg={}&amp;quot;.format(arg, def_arg)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para ilustrar uma chamada de função com argumentos chave, a seguinte
função pode ser chamada em qualquer das seguintes maneiras:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;show_args(arg=&amp;quot;test&amp;quot;, def_arg=3)

show_args(&amp;quot;test&amp;quot;)

show_args(arg=&amp;quot;test&amp;quot;)

show_args(&amp;quot;test&amp;quot;, 3)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Em uma chamada de função, argumentos chave não devem vir antes  de
argumentos não chaves, assim, a seguinte maneira irá falhar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;show_args(def_arg=4)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Uma função não pode fornecer valores duplicados para um argumento,
então a seguinte declaração é ilegal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;show_args(&amp;quot;test&amp;quot;, arg=&amp;quot;testing&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No exemplo acima, o argumento arg é um argumento posicional, então o
valor test é atribuído a ele. Tentar atribuir na chave arg novamente
é uma tentativa de múltiplas atribuições, e isso é ilegal.&lt;/p&gt;
&lt;p&gt;Todos os argumentos chaves passados devem corresponder a um dos
argumentos aceitos pela função, e a ordem das chaves incluindo
argumentos não opcionais não é importante, então o seguinte código
no qual a ordem dos argumentos está trocada é legal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;show_args(def_arg=&amp;quot;testing&amp;quot;, arg=&amp;quot;test&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Lista aleatória de argumentos&lt;/strong&gt;: Python também suporta definir
    funções que recebem uma série aleatória de argumentos que são
    passados para a função em uma tupla. Um exemplo disso no tutorial
    python é dado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def write_multiple_items(file, separator, *args): 
    file.write(separator.join(args))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O número aleatório de argumentos devem vir depois dos argumentos
normais; nesse caso, depois dos argumentos &lt;span
style="color: #000000;"&gt;file&lt;/span&gt; e &lt;span
style="color: #000000;"&gt;separator&lt;/span&gt;. A seguir temos um exemplo
de chamada de função para a função definida acima:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;f = open(&amp;quot;test.txt&amp;quot;, &amp;quot;wb&amp;quot;)
write_multiple_items(f, &amp;quot; &amp;quot;, &amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;, &amp;quot;three&amp;quot;, &amp;quot;four&amp;quot;, &amp;quot;five&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;p&gt;
Os argumentos &lt;span style="color: #000000;"&gt;one two three four
five&lt;/span&gt; são todos agrupados juntos em uma tupla que podem ser
acessados através do argumento &lt;span
style="color: #000000;"&gt;args&lt;/span&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Desempacotando Argumentos de Função&lt;/h3&gt;
&lt;p&gt;Algumas vezes, nós podemos ter argumentos para uma chamada de função
tanto em uma tupla, uma lista ou um dicionário. Esses argumentos pode
ser desempacotados nas funções pelas chamadas de função usando os
operadores &lt;span style="color: #000000;"&gt;*&lt;/span&gt; ou &lt;span
style="color: #000000;"&gt;**&lt;/span&gt;. Considere a seguinte função que
recebe 2 argumentos posicionais e mostra os valores&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def print_args&lt;span class="o"&gt;(&lt;/span&gt;a, b&lt;span class="o"&gt;)&lt;/span&gt;:
        print a
        print b
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Se nós tivermos os valores que nós queremos fornecer para a função em
uma lista, então nos poderíamos desempacotar esses valores diretamente
na função, como mostrado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;1, 2&lt;span class="o"&gt;]&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; print_args&lt;span class="o"&gt;(&lt;/span&gt;*args&lt;span class="o"&gt;)&lt;/span&gt;
1
2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Da mesma forma, quando nós temos palavras-chaves, nós podemos usar &lt;span
style="color: #000000;"&gt;dicts&lt;/span&gt; para armazenar, mapeando &lt;span
style="color: #000000;"&gt;kwarg para valor&lt;/span&gt; e o operador &lt;span
style="color: #000000;"&gt;**&lt;/span&gt; para desempacotar os argumentos
chaves para as funções, como mostrado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def parrot&lt;span class="o"&gt;(&lt;/span&gt;voltage, &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;’a stiff’, &lt;span class="nv"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;’voom’&lt;span class="o"&gt;)&lt;/span&gt;:
        print &lt;span class="s2"&gt;&amp;quot;-- This parrot wouldn’t&amp;quot;&lt;/span&gt;, action,
        print &lt;span class="s2"&gt;&amp;quot;if you put&amp;quot;&lt;/span&gt;, voltage, &lt;span class="s2"&gt;&amp;quot;volts through it.&amp;quot;&lt;/span&gt;,
        print &lt;span class="s2"&gt;&amp;quot;E’s&amp;quot;&lt;/span&gt;, state, &lt;span class="s2"&gt;&amp;quot;!&amp;quot;&lt;/span&gt;

&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;voltage&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;four million&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;state&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;bleedin’ demised&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;action&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;VOOM&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; parrot&lt;span class="o"&gt;(&lt;/span&gt;**d&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; This parrot wouldn’t VOOM &lt;span class="k"&gt;if&lt;/span&gt; you put four million volts through it. E’s bleedin’ demised
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;&lt;/h3&gt;
&lt;h3&gt;Definindo funções com &lt;span style="color: #666600;"&gt;*&lt;/span&gt; e &lt;span style="color: #666600;"&gt;**&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Algumas vezes, ao definir uma função, nós podemos não saber de antemão o
número de argumentos a esperar. Isso leva a definição de funções com a
seguinte assinatura:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;show_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O argumento &lt;span style="color: #000000;"&gt;*args&lt;/span&gt; representa uma
sequência de tamanho desconhecido de argumentos posicionais, enquanto
&lt;span style="color: #000000;"&gt;**kwargs&lt;/span&gt; representa um dicionário
de mapeamento nome-valor que pode conter qualquer quantidade de
nome-valor mapeada. O &lt;span style="color: #000000;"&gt;*args&lt;/span&gt; deve
vir antes do &lt;span style="color: #000000;"&gt;**kwargs&lt;/span&gt; na
definição da função. O seguinte código ilustra isso:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def show_args&lt;span class="o"&gt;(&lt;/span&gt;arg, *args, **kwargs&lt;span class="o"&gt;)&lt;/span&gt;:
        print arg
        &lt;span class="k"&gt;for&lt;/span&gt; item in args:
            print args
        &lt;span class="k"&gt;for&lt;/span&gt; key, value in kwargs:
            print key, value

&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;1, 2, 3, 4&lt;span class="o"&gt;]&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;kwargs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; dict&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;testing&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;24, &lt;span class="nv"&gt;year&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2014&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; show_args&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hey&amp;quot;&lt;/span&gt;, *args, **kwargs&lt;span class="o"&gt;)&lt;/span&gt;
hey
1
2
3
4
age 24
name testing
year 2014
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O argumento normal deve ser fornecido para a função, mas o &lt;span
style="color: #000000;"&gt;*args&lt;/span&gt; e &lt;span
style="color: #000000;"&gt;**kwargs&lt;/span&gt; são opcionais, como
demonstrado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; show_args&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hey&amp;quot;&lt;/span&gt;, *args, **kwargs&lt;span class="o"&gt;)&lt;/span&gt;
hey
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Na chamada da função o argumento normal é fornecido normalmente enquanto
os argumentos opcionais são desempacotados na chamada.&lt;/p&gt;
&lt;h2&gt;Funções Anônimas&lt;/h2&gt;
&lt;p&gt;Python também tem suporte para &lt;strong&gt;&lt;em&gt;funções anônimas&lt;/em&gt;&lt;/strong&gt;. Essas função são
criadas usando a palavra chave &lt;span
style="color: #000088;"&gt;lambda.&lt;/span&gt;Expressões lambda em python são da
seguinte forma:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;lambda_expr&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;lambda&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;parameter_list&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Expressões lambda retornam objetos de função depois da avaliação e tem
os mesmo atributos das funções nomeadas. Expressões lamda são
normalmente apenas usadas para funções muito simples em python, como
demonstrado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;square&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; lambda x: x**2
&amp;gt;&amp;gt;&amp;gt; &lt;span class="k"&gt;for&lt;/span&gt; i in range&lt;span class="o"&gt;(&lt;/span&gt;10&lt;span class="o"&gt;)&lt;/span&gt;:
    square&lt;span class="o"&gt;(&lt;/span&gt;i&lt;span class="o"&gt;)&lt;/span&gt;
0
1
4
9
16
25
36
49
64
81
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A expressão lambda acima é equivalente a seguinte função nomeada:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def square&lt;span class="o"&gt;(&lt;/span&gt;x&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="k"&gt;return&lt;/span&gt; x**2
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;&lt;/h3&gt;
&lt;h2&gt;Funções aninhadas e Closures&lt;/h2&gt;
&lt;p&gt;Definições de funções dentro de uma função cria funções aninhadas, assim
como mostrado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def outer&lt;span class="o"&gt;()&lt;/span&gt;:
        &lt;span class="nv"&gt;outer_var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;outer variable&amp;quot;&lt;/span&gt;
        def inner&lt;span class="o"&gt;()&lt;/span&gt;:
            &lt;span class="k"&gt;return&lt;/span&gt; outer_var
        &lt;span class="k"&gt;return&lt;/span&gt; inner
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nesse tipo de definição de função, a função &lt;span
style="color: #000000;"&gt;inner&lt;/span&gt; está apenas no escopo dentro da
função &lt;span style="color: #000000;"&gt;outer&lt;/span&gt;, por isso é na maioria
das vezes mais útil quando a função inner está sendo retornada
(movendo-a para o escopo da outer) ou quando está sendo passada em uma
outra função. Em funções aninhadas, tais como no exemplo acima, uma nova
instância da função aninhada é criada em cada chamada da função outer.
Isso porque durante a execução da função outer, a definição da nova
função inner é executada, mas o corpo não é executado.&lt;/p&gt;
&lt;p&gt;Uma função aninhada tem acesso ao ambiente em que foi criada. Isso é um
resultado direto da semântica da definição de função python. Um
resultado é que a variável definida na função outer pode ser
referenciada na função inner mesmo depois da função outer já ter
finalizado sua execução.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;outer&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;outer_var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;outer variable&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;outer_var&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;inner&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; outer&lt;span class="o"&gt;()&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; x
&amp;lt;&lt;span class="k"&gt;function&lt;/span&gt; inner at 0x0273BCF0&amp;gt;
&amp;gt;&amp;gt;&amp;gt; x&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;outer variable&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Quando funções aninhadas referenciam variáveis de funções externas nós
dizemos que a função aninhada está fechada (closure) sobre a variável
referenciada. Nós podemos usar um dos atributos especiais de objetos
função, &lt;span style="color: #000000;"&gt;__closure__&lt;/span&gt; para
acessar as variáveis fechadas, como demonstrado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;cl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; x.__closure__
&amp;gt;&amp;gt;&amp;gt; cl
&lt;span class="o"&gt;(&lt;/span&gt;&amp;lt;cell at 0x029E4470: str object at 0x02A0FD90&amp;gt;,&lt;span class="o"&gt;)&lt;/span&gt;

&amp;gt;&amp;gt;&amp;gt; cl&lt;span class="o"&gt;[&lt;/span&gt;0&lt;span class="o"&gt;]&lt;/span&gt;.cell_contents
&lt;span class="s1"&gt;&amp;#39;outer variable&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Closures em python tem um comportamento peculiar. No python 2.x e
abaixo, variáveis que apontam para tipos imutáveis tais como string e
números não podem ser recuperados dentro de um closure. O exemplo abaixo
ilustra isso:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; counter&lt;span class="o"&gt;()&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; c&lt;span class="o"&gt;()&lt;/span&gt;
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line 1, in &amp;lt;module&amp;gt;
  File &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line 4, in c
UnboundLocalError: &lt;span class="nb"&gt;local &lt;/span&gt;variable &lt;span class="s1"&gt;&amp;#39;count&amp;#39;&lt;/span&gt; referenced before assignment
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Uma solução bastante instável para isso é fazer uso de um tipo mutável
para capturar o closure, como mostrado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; counter&lt;span class="o"&gt;()&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; c&lt;span class="o"&gt;()&lt;/span&gt;
1
&amp;gt;&amp;gt;&amp;gt; c&lt;span class="o"&gt;()&lt;/span&gt;
2
&amp;gt;&amp;gt;&amp;gt; c&lt;span class="o"&gt;()&lt;/span&gt;
3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Python 3 introduziu a palavra chave &lt;span
style="color: #000088;"&gt;nonlocal&lt;/span&gt; que pode ser usada para resolver
esse problema de escopo de closure, como mostrado abaixo. No tutorial
sobre &lt;strong&gt;namespaces&lt;/strong&gt;, nós descrevemos essas peculiaridades em mais
detalhes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;nonlocal&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;
        &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Closures podem ser usados para manter estados (&lt;strong&gt;não é para isso que
classes servem&lt;/strong&gt;) e para algum simples casos, fornecendo uma solução
mais sucinta e legível que classes. Nós usamos um exemplo de registro
(logging) copiado do
&lt;a href="http://tech.pro/tutorial/1512/python-decorators"&gt;tech_pro&lt;/a&gt; para
ilustrar isso. Imagine uma API de registro extremamente trivial usando
classes baseadas em orientação a objetos que pode fazer logon em
diferentes níveis:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{}: {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_level&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;log_info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;info&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;log_warning&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;warning&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;log_error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Essa mesma funcionalidade pode ser implementada com closures, como
demonstrado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{}: {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;

&lt;span class="n"&gt;log_info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;info&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;log_warning&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;warning&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;log_error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A versão baseada em closure pode ser visto como a maneira mais sucinta e
legível, apesar de que ambas versões implementam a mesma funcionalidade.
Closures também desempenham um papel importante em uma grande função
Python: &lt;strong&gt;funções decoradoras&lt;/strong&gt; &lt;em&gt;(function decorators)&lt;/em&gt;. Essa é uma
funcionalidade amplamente usada que está explicada no próximo tutorial.&lt;/p&gt;
&lt;h3&gt;Leitura Complementar&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://tech.pro/tutorial/1512/python-decorators"&gt;Closures em Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/tutorial/controlflow.html#defining-functions"&gt;Definindo funções&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://dunderlabs.github.io/pages/pythonista-intermediario.html"&gt;Clique aqui para voltar para a tabela de conteúdo.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;N.T: Pessoal, tive uma certa dificuldade ao traduzir este capítulo da
série. Então gostaria de contar com o feedback de vocês nos comentários
para saber se conseguiram entender o que foi proposto :D&lt;/p&gt;</summary><category term="python"></category><category term="python function"></category><category term="translations"></category></entry><entry><title>Introdução ao Python Generators</title><link href="https://dunderlabs.github.io/introducao-ao-python-generators.html" rel="alternate"></link><updated>2015-02-04T12:16:00-03:00</updated><author><name>Patrick Mazulo</name></author><id>tag:dunderlabs.github.io,2015-02-04:introducao-ao-python-generators.html</id><summary type="html">&lt;p&gt;&lt;img alt="Créditos da imagem" src="https://dunderlabs.github.io/images/posts/relationships-generator-iterator.png" /&gt;
Créditos da imagem: &lt;a href="http://nvie.com/posts/iterators-vs-generators/"&gt;http://nvie.com/posts/iterators-vs-generators/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Geradores&lt;/em&gt; (&lt;em&gt;generators&lt;/em&gt;) é um conceito muito fascinante em Python;
&lt;em&gt;geradores&lt;/em&gt; tem uma ampla gama de aplicações, que vai desde simples
avaliação preguiçosa (&lt;em&gt;lazy evaluation&lt;/em&gt;) até avançadas execuções
simultâneas de tarefas (&lt;em&gt;veja&lt;/em&gt; &lt;a href="http://www.dabeaz.com/finalgenerator/"&gt;David
Beazley&lt;/a&gt;). Antes de mergulharmos
no fascinante mundo dos geradores Python, nós pegaremos um pequeno
desvio para explicar iteradores Python (&lt;em&gt;python iterators&lt;/em&gt;), um conceito
que eu acho que seja parte integrante para entender geradores.&lt;/p&gt;
&lt;h3&gt;Iteradores Python&lt;/h3&gt;
&lt;p&gt;Simplificando, um iterador em Python é qualquer tipo Python que pode ser
usado com um loop &lt;em&gt;for.&lt;/em&gt; Listas, tuplas, dicionários e &lt;em&gt;sets&lt;/em&gt; Python são
todos exemplos de iteradores embutidos. Alguém pode perguntar: "O que
faz desses tipos um iterador, e essa é uma propriedade apenas dos tipos
embutidos do Python?"&lt;/p&gt;
&lt;p&gt;Esses tipos são iteradores porque eles implementam o &lt;strong&gt;protocolo
iterador&lt;/strong&gt;. Então, &lt;strong&gt;O que é um protocolo iterador&lt;/strong&gt;? Para responder
esta pergunta, vamos precisar fazer outro pequeno desvio. Em Python,
existem alguns métodos especiais, comumente chamados como &lt;strong&gt;&lt;em&gt;métodos
mágicos&lt;/em&gt;&lt;/strong&gt;. Pode parecer estranho, mas apenas fique comigo e acredite
pela fé no que digo, pelo menos, até chegarmos à orientação a objetos em
Python.&lt;/p&gt;
&lt;p&gt;Esses métodos normalmente não são chamados explicitamente no código, mas
são chamados implicitamente durante sua execução. Um exemplo muito
familiar desses métodos mágicos, é o método &lt;em&gt;__&lt;span
style="color: #000000;"&gt;init&lt;/span&gt;__&lt;/em&gt;, que é mais ou menos como se
fosse um construtor que é chamado durante a inicialização de um objeto
Python. Semelhante a maneira como o método &lt;em&gt;__&lt;span
style="color: #000000;"&gt;init&lt;/span&gt;__&lt;/em&gt; tem de ser implementado na
inicialização de um objeto personalizado, o protocolo iterador tem uma
série de métodos mágicos que precisam ser implementados em qualquer
objeto que queira ser usado como um &lt;strong&gt;iterador&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Esses são os seguintes métodos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;O método __&lt;span style="color: #000000;"&gt;iter&lt;/span&gt;__ que é
    chamado na inicialização de um iterador. Ele deve retornar um objeto
    que tem o método &lt;em&gt;&lt;span style="color: #000088;"&gt;next&lt;/span&gt;()&lt;/em&gt; (no
    Python 3 este método foi mudado para __&lt;span
    style="color: #000000;"&gt;next&lt;/span&gt;__).&lt;/li&gt;
&lt;li&gt;O método &lt;span style="color: #000088;"&gt;&lt;em&gt;next&lt;/em&gt;&lt;/span&gt; que é chamado
    sempre que a função global &lt;em&gt;&lt;span
    style="color: #000088;"&gt;next&lt;/span&gt;()&lt;/em&gt; é invocada com o iterador
    como argumento. O método iterador &lt;span
    style="color: #000088;"&gt;&lt;em&gt;next&lt;/em&gt;&lt;/span&gt;deve retornar o próximo valor
    do iterável. Quando um iterador é usado com um loop &lt;em&gt;for&lt;/em&gt;, o &lt;em&gt;for&lt;/em&gt;
    chama implicitamente o método &lt;em&gt;&lt;span
    style="color: #000088;"&gt;next&lt;/span&gt;()&lt;/em&gt;. Este método levanta uma
    exceção &lt;span style="color: #660066;"&gt;&lt;em&gt;StopIteration&lt;/em&gt;&lt;/span&gt; quando
    não existe mais nenhum novo valor, para sinalizar o fim da iteração.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Qualquer classe Python pode ser definida para agir como um iterador,
desde que o protocolo iterador seja implementado. Isto é ilustrado
através da implementação de um simples iterador que retorna os números
da sequência Fibonacci até um determinado valor máximo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Fib&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                                        
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;                      
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__iter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;                          
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;                          
        &lt;span class="n"&gt;fib&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;StopIteration&lt;/span&gt;                  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;           
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt;for i in Fib&lt;span class="o"&gt;(&lt;/span&gt;10&lt;span class="o"&gt;)&lt;/span&gt;:
        print i      

0
1
1
2
3
5
8
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nós também podemos ir mais em frente e implementar nossa própria função
&lt;span style="color: #000000;"&gt;&lt;em&gt;range&lt;/em&gt;&lt;/span&gt; personalizada para loop em
números. Esta simples implementação apenas entra no loop partindo do 0
para cima.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomRange&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__iter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;numb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;StopIteration&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;numb&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="k"&gt;for&lt;/span&gt; i in CustomRange&lt;span class="o"&gt;(&lt;/span&gt;10&lt;span class="o"&gt;)&lt;/span&gt;:
        print i 
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Voltando aos Geradores&lt;/h3&gt;
&lt;p&gt;Agora, nós temos um entendimento básico sobre iteradores, mas não como
eles se relacionam com geradores. Em resumo, geradores são iteradores. A
&lt;strong&gt;&lt;em&gt;PEP 255&lt;/em&gt;&lt;/strong&gt;, que descreve simples geradores, refere-se a geradores
pelo seu nome completo: &lt;strong&gt;&lt;em&gt;generator-iterator&lt;/em&gt;&lt;/strong&gt; (gerador de
iteradores). Geradores são utilizados quer chamando o método &lt;em&gt;next&lt;/em&gt; no
objeto gerador, ou usando o objeto gerador em um loop &lt;em&gt;for&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Em Python, funções geradoras ou apenas geradores retornam objetos
geradores. Esses geradores são funções que contêm a palavra reservada
&lt;span style="color: #000088;"&gt;&lt;em&gt;yield&lt;/em&gt;&lt;/span&gt;. Ao invés de ter que
escrever cada gerador com o método &lt;em&gt;__&lt;span
style="color: #000000;"&gt;iter&lt;/span&gt;__&lt;/em&gt; e &lt;span
style="color: #000088;"&gt;&lt;em&gt;next&lt;/em&gt;&lt;/span&gt;, que é bastante complicado, Python
fornece a palavra reservada &lt;span style="color: #000088;"&gt;&lt;em&gt;yield&lt;/em&gt;&lt;/span&gt;
que provê uma maneira fácil para definir geradores. Por exemplo, o
iterador de Fibonacci pode ser remodelado como um gerador usando a
palavra reservada &lt;span style="color: #000088;"&gt;&lt;em&gt;yield&lt;/em&gt;&lt;/span&gt;, como
mostrado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O uso da palavra reservada &lt;span
style="color: #000088;"&gt;&lt;em&gt;yield&lt;/em&gt;&lt;/span&gt;simplifica muito a criação do
gerador.&lt;/p&gt;
&lt;h3&gt;A palavra reservada &lt;em&gt;yield&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;A palavra reservada &lt;span style="color: #000088;"&gt;&lt;em&gt;yield&lt;/em&gt;&lt;/span&gt;é usada
da seguinte maneira.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;lista_expressao&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O &lt;span style="color: #000088;"&gt;&lt;em&gt;yield&lt;/em&gt;&lt;/span&gt;é fundamental para as
funções geradoras em Python, mas o que essa palavra reservada &lt;span
style="color: #000088;"&gt;&lt;em&gt;yield&lt;/em&gt;&lt;/span&gt; faz? Para entender o &lt;span
style="color: #000088;"&gt;&lt;em&gt;yield&lt;/em&gt;&lt;/span&gt;, nós contrastamos ela com a
palavra reservada &lt;span style="color: #000088;"&gt;&lt;em&gt;return&lt;/em&gt;&lt;/span&gt;;  uma
outra palavra chave que devolve o controle para o chamador de uma
função. Quando uma função que está executando encontra o &lt;span
style="color: #000088;"&gt;&lt;em&gt;yield&lt;/em&gt;&lt;/span&gt;, ela suspende a execução naquele
ponto, salva seu contexto e retorna para o chamador, juntamente com
qualquer valor na lista_expressao; quando o chamador invoca o método
&lt;em&gt;next&lt;/em&gt; no objeto, a execução da função continua até outro &lt;span
style="color: #000000;"&gt;&lt;em&gt;yield&lt;/em&gt;&lt;/span&gt; ou &lt;span
style="color: #000000;"&gt;&lt;em&gt;return&lt;/em&gt;&lt;/span&gt; ser encontrado, ou quando o fim
da função é atingido. Citando a &lt;strong&gt;&lt;em&gt;PEP 255&lt;/em&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Se a declaração de um yield é encontrado, o estado da função é
congelado, e o valor da lista_expressao é retornado para o chamador
do método next(). Por "congelado" nós queremos dizer que todo o estado
local é retido, incluindo a ligação das variáveis locais, o ponteiro
de instrução e a pilha de avaliação interna: informação suficiente é
salva para que na próxima vez que o .next() é invocado, a função pode
proceder exatamente como se a declaração yield fosse apenas outra
chamada externa. Por outro lado, quando uma função encontra a
declaração de um &lt;span style="color: #000088;"&gt;return&lt;/span&gt;, ele
retorna para o chamador junto com qualquer valor que prosseguir a
declaração do &lt;span style="color: #000088;"&gt;return&lt;/span&gt;, e a
execução de tal função é completa para todos os efeitos. Pode-se
pensar do &lt;span style="color: #000088;"&gt;yield&lt;/span&gt; como o causador
de uma interrupção temporária.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Geradores Python em ação&lt;/h3&gt;
&lt;p&gt;Retornando para a função de números Fibonacci, se nós queremos gerar
todos os número Fibonacci até um determinado valor, o seguinte trecho de
código não-gerador pode ser usado para criar a sequência&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O trecho acima calcula avidamente todos os números abaixo do valor &lt;em&gt;max&lt;/em&gt;
e retorna a coleção de tais números usando uma simples chamada de
função. Por outro lado, usando o gerador Fibonacci para resolver o mesmo
problema é um jogada diferente. Nós podemos usá-lo em um loop &lt;em&gt;for&lt;/em&gt; e
permitir o construtor do &lt;em&gt;for&lt;/em&gt; implicitamente inicializar o gerador e
chamar o método &lt;span style="color: #000088;"&gt;next&lt;/span&gt; no objeto
gerador, ou ao explicitamente inicializá-lo e chamar o método &lt;span
style="color: #000088;"&gt;next&lt;/span&gt; no objeto. Os valores são
retornados, um depois do outro, ao chamar o método &lt;span
style="color: #000088;"&gt;next&lt;/span&gt; no gerador. O gerador de números
Fibonacci é implementado usando &lt;span
style="color: #000088;"&gt;&lt;em&gt;yield&lt;/em&gt;&lt;/span&gt; logo abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nas seções seguintes, nós explicitamente inicializaremos o gerador, e
faremos uso da função &lt;span style="color: #000088;"&gt;next&lt;/span&gt; para
pegar os valores do gerador. Primeiro, nós vamos inicializar o objeto
gerador como mostrado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;gen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; fib&lt;span class="o"&gt;(&lt;/span&gt;10&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; gen
&amp;lt;generator object fib at 0x1069a6d20&amp;gt;
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O que aconteceu acima é que quando o gerador é chamado, os argumentos
(max tem um valor máximo de 10) são ligados aos nomes, mas o corpo da
função não é executado. Ao invés disso, um objeto &lt;strong&gt;generator-iterator&lt;/strong&gt;
é retornado como mostrado pelo valor de gen. Este objeto pode então ser
usado como um iterador. Note que é a presença da palavra reservada &lt;span
style="color: #000088;"&gt;&lt;em&gt;yield&lt;/em&gt;&lt;/span&gt; é responsável por isso.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; next&lt;span class="o"&gt;(&lt;/span&gt;gen&lt;span class="o"&gt;)&lt;/span&gt;
0
&amp;gt;&amp;gt;&amp;gt; next&lt;span class="o"&gt;(&lt;/span&gt;gen&lt;span class="o"&gt;)&lt;/span&gt;
1
&amp;gt;&amp;gt;&amp;gt; next&lt;span class="o"&gt;(&lt;/span&gt;gen&lt;span class="o"&gt;)&lt;/span&gt;
1
&amp;gt;&amp;gt;&amp;gt; next&lt;span class="o"&gt;(&lt;/span&gt;gen&lt;span class="o"&gt;)&lt;/span&gt;
2
&amp;gt;&amp;gt;&amp;gt; next&lt;span class="o"&gt;(&lt;/span&gt;gen&lt;span class="o"&gt;)&lt;/span&gt;
3
&amp;gt;&amp;gt;&amp;gt; next&lt;span class="o"&gt;(&lt;/span&gt;gen&lt;span class="o"&gt;)&lt;/span&gt;
5
&amp;gt;&amp;gt;&amp;gt; next&lt;span class="o"&gt;(&lt;/span&gt;gen&lt;span class="o"&gt;)&lt;/span&gt;
8
&amp;gt;&amp;gt;&amp;gt; next&lt;span class="o"&gt;(&lt;/span&gt;gen&lt;span class="o"&gt;)&lt;/span&gt;
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line 1, in &amp;lt;module&amp;gt;
StopIteration
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora quando chamamos a função &lt;span style="color: #000088;"&gt;next&lt;/span&gt;
com o objeto gerador como argumento, o corpo da função geradora é
executado até ela encontrar a declaração de um &lt;em&gt;&lt;span
style="color: #000088;"&gt;yield&lt;/span&gt;,&lt;/em&gt; &lt;span
style="color: #000088;"&gt;&lt;em&gt;return&lt;/em&gt;&lt;/span&gt; ou o fim da função ser atingido.
No caso de encontrar a declaração de um &lt;em&gt;yield&lt;/em&gt;, a expressão seguinte ao
&lt;em&gt;yield&lt;/em&gt; é retornado para o chamador, e o estado da função é salvo.
Quando a função &lt;span style="color: #000088;"&gt;next&lt;/span&gt; é chamada no
objeto gerador de Fibonacci, a variável &lt;span
style="color: #000000;"&gt;a&lt;/span&gt; &lt;span style="color: #000000;"&gt;está
ligado a 0&lt;/span&gt; e &lt;span style="color: #000000;"&gt;b está ligado a
1&lt;/span&gt;. A condição do &lt;span style="color: #000088;"&gt;&lt;em&gt;while&lt;/em&gt;&lt;/span&gt; é
verdadeira, de modo que a primeira declaração do loop &lt;em&gt;while&lt;/em&gt; é
executada, que passa a ser uma expressão &lt;span
style="color: #000088;"&gt;&lt;em&gt;yield&lt;/em&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Esta expressão retorna para o chamador o valor de a que passa a ser 0, e
suspende naquele ponto com todo o contexto local salvo. Pense nisso como
comer seu almoço em partes, e que em seguida você guarda ele pra
continuar a comer mais tarde. Você pode continuar comendo até seu almoço
se esgotar, e no caso de um gerador isto é a função obtendo a declaração
de um &lt;em&gt;return&lt;/em&gt; ou o fim do corpo da função. Quando a função &lt;span
style="color: #000088;"&gt;next&lt;/span&gt; é chamada no objeto Fibonacci
novamente, a execução é retomada na linha a, b = b, a+b e continua
executando normalmente até um &lt;span
style="color: #000088;"&gt;&lt;em&gt;yield&lt;/em&gt;&lt;/span&gt; ser encontrado novamente. E assim
continua até a condição do loop for false e uma exceção &lt;span
style="color: #660066;"&gt;StopIteration&lt;/span&gt; seja levantada, que é o
sinal que não há mais dados para gerar.&lt;/p&gt;
&lt;h3&gt;Expressões Geradoras&lt;/h3&gt;
&lt;p&gt;Em &lt;a href="http://indacode.com/python-comprehensions/" title="Python Comprehensions"&gt;Python
Comprehensions&lt;/a&gt;nós
discutimos sobre list comprehensions e como elas são formadas. Uma
desvantagem com list comprehensions é que os valores são todos
calculados de uma vez, independente se esses valores são necessários
naquele momento ou não. Isto pode algumas vezes consumir uma quantidade
excessiva de memória. A &lt;a href="https://www.python.org/dev/peps/pep-0289/"&gt;&lt;strong&gt;PEP
289&lt;/strong&gt;&lt;/a&gt;propôs a expressão
geradora para resolver isto, e esta proposta foi aceita e adicionada a
linguagem. Expressões geradoras são como list comprehensions; a única
diferença é que os colchetes na list comprehensions são substituídos por
parênteses. Nós contrastamos uma list comprehension com uma expressão
geradora logo abaixo.&lt;/p&gt;
&lt;p&gt;Para gerar uma lista com o quadrado dos número de 0 e 10 usando list
comprehensions é feita da seguinte forma:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;i**2 &lt;span class="k"&gt;for&lt;/span&gt; i in range&lt;span class="o"&gt;(&lt;/span&gt;10&lt;span class="o"&gt;)]&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; squares
&lt;span class="o"&gt;[&lt;/span&gt;0, 1, 4, 9, 16, 25, 36, 49, 64, 81&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nós poderíamos usar uma expressão geradora, tal como mostrada abaixo, no
lugar de uma list comprehension:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;i**2 &lt;span class="k"&gt;for&lt;/span&gt; i in range&lt;span class="o"&gt;(&lt;/span&gt;10&lt;span class="o"&gt;))&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; squares
&amp;lt;generator object &amp;lt;genexpr&amp;gt; at 0x7f8c48ec8cd0&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nós podemos então acessar os valores do gerador usando um loop &lt;em&gt;for&lt;/em&gt; ou
o método &lt;span style="color: #000088;"&gt;next&lt;/span&gt;, como mostrado
abaixo. Cada valor é computado sob demanda, ou seja, só quando
requisitado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="k"&gt;for&lt;/span&gt; square in squares:
            print square
0
1
4
9
16
25
36
49
64
81
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;De que servem esses geradores?&lt;/h3&gt;
&lt;p&gt;Geradores Python fornecem a base para &lt;strong&gt;avaliação preguiçosa&lt;/strong&gt; e
&lt;strong&gt;cálculo sob demanda&lt;/strong&gt; em Python. Avaliação preguiçosa é uma parte
integral do processamento de fluxo (processamento de grande quantidades
de dados). Por exemplo, imagine que nós queremos criar uma quantidade
indeterminada de números Fibonacci, isto não seria possível com uma
abordagem sem geradores, porque nós temos que definir a quantidade de
números que precisamos ou entrar num loop infinito. Por outro lado,
adotando a abordagem dos geradores, fazer isso se torna trivial; nós
apenas temos que chamar o &lt;span style="color: #000088;"&gt;next&lt;/span&gt; para
pegar o próximo número Fibonacci, sem se preocupar sobre onde ou quando
o fluxo de números terminam.&lt;/p&gt;
&lt;p&gt;Um tipo mais prático de processamento de fluxo é manipulando grandes
arquivos de dados tais como arquivos de log. Geradores fornecem métodos
eficientes para processamento desses dados, onde só algumas partes do
arquivo são tratadas em um ponto no tempo. (&lt;a href="http://www.dabeaz.com/generators-uk/GeneratorsUK.pdf"&gt;David
Beazley&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Geradores também podem ser usados para substituir callbacks (&lt;em&gt;retorno de
chamada de funções&lt;/em&gt;). Ao invés de passar um callback para uma função, a
função pode ceder o controle (&lt;em&gt;yield control&lt;/em&gt;) para o chamador quando
ele precisar informar algo ao chamador. O chamador pode então invocar
uma função que teria sido usada como callback. Isto libera a função
principal da obrigação de saber sobre o callback.&lt;/p&gt;
&lt;p&gt;Em um nível mais avançado, geradores podem ser usados para implementar
concorrência (&lt;a href="http://www.dabeaz.com/finalgenerator/"&gt;David Beazley&lt;/a&gt;).
Quando um gerador &lt;span style="color: #000000;"&gt;&lt;em&gt;yields&lt;/em&gt;&lt;/span&gt; cede o
controle para o chamador, o chamador pode então ir em frente e chamar
outro gerador, simulando concorrência.&lt;/p&gt;
&lt;p&gt;O que listamos acima são apenas algumas das aplicabilidades dos
geradores Python. Em um post futuro, nós discutiremos novas adições ao
gerador Python que permitem um chamador enviar valores para o gerador,
bem como alguns usos avançados de geradores.&lt;/p&gt;
&lt;h3&gt;Leitura complementar&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-0255/"&gt;PEP 255 – Simple Generators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-0289/"&gt;PEP 289 – Generator Expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.dabeaz.com/finalgenerator/FinalGenerator.pdf"&gt;Generators: The Final Frontier by David Beazley&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/tutorial/classes.html#generators"&gt;Python Tutorials - Generators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/tutorial/classes.html#generator-expressions"&gt;Python Tutorials - Generator Expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/tutorial/classes.html#iterators"&gt;Python Tutorials - Iterators&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://dunderlabs.github.io/pages/pythonista-intermediario.html"&gt;Clique aqui para voltar para a tabela de conteúdo.&lt;/a&gt;&lt;/p&gt;</summary><category term="python"></category><category term="python iterators"></category><category term="generators"></category><category term="translations"></category></entry><entry><title>Python Comprehensions</title><link href="https://dunderlabs.github.io/python-comprehensions.html" rel="alternate"></link><updated>2015-01-30T02:25:00-03:00</updated><author><name>Patrick Mazulo</name></author><id>tag:dunderlabs.github.io,2015-01-30:python-comprehensions.html</id><summary type="html">&lt;p&gt;&lt;img alt="Créditos da imagem" src="https://dunderlabs.github.io/images/posts/list1.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Créditos da imagem: &lt;a href="https://datasciencelab.wordpress.com/2014/01/08/list-comprehension-in-python/"&gt;https://datasciencelab.wordpress.com/2014/01/08/list-comprehension-in-python/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python comprehensions são construções sintáticas que permitem que
sequências sejam construídas a partir de outras sequências de forma
clara e concisa. Existem três tipo de Python comprehensions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;list comprehensions,&lt;/li&gt;
&lt;li&gt;set comprehenscions, e&lt;/li&gt;
&lt;li&gt;dict comprehensions.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Construções de list comprehensions tem sido parte do Python desde a
versão 2.0, enquanto set e dict comprehensions só a partir do Python
2.7.&lt;/p&gt;
&lt;h3&gt;List Comprehensions&lt;/h3&gt;
&lt;p&gt;List comprehensions são de longe a construção de comprehensions mais
popular. List comprehensions fornecem uma maneira concisa de criar uma
nova lista de elementos que satisfazem uma dada condição a partir de um
&lt;strong&gt;iterável&lt;/strong&gt;. Um &lt;strong&gt;iterável&lt;/strong&gt; é qualquer construção python que possa ser
posto/iterado em um loop. Exemplos de iteráveis embutidos incluem lists,
sets e tuples. O exemplo abaixo da &lt;a href="https://docs.python.org/2/tutorial/datastructures.html"&gt;Documentação
Python&lt;/a&gt; ilustra
o uso de list comprehensions. Neste exemplo, nós queremos criar uma
lista com os números elevado ao quadrado de 0 a 10. Uma maneira
convencional de criar esta lista sem comprehensions é mostrada abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span class="k"&gt;for&lt;/span&gt; x in range&lt;span class="o"&gt;(&lt;/span&gt;10&lt;span class="o"&gt;)&lt;/span&gt;:
...     squares.append&lt;span class="o"&gt;(&lt;/span&gt;x**2&lt;span class="o"&gt;)&lt;/span&gt;
...
&amp;gt;&amp;gt;&amp;gt; squares
&lt;span class="o"&gt;[&lt;/span&gt;0, 1, 4, 9, 16, 25, 36, 49, 64, 81&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A mesma lista pode ser criada de uma maneira mais concisa usando list
comprehensions, como abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;x**2 &lt;span class="k"&gt;for&lt;/span&gt; x in range&lt;span class="o"&gt;(&lt;/span&gt;10&lt;span class="o"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A versão com comprehension parece ser obviamente mais clara e concisa do
que o método convencional.&lt;/p&gt;
&lt;p&gt;De acordo com a documentação python, &lt;strong&gt;uma list comprehension consiste
de colchetes contendo uma expressão seguida por uma ou mais cláusulas 
&lt;em&gt;for&lt;/em&gt; ou cláusulas &lt;em&gt;if,&lt;/em&gt; como mostrado abaixo&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;[expression for item1 in iterable1 if condition1 
            for item2 in iterable2 if condition2
            ...
            for itemN in iterableN if conditionN ]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O resultado é uma nova lista resultante da avaliação da expressão no
contexto das cláusulas &lt;em&gt;for&lt;/em&gt; e &lt;em&gt;if&lt;/em&gt; em seguida. Por exemplo, para criar
uma lista com o quadrado dos números pares entre 0 e 10, a seguinte
comprehension é usada:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;even_squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;i**2 &lt;span class="k"&gt;for&lt;/span&gt; i in range&lt;span class="o"&gt;(&lt;/span&gt;10&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; i % &lt;span class="nv"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; 0&lt;span class="o"&gt;]&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; even_squares
&lt;span class="o"&gt;[&lt;/span&gt;0, 4, 16, 36, 64&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A expressão i**2 é computada no contexto da cláusula &lt;em&gt;for&lt;/em&gt; que itera
sobre os número de 0 a 10, e a cláusula &lt;em&gt;if&lt;/em&gt;  filtra os números não
pares.&lt;/p&gt;
&lt;h3&gt;Loops &lt;em&gt;for&lt;/em&gt; aninhandos numa list comprehensions&lt;/h3&gt;
&lt;p&gt;List comprehensions também podem ser usadas com múltiplos ou loops &lt;em&gt;for&lt;/em&gt;
aninhados. Considerando, por exemplo, o simples fragmento de código
mostrado logo abaixo que cria uma tupla de pares de números extraídos
das duas sequências apresentadas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;combs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span class="k"&gt;for&lt;/span&gt; x in &lt;span class="o"&gt;[&lt;/span&gt;1,2,3&lt;span class="o"&gt;]&lt;/span&gt;:
...     &lt;span class="k"&gt;for&lt;/span&gt; y in &lt;span class="o"&gt;[&lt;/span&gt;3,1,4&lt;span class="o"&gt;]&lt;/span&gt;:
...         &lt;span class="k"&gt;if&lt;/span&gt; x !&lt;span class="o"&gt;=&lt;/span&gt; y:
...             combs.append&lt;span class="o"&gt;((&lt;/span&gt;x, y&lt;span class="o"&gt;))&lt;/span&gt;
...
&amp;gt;&amp;gt;&amp;gt; combs
&lt;span class="o"&gt;[(&lt;/span&gt;1, 3&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;1, 4&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;2, 3&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;2, 1&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;2, 4&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;3, 1&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;3, 4&lt;span class="o"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O código acima pode ser reescrito de uma maneira mais simples e concisa,
como demonstrado abaixo usando list comprehensions.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="o"&gt;[(&lt;/span&gt;x, y&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; x in &lt;span class="o"&gt;[&lt;/span&gt;1,2,3&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; y in &lt;span class="o"&gt;[&lt;/span&gt;3,1,4&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; x !&lt;span class="o"&gt;=&lt;/span&gt; y&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[(&lt;/span&gt;1, 3&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;1, 4&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;2, 3&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;2, 1&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;2, 4&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;3, 1&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;3, 4&lt;span class="o"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;É importante levar em consideração em como a ordem dos loops &lt;em&gt;for&lt;/em&gt; foi
usada nesta list comprehension. A observação cuidadosa dos trechos de
código usando comprehension e aquele sem comprehension mostra que a
ordem dos loops &lt;em&gt;for&lt;/em&gt; na comprehension seguiu a mesma ordem, como se
tivesse sido escrita sem comprehensions. O mesmo se aplica para loops
&lt;em&gt;for&lt;/em&gt; aninhados com profundidade maior que 2 loops.&lt;/p&gt;
&lt;h3&gt;List Comprehensions Aninhadas&lt;/h3&gt;
&lt;p&gt;List comprehensions também podem ser aninhadas. Considere o seguinte
exemplo extraído da documentação python, de uma matriz 3x4 implementada
como uma lista de 3 listas de tamanho 4:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;matrix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
...     &lt;span class="o"&gt;[&lt;/span&gt;1, 2, 3, 4&lt;span class="o"&gt;]&lt;/span&gt;,
...     &lt;span class="o"&gt;[&lt;/span&gt;5, 6, 7, 8&lt;span class="o"&gt;]&lt;/span&gt;,
...     &lt;span class="o"&gt;[&lt;/span&gt;9, 10, 11, 12&lt;span class="o"&gt;]&lt;/span&gt;,
... &lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Transposição é uma operação das matrizes que cria uma nova matriz a
partir de uma velha, usando as linhas da matriz velha como as colunas da
matriz nova, e as colunas da matriz velha como as linhas da matriz nova.
As linhas e colunas da matriz precisam ser transpostas usando a seguinte
list comprehension:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="o"&gt;[[&lt;/span&gt;row&lt;span class="o"&gt;[&lt;/span&gt;i&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; row in matrix&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; i in range&lt;span class="o"&gt;(&lt;/span&gt;4&lt;span class="o"&gt;)]&lt;/span&gt;
&lt;span class="o"&gt;[[&lt;/span&gt;1, 5, 9&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="o"&gt;[&lt;/span&gt;2, 6, 10&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="o"&gt;[&lt;/span&gt;3, 7, 11&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="o"&gt;[&lt;/span&gt;4, 8, 12&lt;span class="o"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O código acima é equivalente ao trecho dado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;transposed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span class="k"&gt;for&lt;/span&gt; i in range&lt;span class="o"&gt;(&lt;/span&gt;4&lt;span class="o"&gt;)&lt;/span&gt;:
...     transposed.append&lt;span class="o"&gt;([&lt;/span&gt;row&lt;span class="o"&gt;[&lt;/span&gt;i&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; row in matrix&lt;span class="o"&gt;])&lt;/span&gt;
...
&amp;gt;&amp;gt;&amp;gt; transposed
&lt;span class="o"&gt;[[&lt;/span&gt;1, 5, 9&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="o"&gt;[&lt;/span&gt;2, 6, 10&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="o"&gt;[&lt;/span&gt;3, 7, 11&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="o"&gt;[&lt;/span&gt;4, 8, 12&lt;span class="o"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Set comprehensions&lt;/h3&gt;
&lt;p&gt;Set comprehensions foram adicionado ao python na versão 2.7. Em set
comprehensions, nós usamos chaves ao invés de colchetes. Por exemplo,
para criar o set do quadrado de todos os números entre 0 e 10, o
seguinte set comprehension pode ser usado em vez do loop normal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;i**2 &lt;span class="k"&gt;for&lt;/span&gt; i in range&lt;span class="o"&gt;(&lt;/span&gt;10&lt;span class="o"&gt;)}&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; x
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="o"&gt;([&lt;/span&gt;0, 1, 4, 81, 64, 9, 16, 49, 25, 36&lt;span class="o"&gt;])&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Dict Comprehension&lt;/h3&gt;
&lt;p&gt;Assim como set comprehensions, dict comprehensions foram adicionados ao
python na versão 2.7. Abaixo nós criamos um mapping, sendo as chaves os
números entre 0 e 10, e os valores seus quadrados, usando dict
comprehensions.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;i:i**2 &lt;span class="k"&gt;for&lt;/span&gt; i in range&lt;span class="o"&gt;(&lt;/span&gt;10&lt;span class="o"&gt;)}&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; x
&lt;span class="o"&gt;{&lt;/span&gt;0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Leitura complementar&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/tutorial/datastructures.html"&gt;Documentação Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python Essential Reference, Fourth Edition&lt;/li&gt;
&lt;li&gt;&lt;a href="http://python-3-patterns-idioms-test.readthedocs.org/en/latest/Comprehensions.html"&gt;Python 3 Patterns, Recipes and Idioms&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href="https://dunderlabs.github.io/pages/pythonista-intermediario.html"&gt;Clique aqui para voltar para a tabela de conteúdo.&lt;/a&gt;&lt;/p&gt;</summary><category term="python"></category><category term="iterators"></category><category term="list comprehensions"></category><category term="translations"></category></entry><entry><title>Corrida Inglesa</title><link href="https://dunderlabs.github.io/corrida-inglesa.html" rel="alternate"></link><updated>2015-01-28T17:07:00-03:00</updated><author><name>Patrick Mazulo</name></author><id>tag:dunderlabs.github.io,2015-01-28:corrida-inglesa.html</id><summary type="html">&lt;p&gt;&lt;img alt="It's time to learn!" src="https://dunderlabs.github.io/images/posts/aprender_ingles.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Créditos da imagem: &lt;a href="http://wiseup.com/magazine/aprender-ingles"&gt;http://wiseup.com/magazine/aprender-ingles&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Saber inglês pra quem trabalha em TI além de ser mais do que necessário,
é essencial para sobreviver em meio ao mercado. Existem milhares de
motivos para isso, mas podemos resumir em apenas um: TODOS os materiais
mais atualizados, são feitos em inglês, e não existem muitas pessoas que
tenham tempo disponível o suficiente para traduzir tudo conforme o fluxo
de saída. Desse modo, não há outra maneira a não ser aprender inglês.&lt;/p&gt;
&lt;p&gt;Claramente você não precisar ter a dicção do &lt;a href="http://youtu.be/Mm4YFpO3y7Q?t=1m56s"&gt;rapper mais rápido do
mundo&lt;/a&gt;. Mas, no mínimo, ter a
capacidade suficiente para poder ler livros e artigos em inglês (mas
saber escrever, ouvir e falar também conta muito).&lt;/p&gt;
&lt;p&gt;Há alguns anos (sim, anos mesmo) que adio o estudo aprofundado do
inglês. Só aquele velho e maroto skimming/scanning com uma velha
ajudinha do Google Translate já me salvavam nos momentos que eu
precisava ler algo em inglês (e eram poucos esses momento). Mas, eu
finalmente ~~criei vergonha na cara ~~ vi que para que eu me tornasse o
ótimo profissional que eu quero ser, deveria sair da zona de conforto e
começar a estudar inglês &lt;strong&gt;pra valer!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Irei falar um pouco sobre essa minha experiência nesse processo de
aprendizado, mostrando quais métodos e técnicas eu estou usando para dar
aquele &lt;em&gt;up&lt;/em&gt; no inglês.&lt;/p&gt;
&lt;p&gt;Em meados de setembro de 2014, tomei essa decisão: vou estudar inglês
com o objetivo de me tornar fluente. Mas essa não seria a primeira vez
que eu iria tentar. Então o primeiro passo foi criar um
cronograma/roteiro diário que eu pudesse seguir, e por fim, tornar um
hábito. Há 1 mês atrás pesquisando sobre mudança de hábitos, acabei
encontrando artigos que falavam sobre a &lt;a href="http://www.antonioazevedo.com.br/archives/967"&gt;técnica dos 21 dias&lt;/a&gt;, que em resumo é:
Se você repetir determinadas ações diariamente em um determinado horário
durante 21 dias, as chances disso se tornar um hábito são
&lt;strong&gt;altíssimas.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Depois disso, consegui fechar um cronograma dividindo meu dia em
horários, e distribuindo entre eles os assuntos que eu iria estudar.
Finalizada essa parte, a próxima seria encontrar fontes de estudos para
acelerar o desempenho. Entrei num curso de inglês público da minha
cidade, e comecei a pesquisar por cursos no YouTube e plataformas de
ensino online. E é justamente sobre essas partes que vou falar agora.&lt;/p&gt;
&lt;p&gt;Ao pesquisar sobre plataformas online, acabei encontrando 2 ótimas. A
primeira foi o Duolingo. Na realidade, esse já era conhecido meu há uns
3 anos. Mas nunca fui realmente efetivo. Dessa vez, resolvi explorar
tudo o que ele poderia me proporcionar. E o resultado?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Em 4 meses (de setembro-janeiro), eu nunca havia aprendido
    tanto inglês. Posso até dizer que nesse tempo, aprendi o que nunca
    aprendi em 4 anos de ensino médio-técnico.&lt;/li&gt;
&lt;li&gt;Consegui melhorar todos os campos: writing, reading, listening
    and speaking.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;O &lt;a href="http://www.duolingo.com"&gt;Duolingo&lt;/a&gt; tem uma metodologia muito boa. Ele
é uma plataforma de ensino gamificada, com rank de pontuação entre você
e seus amigos. Se você possui um smartphone, pode instalá-lo, e assim
ele vai lembrar você diariamente para estudar um pouco. Além de tudo
isso, Duolingo também tem o que é chamado de
&lt;a href="https://www.duolingo.com/translations"&gt;imersão&lt;/a&gt;que nada mais é do que
uma seção do site onde você pode traduzir artigos, e ganhar mais pontos
por isso. A medida que você traduz, e que consegue boas aprovações das
suas traduções, você também passa de nível. Uma ótima vantagem dele
também é que ele conta com uma ótima jogada de interação de usuários. Já
fiz alguns bons amigos por lá :)&lt;/p&gt;
&lt;p&gt;Em conjunto com ele, também estou usando o
&lt;a href="http://www.memrise.com/course/189580/curso-completo-de-ingles-full-audio/"&gt;Memrise&lt;/a&gt;,
que tem um curso em áudio (~~gigante~~) completo, que frisa
principalmente o writing, reading e listening. Também o indico
fortemente.&lt;/p&gt;
&lt;p&gt;No YouTube você também vai encontrar ótimos canais, que ensinam desde o
básico, até algumas conversações bem elaboradas.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/user/agoraeufaloingles"&gt;AgoraEuFalo&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Nesse canal, o Leonardo Leite posta vídeo aulas de inglês,
    lições de inglês em mp3 e gravações de situações reais.
    Muito bacana.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/user/autodidatasemingles/"&gt;Autodidatas em Inglês&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Além de dicas e vídeos ensinando inglês, o canal (que possui
    blog e fanpage no Facebook) posta materiais para download sobre
    inglês em todos níveis, desde os mais básicos possíveis até
    TOEFL e IELTS.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/user/ExpertSchool"&gt;Elen Fernandes Expert School Online&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;A Elen Fernandes sempre posta ótimos vídeo com dicas e macetes
    para aprimorar o aprendizado de inglês.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/user/philochko"&gt;American English n' culture with Philochko&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Este é um canal de um americano que ensina inglês, além de
    conversações cotidianas, de forma fácil e engraçada. Já é
    preciso ter um pouco de experiência no listening para poder
    compreender o que ele fala.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Existem diversos outros canais, mas esses 4 são os que eu mais tenho
utilizado.&lt;/p&gt;
&lt;p&gt;Mas tão importante quanto essas dicas, existe essa que é: praticar.
Entrando nessa questão, eu separo em 2 grupos:&lt;/p&gt;
&lt;p&gt;1º - Pessoas que querem ter um inglês bom o suficiente para poder ler e
escrever com facilidade.&lt;/p&gt;
&lt;p&gt;2º - Pessoas que além disso, também querem ter a facilidade de poder
conversar com outras pessoas nesse idioma.&lt;/p&gt;
&lt;p&gt;A próxima dica, vale para os 2 grupos.&lt;/p&gt;
&lt;p&gt;Uma ótima maneira de poder praticar e então chegar no nível desejado, é
&lt;strong&gt;traduzindo&lt;/strong&gt;. Isso mesmo, tradução.&lt;/p&gt;
&lt;p&gt;Ao trabalhar com tradução de textos, você estará trabalhando seu
writing, reading e também sua interpretação de texto. Você vai cada vez
mais se acostumando em ter contato com textos em inglês, e ter mais
facilidade em ler tais textos. Se você for da área de computação, como
eu, uma ótima maneira de fazer isso seria traduzindo documentações de
frameworks/bibliotecas, artigos daquele blog que você começou a
acompanhar. Vale tudo. Além de estar melhorando suas habilidade em
inglês, estará ajudando pessoas que ainda não estão no mesmo nível que
você :D&lt;/p&gt;
&lt;p&gt;A próxima dica, vale principalmente para o segundo grupo: falar. Fale em
inglês. Conhece algum amigo que seja muito bom em conversação? Peça para
que os próximos diálogos entre vocês sejam em inglês, e peça também que
ele o corrija quando necessário. Não há melhor maneira de melhorar sua
pronúncia, e tudo o que o speaking cobre, do que falando.&lt;/p&gt;
&lt;p&gt;Recentemente eu descobri um ótimo site, chamado
&lt;a href="http://italki.com/"&gt;italki&lt;/a&gt;. É uma plataforma onde você pode procurar e
contratar professores nativos do idioma que você quer aprender (no
italki você pode aprender diversos idiomas, além do inglês). Mas o
grande diferencial é o seguinte: na seção community, você pode procurar
por usuários que queiram aprender o seu idioma (português). Assim, esse
&lt;em&gt;partner&lt;/em&gt; lhe ajudará a aprender inglês, e você o ajudará a falar
português. Já consegui falar com 2 usuários, um da Romênia e outro do
Canadá. Estamos à combinar os dias das aulas.&lt;/p&gt;
&lt;p&gt;Por fim, este está sendo meu cronograma para aprender inglês, que estou
seguindo para conseguir alcançar meu objetivo. Você pode se identificar
em alguns pontos, e não em outros. Mas uma coisa é certa: o resultado só
virá com a ação das nossas atitudes. :)&lt;/p&gt;
&lt;p&gt;Deixe nos comentários como você tem feito para aprimorar seu inglês,
técnicas, plataformas e canais do YouTube usados nessa empreitada.&lt;/p&gt;
&lt;p&gt;Cheers!&lt;/p&gt;</summary><category term="english"></category><category term="tips"></category></entry></feed>