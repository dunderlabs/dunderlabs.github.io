<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>__labs__</title><link href="https://dunderlabs.github.io/" rel="alternate"></link><link href="https://dunderlabs.github.io/feeds/all.atom.xml" rel="self"></link><id>https://dunderlabs.github.io/</id><updated>2016-01-17T21:34:00-03:00</updated><entry><title>Série Django - Settings</title><link href="https://dunderlabs.github.io/serie-django-settings.html" rel="alternate"></link><updated>2016-01-17T21:34:00-03:00</updated><author><name>Patrick Mazulo</name></author><id>tag:dunderlabs.github.io,2016-01-17:serie-django-settings.html</id><summary type="html">&lt;p&gt;&lt;img alt="Créditos da imagem" src="https://dunderlabs.github.io/images/posts/django-settings.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;Créditos da imagem: &lt;a href="https://www.coderedcorp.com/blog/django-settings-for-multiple-environments/"&gt;https://www.coderedcorp.com/blog/django-settings-for-multiple-environments/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Estaremos iniciando uma nova série no blog. Mas vamos tentar fazer de uma maneira diferente. Ao invés de criarmos uma aplicação, vamos falar sobre o Django em si, seus componentes, como funcionam, como se interrelacionam e etc. O post de hoje na realidade é uma "transcrição" de um hangout que aconteceu há um tempo atrás, de um grupo de estudo no Telegram chamado "Django Group - Initial Steps". Caso tenha interesse, &lt;a href="http://pastebin.com/nwYyG7Ar"&gt;neste link&lt;/a&gt; vc terá informações sobre como se juntar ao grupo.&lt;/p&gt;
&lt;p&gt;Neste &lt;a href="https://youtu.be/m7PujnjPboU"&gt;hangout&lt;/a&gt; em questão falamos sobre o módulo &lt;code&gt;settings.py&lt;/code&gt;. Então, vamos discutir um pouco sobre ele aqui neste post.&lt;/p&gt;
&lt;p&gt;O &lt;code&gt;settings.py&lt;/code&gt; nada mais é do que um arquivo de configuração do Django que contém todas as configurações da sua instalação do framework. Esse arquivo nada mais é do que também um módulo Python com váriaveis de nível de módulo.&lt;/p&gt;
&lt;p&gt;Agora vamos percorrer suas linhas e entender o que cada uma faz.&lt;/p&gt;
&lt;p&gt;Ao início do arquivo, você terá uma string de múltiplas linhas, com informações relevantes, incluindo links da documentação para você depois ter mais informações sobre este arquivo.
Agora vamos trazer atenção para estas linhas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="n"&gt;BASE_DIR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O que está acontecendo? E para que serve esta variável &lt;code&gt;BASE_DIR&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;O módulo &lt;code&gt;os&lt;/code&gt; do Python nos fornece uma maneira portável de usar funcionalidades do sistema operacional. No caso estaremos usando para manipular caminhos de diretórios (paths).&lt;/p&gt;
&lt;p&gt;BASE_DIR é a variável que vai ter o caminho para o nosso projeto Django, e será usada mais a frente. Serve como uma maneira facilitada para que não tenhamos que trabalhar com caminho absoluto (absolute paths). Imagine que você salve o caminho para o seu projeto com o caminho absoluto como  &lt;code&gt;BASE_DIR = '/home/&amp;lt;user&amp;gt;/dev/django_projects/my_project'&lt;/code&gt;, e por algum motivo tenha que mudar seu projeto para outra máquina. Quanta dor de cabeça seria para mudar todos os arquivos onde você precise desse caminho? Pois bem, o settings, ao iniciar o projeto, já vem com uma abordagem bem bacana para facilitar e nos livrar desse imenso trabalho.&lt;/p&gt;
&lt;p&gt;Mas para entender melhor vamos pedaço por pedaço.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__file__&lt;/code&gt; é um atributo do módulo atual que representa o nome do arquivo. Faça um teste: salve um arquivo .py apenas com um &lt;code&gt;print(__file__)&lt;/code&gt; e execute-o para ver o que será printado na tela.
Este vai ser o ponto de partida para descobrirmos o restante do caminho para o projeto.
Agora vamos realizar as chamadas dos métodos de dentro para fora, para podermos ver como vamos conseguir realizar tal façanha.&lt;/p&gt;
&lt;p&gt;A chamada mais interna é esta: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O &lt;code&gt;abspath&lt;/code&gt; vai nos retornar uma versão absoluta e normalizada do caminho deste arquivo (arquivo este disponibilizado pelo &lt;code&gt;__file__&lt;/code&gt;, lembra?). Digamos que na minha máquina eu tenha um projeto django chamado "django_project_1_9". O &lt;code&gt;abspath&lt;/code&gt; retornaria o seguinte caminho:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/home/mazulo/dev/web/django_projects/django_project_1_9/django_project_1_9/settings.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Perceba que ao final do arquivo nós temos o próprio arquivo &lt;code&gt;settings.py&lt;/code&gt;. Pois bem, o resultado desta chamada vai ser imediatamente jogado para a chamada mais externa, que no caso é o:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O &lt;code&gt;dirname&lt;/code&gt; vai retorna o nome do diretório pai do caminho passado ao diretório. Vai ser o primeiro elemento do par retornado ao passar este path para a função &lt;code&gt;os.path.split()&lt;/code&gt;. O resultado será:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/home/mazulo/dev/web/django_projects/django_project_1_9/django_project_1_9
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note que ele apenas retirou o nome do arquivo &lt;code&gt;settings.py&lt;/code&gt;. Este é o diretório onde está o arquivo &lt;code&gt;settings.py&lt;/code&gt;, ainda não é a raiz do nosso projeto, nosso atual objetivo. O resultado dessa chamada será então jogado como parâmetro para a última função encadeada:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Usamos novamente o &lt;code&gt;dirname&lt;/code&gt; para pegar o diretório pai. Uma vez o último diretório era onde está armazenado o settings, acima dele teremos a raiz do nosso projeto, onde também está o arquivo &lt;code&gt;manage.py&lt;/code&gt;. E é exatamente isso que será retornado e atribuído para a variável &lt;code&gt;BASE_DIR&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/home/mazulo/dev/web/django_projects/django_project_1_9
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pronto, aí está o caminho para a raiz do nosso projeto sendo setada de maneira dinâmica. Agora, independente de quantas vezes trocarmos nosso projeto de pasta/máquina, este caminho estará funcionando perfeitamente.&lt;/p&gt;
&lt;p&gt;Seguindo em frente teremos o &lt;code&gt;DEBUG&lt;/code&gt;. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sua função basicamente é mostrar informações detalhadas em uma página sobre o erro ocorrido. Lembra daquela página amarela?&lt;/p&gt;
&lt;p&gt;&lt;img alt="Exemplo da página de erro" src="https://dunderlabs.github.io/images/posts/django_page_error.png" /&gt;&lt;/p&gt;
&lt;p&gt;Mas não somente na documentação, como em qualquer post você vai encontrar o seguinte conseglho: &lt;strong&gt;NUNCA&lt;/strong&gt; faça deploy de um sistema com o modo &lt;code&gt;DEBUG&lt;/code&gt; ligado. &lt;strong&gt;NUNCA&lt;/strong&gt;. O motivo é que nessa tela de erro, junto com o traceback do erro, são mostradas muitos metadados sobre o seu ambiente, assim como o que está definido no seu settings. Então, fica dado o recado: &lt;strong&gt;NUNCA&lt;/strong&gt; &lt;em&gt;faça deploy de um sistema com o modo &lt;code&gt;DEBUG&lt;/code&gt; ligado.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Logo após a declaração do &lt;code&gt;BASE_DIR&lt;/code&gt;, teremos o &lt;code&gt;ALLOWED_HOSTS&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ALLOWED_HOSTS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O &lt;code&gt;ALLOWED_HOSTS&lt;/code&gt; é uma lista de strings representando o host/nome de domínio que o projeto Django pode servir. Serve como uma medida de segurança para impedir que um invasor possa realizar certos tipos de ataque (evenenamento de cache, disparo de e-mails de redefinição de senha contendo links para hosts maliciosos e etc).&lt;/p&gt;
&lt;p&gt;Seguindo em frente teremos uma das mais conhecidas variáveis deste módulo, e primeiramente modificadas ao início de um projeto: &lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Application definition&lt;/span&gt;

&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.admin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.auth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.contenttypes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.sessions&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.messages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.staticfiles&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;myapp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt; é uma lista de strings designando todas as aplicações que estão habilitadas nesta instalação do Django. Cada string deve ser um caminho Python (com pontos, algo como 'module.class') para:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Uma classe de configuração de aplicação, ou&lt;/li&gt;
&lt;li&gt;Um pacote contendo uma aplicação (o caso daquele 'myapp')&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Logo após teremos o &lt;code&gt;MIDDLEWARE_CLASSES&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;MIDDLEWARE_CLASSES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.middleware.security.SecurityMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.sessions.middleware.SessionMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.middleware.common.CommonMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.middleware.csrf.CsrfViewMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.auth.middleware.AuthenticationMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.auth.middleware.SessionAuthenticationMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.messages.middleware.MessageMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.middleware.clickjacking.XFrameOptionsMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O &lt;code&gt;MIDDLEWARE_CLASSES&lt;/code&gt; é uma lista de classes Middleware que serão usadas no seu projeto Django. Middleware na realidade é um framework do Django, que tem um conjunto de classes que servem como "gatilhos" para processar e modificar request/response. Cada componente é responsável por fazer alguma coisa em específico. Por exemplo, é por causa do &lt;code&gt;'django.contrib.auth.middleware.AuthenticationMiddleware'&lt;/code&gt; que você consegue ter acesso ao usuário da requisição (&lt;code&gt;request.user&lt;/code&gt;, para ver o código do Django responsável por isso, &lt;a href="https://github.com/django/django/blob/master/django/contrib/auth/middleware.py#L22"&gt;clique aqui&lt;/a&gt;), e também ao dicionário session (&lt;code&gt;request.session&lt;/code&gt;), tendo a classe &lt;code&gt;'django.contrib.sessions.middleware.SessionMiddleware'&lt;/code&gt; como responsável por isso. A ordem em que está configurado realmente importa, porque um middleware pode depender de outro. Por exemplo os que citamos aqui: a classe &lt;code&gt;AuthenticationMiddleware&lt;/code&gt; armazena o usuário na sessão, então ele deve rodar depois do &lt;code&gt;SessionMiddleware&lt;/code&gt;. Tudo beleza? Próximo, então.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TEMPLATES&lt;/code&gt; é uma lista de configuraçẽs para todas as engines de templates a serem usadas pelo Django. Cada item da lista é um dicionário contendo as opções para uma única engine. Neste dicionário teremos as seguintes chaves para sua configuração:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;TEMPLATES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;BACKEND&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django.template.backends.django.DjangoTemplates&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;DIRS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;templates&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),],&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;APP_DIRS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;OPTIONS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;context_processors&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;django.template.context_processors.debug&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;django.template.context_processors.request&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;django.contrib.auth.context_processors.auth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;django.contrib.messages.context_processors.messages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;BACKEND&lt;/code&gt;: o backend/engine que será usado para renderizar os templates. Por padrão é usado o &lt;code&gt;DjangoTemplates&lt;/code&gt;, mas você pode trocar e usar o &lt;code&gt;Jinja2&lt;/code&gt; no lugar, que também já vem por padrão. Você também pode usar alguma outra engine de terceiros, basta indicar o caminho completo: &lt;code&gt;'mypackage.whatever.Backend'&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DIRS&lt;/code&gt;: Diretórios onde a engine vai procurar por arquivos de templates, em ordem de pesquisa.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;APP_DIRS&lt;/code&gt;: Valor booleano que vai indicar se a engine deve procurar por arquivos de templates dentro das aplicações instaladas no projeto.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;OPTIONS&lt;/code&gt;: Um dicionário que servirá como parâmetros extras para passar ao backend do template. Esses parâmetros podem variar dependendo do backend. Por padrão virá apenas com apenas uma chave-valor, chamado &lt;code&gt;context_processors&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;context_processors&lt;/code&gt; é uma lista de objetos chamáveis que são usados para popular o contexto no objeto &lt;code&gt;RequestContext&lt;/code&gt;. Esses chamáveis recebem um objeto request como argumento e retornam um dicionário de item para serem incorporados no contexto.&lt;/p&gt;
&lt;p&gt;Vamos aos &lt;code&gt;WSGI_APPLICATION&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;WSGI_APPLICATION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django_project_1_9.wsgi.application&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;É o caminho Python completo para o objeto WSGI da aplicação que os servidores built-in (&lt;code&gt;runserver&lt;/code&gt;, por exemplo) do Django vão usar. Ao executar o &lt;code&gt;django-admin.py startproject&lt;/code&gt;, o comando vai criar um arquivo &lt;code&gt;wsgi.py&lt;/code&gt; simples com um &lt;code&gt;application&lt;/code&gt; chamável e apontar essa configuração para essa &lt;code&gt;application&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Agora chegamos em outro também muito importante, o &lt;code&gt;DATABASES&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Database&lt;/span&gt;
&lt;span class="c"&gt;# https://docs.djangoproject.com/en/1.9/ref/settings/#databases&lt;/span&gt;

&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django.db.backends.sqlite3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;db.sqlite3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nada mais é do que um dicionário de dicionários (dicionário aninhado) onde cada dicionário contém as configurações para uso de um banco de dados, possibilitando assim o uso de múltiplos banco num mesmo projeto. A configuração mais simples para esta variável encontra-se no &lt;code&gt;default&lt;/code&gt; gerado pelo &lt;code&gt;django-admin.py&lt;/code&gt; (snippet acima).&lt;/p&gt;
&lt;p&gt;Seguindo em frente teremos o &lt;code&gt;AUTH_PASSWORD_VALIDATORS&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Password validation&lt;/span&gt;
&lt;span class="c"&gt;# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators&lt;/span&gt;

&lt;span class="n"&gt;AUTH_PASSWORD_VALIDATORS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django.contrib.auth.password_validation.UserAttributeSimilarityValidator&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django.contrib.auth.password_validation.MinimumLengthValidator&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django.contrib.auth.password_validation.CommonPasswordValidator&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django.contrib.auth.password_validation.NumericPasswordValidator&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;É uma lisa de validadores que são usados para checar a força da senha do usuário. O Django já disponibiliza alguns por padrão, mas nada o impede de criar os seus próprios e usar nesta configuração.&lt;/p&gt;
&lt;p&gt;Internacionalização:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Internationalization&lt;/span&gt;
&lt;span class="c"&gt;# https://docs.djangoproject.com/en/1.9/topics/i18n/&lt;/span&gt;

&lt;span class="n"&gt;LANGUAGE_CODE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;en-us&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;TIME_ZONE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;UTC&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;USE_I18N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="n"&gt;USE_L10N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="n"&gt;USE_TZ&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos por partes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;LANGUAGE_CODE&lt;/code&gt;: Uma string que representa o código do idioma para esta instalação. Esse código tem de estar de acordo com o &lt;a href="https://docs.djangoproject.com/en/1.9/topics/i18n/#term-language-code"&gt;formato padrão de ID de linguagem&lt;/a&gt;. Essa variável tem dois propósitos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Se o locale middleware não está em uso, ele vai decidir qual tradução vai ser servida para todos os usuários&lt;/li&gt;
&lt;li&gt;Se o locale middleware está ativado, ele fornece um idioma como fallback no caso do idioma escolhido pelo usuário não puder ser determinado, ou não for suportado pelo website.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;TIME_ZONE&lt;/code&gt;: Uma string representando a time zone para essa instalação. Essa não necessariamente vai ser a time zone do server. Um servidor pode servir múltiplos projetos Django, cada um com sua configuração de time zone separada. Ao usar &lt;code&gt;USE_TZ&lt;/code&gt; como &lt;code&gt;False&lt;/code&gt;, essa será a time zone na qual Django vai armazenar todos os horários (datetimes). Já quando o &lt;code&gt;USE_TZ&lt;/code&gt; está setado como &lt;code&gt;True&lt;/code&gt;, esse vai ser a time zone padrão que o Django vai usar para mostrar horários em templates, e interpretar datas/horários submetidos em forms.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;USE_TZ&lt;/code&gt;: Um boolean que indica se datas/horários serão reconhecidos pela timezone, ou não. Se for &lt;code&gt;True&lt;/code&gt;, então o Django vai usar esse reconhecimento de datetimes internamente. Caso contrário, Django vai usar datetimes no tempo local.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;USE_I18N&lt;/code&gt;: Um boolean indicando se o sistema de tradução do Django deve ser habilitado.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;USE_L10N&lt;/code&gt;: Indica se os dados devem ser formatados levando em consideração sua localização. Se for &lt;code&gt;True&lt;/code&gt;, Django vai mostrar números e datas usando o formato local atual.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;E por fim, ao final do &lt;code&gt;settings.py&lt;/code&gt; padrão gerado pelo &lt;code&gt;django-admin.py&lt;/code&gt;, teremos o &lt;code&gt;STATIC_URL&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Static files (CSS, JavaScript, Images)&lt;/span&gt;
&lt;span class="c"&gt;# https://docs.djangoproject.com/en/1.9/howto/static-files/&lt;/span&gt;

&lt;span class="n"&gt;STATIC_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/static/&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vai ser a URL usada para se referir aos arquivos estáticos localizados no &lt;code&gt;STATIC_ROOT&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Exemplo: "/static/" (como no snippet acima), ou "http://static.server.com/"&lt;/p&gt;
&lt;p&gt;Digamos que seus arquivos estáticos estão dentro do seu projeto Django, que seu &lt;code&gt;STATIC_URL&lt;/code&gt; é "static", e que seu site se chama "http://meusite.com". No seu projeto você tem uma pasta "staticfiles" onde há um diretório para imagens chamado "img/". Ao acessar pela web a URL de alguma imagem do seu site, o caminho seria algo como: &lt;code&gt;http://meusite.com/static/img/imagem.jpg&lt;/code&gt;. Sacou? :)&lt;/p&gt;
&lt;p&gt;Bom pessoal, por enquanto é isso. Ainda tem &lt;strong&gt;MUITA&lt;/strong&gt; coisa, que se eu fosse cobrir tornaria este post gigantescamente maior do que ficou hahaha. Caso tenha curiosidade, não esqueça de visitar a documentação.
E se você curtiu esse post, compartilhe com os amigos devs! :D&lt;/p&gt;
&lt;p&gt;Valeu pessoal, e até a próxima!&lt;/p&gt;
&lt;p&gt;Referências:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.9/topics/settings/"&gt;Documentação Django - settings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.djangobook.com/en/2.0/chapter17.html"&gt;Django Book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.9/_images/middleware.svg"&gt;Image how middleware works&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://agiliq.com/blog/2015/07/understanding-django-middlewares/"&gt;Understanding django middlewares&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/20957388/what-is-a-context-in-django"&gt;What is a context in django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.b-list.org/weblog/2006/jun/14/django-tips-template-context-processors/"&gt;Django tips: Template context processors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="python"></category><category term="django"></category><category term="django settings"></category><category term="web development"></category></entry><entry><title>O caminho do desenvolvedor web Python</title><link href="https://dunderlabs.github.io/o-caminho-do-desenvolvedor-web-python.html" rel="alternate"></link><updated>2015-03-17T14:13:00-03:00</updated><author><name>Patrick Mazulo</name></author><id>tag:dunderlabs.github.io,2015-03-17:o-caminho-do-desenvolvedor-web-python.html</id><summary type="html">&lt;p&gt;&lt;img alt="Créditos da imagem" src="https://dunderlabs.github.io/images/posts/dev_way2.png" /&gt;&lt;/p&gt;
&lt;p&gt;Créditos da imagem: &lt;a href="http://brianmcdonnell.github.io/pycon_ie_2013/#/"&gt;http://brianmcdonnell.github.io/pycon_ie_2013/#/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Do começo do ano passado para cá, acabei ficando bem ativo no
grupo Python Brasil do Facebook, sempre compartilhando coisas legais que
eu encontrava pela internet, e/ou respondendo perguntas que eu poderia
ajudar. Nesse meio tempo, uma das perguntas mais recorrentes que eu
tenho visto tem sido esta: &lt;strong&gt;O que eu devo fazer/estudar para
desenvolver para web com Python?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Numa das últimas vezes que eu vi uma dessas, eu acabei comentando (com
textão hahaha) a minha opinião acerca deste assunto, sobre qual seria
uma boa via para seguir. Mas pelo fato de, como falei anteriormente,
esta pergunta ser recorrente ~~e porque o comentário ficou enorme,~~ e o
Facebook ter um fluxo alto de threads fazendo com que perguntas fiquem
lá atrás rapidamente, eu resolvi transformar em um post.&lt;/p&gt;
&lt;p&gt;Aqui eu colocarei minha opinião, claro. E como tal é passível de
críticas. Logicamente que você pode não concordar com alguma parte, ou
por completo, ou quem sabe achar tudo bacana e querer testar. Mas, os
comentários estão ali pra isso :p deixe sua opinião sobre como foi pra
você caminhar por este percurso, ou o que achou das dicas ;)&lt;/p&gt;
&lt;p&gt;Sem mais delongas, vamos lá!&lt;/p&gt;
&lt;p&gt;Em algumas muitas vezes, esta pergunta sobre ser um desenvolvedor web
Python sempre vem acompanhada com alguma outra, como web e jogos, ou web
e desktop. Sobre isso, eu tenho o seguinte a falar:&lt;/p&gt;
&lt;p&gt;Primeiramente, eu lhe dou a dica de ver suas prioridades e objetivos.
Por exemplo, qual seu objetivo para aprender games com Python? Diversão?
Realmente se especializar e tentar fazer dele algo rentável e trabalhar
realmente neste ramo? Cada uma dessas áreas, jogos, web, destops e etc
requerem uma GRANDE quantidade de tempo, esforço e dedicação. Mas nada
lhe impede de estudá-las em simultâneo, porém, lhe dou a seguinte dica:
veja qual sua prioridade. Quer trabalhar e ganhar dinheiro com web? Pois
foque a maior parte do tempo em estudar isso, e uma pequena parcela do
tempo estudando jogos, para diversão. E assim vice-versa.&lt;/p&gt;
&lt;p&gt;Mas, levando em consideração o intuito de ser desenvolvedor web Python,
vamos falar agora sobre isso.&lt;/p&gt;
&lt;p&gt;Antes de tudo, tenha certeza de realmente conhecer Python, e não só
saber as coisas superficiais: "while, for, funções, objetos e etc". Mas
sim saber como cada uma dessas coisas funcionam. O que é uma função?
Como ela funciona? E objetos? O que acontece em um for? O que são
realmente classes? E metaclass?&lt;br /&gt;
Para isso, você pode contar com uma série de livros que podem lhe
ajudar. Entre eles tem o &lt;a href="http://www.diveintopython3.net/"&gt;Dive into Python
3&lt;/a&gt;, (disponíve online), onde você vai
aprender muita coisa bacana sobre Python. Conheço muitos bons devs
Python que começaram lendo esse livro. Temos também o &lt;a href="http://shop.oreilly.com/product/0636920027072.do"&gt;Python 3
Cookbook&lt;/a&gt; (compra
online), onde você vai poder aprofundar tudo que aprendeu no livro
anterior. Aqui no blog também temos materiais sobre Python, incluindo
uma série que estamos traduzindo que falam sobre o funcionamento de
algumas coisas da linguagem. &lt;a href="http://indacode.com/pythonista-intermediario/"&gt;Dá uma conferida lá
também&lt;/a&gt;. Além desses,
existem diversos outros livros e materiais que você pode usar, como o
curso &lt;a href="http://pycursos.com/python-para-zumbis/"&gt;Python para Zombies&lt;/a&gt;,
ministrado pelo professor Fernando Massanori (eu fiz esse curso, e achei
super bacana!). Existem ótimos blogs que contam com ótimos materiais,
como o &lt;a href="http://pythonclub.com.br/"&gt;Python Club&lt;/a&gt; e o &lt;a href="http://programeempython.blog.br/"&gt;Programe em
Python&lt;/a&gt;, dentre vários outros (sério,
são muitos).&lt;/p&gt;
&lt;p&gt;Claro que você não precisa ser um Guido Van Hossum, o modaFuckingFoda em
Python. Mas ter real conhecimento sobre a linguagem vai lhe ajudar
muito. Esse é o diferencial de um bom programador para um cara que só
programa. Beleza, mas para que vai servir isso?&lt;/p&gt;
&lt;p&gt;Mas sempre vem a(s) pergunta(s): Mas pra que estudar Python antes? Eu
não posso já começar a estudar o framework e aprender durante esse
estudo? Sim, pode. porém tendo esse conhecimento prévio da linguagem,
vai ficar muito mais fácil entender o funcionamento dos frameworks web.
Falo isso por experiência própria. Se parar pra pensar, os frameworks
com os quais você vai trabalhar são feitos em que linguagem? Python.
Então, como você vai poder usar todo o potencial do framework se não
souber bem a linguagem em que ele foi feita? É como querer construir um
carro sem conhecer as ferramentas necessárias para tal. Pode até
funcionar, mas o nível de código macarrônico/gambiarra pode ser muito
grande.&lt;/p&gt;
&lt;p&gt;Finalizando essa parte do Python, eu aconselho que você estude também
sobre conceitos web. O que é HTTP? E HTTPS? o que é uma request? E
response? O que é um server e client? Como eles interagem? Saber dessas
coisas é mais do que essencial, porque afinal você vai estar lidando com
web, né?&lt;/p&gt;
&lt;p&gt;&lt;img alt="Créditos da imagem" src="{filename}/images/dev_way3.jpg" /&gt;
Créditos da imagem: http://pt.slideshare.net/ricobl/python-e-django-na-globocom&lt;/p&gt;
&lt;p&gt;Bom, agora chega a hora de escolher qual framework. E essa é a parte
complicada da história, causa de infinitas flamewars na comunidade.
Existem diversos frameworks web Python, mas alguns acabam se destacando
entre os outros. Entre eles podemos citar: Django, Web2Py, Flask e
Bottle. Cada um tendo suas particularidades, prós e contras. Vamos falar
um pouco sobre alguns.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://flask.pocoo.org/docs/0.10/"&gt;Flask&lt;/a&gt;: é um leve framework web
    criado pelo austríaco &lt;a href="https://github.com/mitsuhiko" title="Perfil GitHub"&gt;Armin
    Ronacher&lt;/a&gt;, baseado no
    kit WSGI e Jinja2 na engine de templates. Flask é bem simples de
    iniciar, uma vez que em um único arquivo você pode criar um "Hello
    World" (que em outros frameworks poderiam levar mais código). Não
    mostrarei exemplos de código aqui, mas você pode ver estes 2
    tutoriais que mostram exemplos práticos de criação de webapps com
    Flask
    (&lt;a href="https://stormpath.com/blog/build-a-flask-app-in-30-minutes/"&gt;aqui&lt;/a&gt;
    e
    &lt;a href="https://realpython.com/blog/python/python-web-applications-with-flask-part-i/"&gt;aqui&lt;/a&gt;,
    e neste &lt;a href="http://mitsuhiko.pocoo.org/flask-pycon-2011.pdf"&gt;link&lt;/a&gt; você
    pode ler um slide do criador sobre o porque de ter criado Flask).&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com"&gt;Django&lt;/a&gt;: nasceu no outono de 2003,
    quando 2 programadores (Adrian Holovaty e Simon Willison) web do
    jornal Lawrence Journal-World começaram a usar Python para construir
    aplicações web. Ele foi lançado publicamente em 2005. Em junho de
    2008 foi formada a DSF (Django Software Foundation), que seria
    responsável por manter o Django dali em diante. Ele é amplamente
    usado no desenvolvimento web, e muito conhecido por suas "baterias
    inclusas", que são funcionalidades comuns no desenvolvimento web (
    authentication, URL routing, a sistema de template, um ORM e etc).
    Possui uma ótima documentação e comunidade, tanto quanto materiais
    de aprendizado. Dentre eles destaco o curso do Allisson de Azevedo,
    &lt;a href="https://www.youtube.com/playlist?list=PLfkVgm8720kzm6fmTekjtKyFcppyD4Ubd"&gt;Django para iniciantes&lt;/a&gt;,
    e o livro online &lt;a href="www.tangowithdjango.com/book17/"&gt;Tango with Django&lt;/a&gt;, bem como a própria
    documentação do framework.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.web2py.com/init/default/documentation"&gt;Web2Py&lt;/a&gt;: criado
    por uma comunidade de profissionais e professores do curso de
    Ciência da Computação na DePaul University, em Chicago, tendo como
    desenvolvedor lider Massimo DiPierro. Web2py foi originalmente
    projetado como uma ferramenta de ensino, com ênfase no fácil uso
    e desenvolvimento. Seu design foi inspirado no Ruby on Rails (e no
    Django), que é focado no rápido desenvolvimento e permite o design
    MVC (model-view-controller). Ele é menos verboso e sua sintaxe muito
    clara, o que torna a construção de webapps muito fácil; e também vem
    com algumas baterias inclusas, para algumas funcionalidades.
    &lt;a href="https://www.youtube.com/watch?v=6h73Tkco4pY"&gt;Aqui&lt;/a&gt; você vai
    encontrar um vídeo do Bruno Rocha falando sobre o desenvolvimento
    com web2py. E
    &lt;a href="http://pycursos.com/desenvolvimento-agil-para-web-com-web2py/"&gt;aqui&lt;/a&gt;
    você vai encontrar um curso (pago) pela PyCursos, da incrível
    Júlia Rizza. Super recomendo!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Agora eu irei focar em um deles, que no caso será o que eu estou
atualmente estudando.&lt;/p&gt;
&lt;p&gt;O 1ª framework que usei e tive contato foi o Django. Para aprender
Django, como falei antes e mostrei 1/3 da ponta do iceberg nos links,
nós temos &lt;strong&gt;MUITOS&lt;/strong&gt; materiais sobre Django. Diversos livros e vídeo
aulas podem ser encontrados. No youtube você vai encontrar MUITAS aulas
sobre Django. Em pt-br tem alguns hangouts dos episódios do Mutirão
Python que falam sobre desenvolvimento web com Django; e você encontrará
muitos bons cursos em inglês (como
&lt;a href="https://www.youtube.com/playlist?list=PLEsfXFp6DpzT5veidCTZ1mQriBX0Mu2LF"&gt;este&lt;/a&gt; e
&lt;a href="https://www.youtube.com/playlist?list=PLEsfXFp6DpzRgedo9IzmcpXYoSeDg29Tx"&gt;este&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Sobre livros eu recomendo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pro Django (inglês). Estou lendo ele atualmente, e é realmente muito
    bom! Ele inicia explicando conceitos do funcionamento da
    linguagem Python. Conceitos esses que são usados dentro
    do framework. Após assistir as aulas do Allisson, você poderia
    partir para esse livro aqui. E ao finalizar este, poderia passar
    para este outro chamado;&lt;/li&gt;
&lt;li&gt;Lightweight Django (inglês), que cobre a versão mais nova, 1.7.
    Porém esse é um pouco mais avançado.&lt;/li&gt;
&lt;li&gt;&lt;a href="www.tangowithdjango.com/book17/"&gt;Tango with Django&lt;/a&gt; (inglês bem
    simples): um livro online onde você estuda Django construindo
    uma aplicação.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Em acompanhamento aos estudos, crie um projeto e vá implementando de
acordo com o conhecimento que vai adquirindo. Pode ser qualquer coisa,
um sistema de cadastro de usuários, agenda de contatos, QUALQUER coisa.
Mas o importante é praticar todo santo dia. Ao finalizar essa timeline,
creio que você já estará em ótimas condições de conhecimento sobre web.
E a partir daí, já vai saber lidar com futuros desafios que encontrar
pela frente.&lt;/p&gt;
&lt;p&gt;Bom, após tudo isso cabe a você agora testar cada dica e ver com qual
framework você se identificou mais. Lembre-se que esse caminho não é
curto, na verdade podemos dizer que ele nunca acaba, porque você sempre
vai estar estudando sobre alguma coisa relacionada a web. Então dê-se o
tempo necessário até que você pegue no gancho, e comece e realmente
sentir as coisas fluindo. Pode ser bem complicado no começo, mas posso
lhe dizer que com o tempo só tende a melhorar :) Bons estudos!&lt;/p&gt;</summary><category term="python"></category><category term="web development"></category><category term="tips"></category><category term="web frameworks"></category></entry><entry><title>Classes e Objetos I</title><link href="https://dunderlabs.github.io/classes-e-objetos-i.html" rel="alternate"></link><updated>2015-03-16T11:58:00-03:00</updated><author><name>Patrick Mazulo</name></author><id>tag:dunderlabs.github.io,2015-03-16:classes-e-objetos-i.html</id><summary type="html">&lt;p&gt;&lt;img alt="Créditos para a imagem" src="https://dunderlabs.github.io/images/posts/python-model.png" /&gt;
Créditos para a imagem: &lt;a href="http://blog.invisivel.net/2012/04/10/pythons-object-model-explained/"&gt;http://blog.invisivel.net/2012/04/10/pythons-object-model-explained/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Em Python, tudo é um objeto. Classes fornecem o mecanismo para criar novos tipos de objetos. Neste tutorial, nós vamos deixar um pouco de lado o básico de classes e programação orientada a objetos e focaremos em tópicos que proveem um melhor entendimento deste paradigma de programação em Python. É assumido que nós estamos lidando com um novo estilo de classes. Existem classes Python que herdam da super classe &lt;em&gt;object&lt;/em&gt;.
Definindo Classes&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;A declaração &lt;span style="color: #000088;"&gt;class&lt;/span&gt; é usada para definir novas classes. Esta declaração define um conjunto de atributos, variáveis e métodos, que estão associados e compartilhados por uma coleção de instâncias de tal classe. Uma simples definição de classe é dada abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; 
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt; 
        &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;del_account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deposit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt; 

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;withdraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt; 

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inquiry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Definições de classe introduzem os seguintes novos objetos:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Objeto de classe&lt;/li&gt;
&lt;li&gt;Objeto de Instância&lt;/li&gt;
&lt;li&gt;Objeto de método&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Objetos de Classe&lt;/h2&gt;
&lt;p&gt;Quando uma definição de classe é encontrada durante a execução de um programa, um novo namespace é criado, e este serve como o namespace em que todas as variáveis de classe e definições de métodos se ligam. Note que este namespace não cria um novo escopo local que pode ser usado por métodos de classe, daí a necessidade por nomes completos ao acessar variáveis em métodos. A classe &lt;span style="color: #660066;"&gt;Account&lt;/span&gt; da seção anterior ilustra isto; métodos que tentam acessar a variável &lt;span style="color: #000000;"&gt;num_of_accounts&lt;/span&gt; devem usar o nome completo, &lt;span style="color: #660066;"&gt;Account&lt;/span&gt;.&lt;span style="color: #000000;"&gt;num_of_accounts&lt;/span&gt;, senão resulta em um erro como mostrado abaixo, quando o nome completo não é usado no método __init__:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; 
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt; 
        &lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;del_account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deposit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt; 

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;withdraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt; 

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inquiry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;acct&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Account&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;obi&amp;#39;&lt;/span&gt;, 10&lt;span class="o"&gt;)&lt;/span&gt;
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;&amp;quot;python&amp;quot;&lt;/span&gt;, line 1, in &amp;lt;module&amp;gt;
  File &lt;span class="s2"&gt;&amp;quot;python&amp;quot;&lt;/span&gt;, line 9, in __init__
UnboundLocalError: &lt;span class="nb"&gt;local &lt;/span&gt;variable &lt;span class="s1"&gt;&amp;#39;num_of_accounts&amp;#39;&lt;/span&gt; referenced before assignment
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No fim da execução de uma definição de classe, um objeto de classe é criado. O escopo que estava em vigor imediatamente antes que a definição de classe fosse criada é reintegrada, e o objeto classe é ligado aqui ao nome de classe dado no cabeçalho da definição de classe.&lt;/p&gt;
&lt;p&gt;Agora vejamos uma curiosidade aqui. Alguém pode perguntar: &lt;strong&gt;&lt;em&gt;se a classe criada é um objeto, então qual é a classe da classe objeto?&lt;/em&gt;&lt;/strong&gt;. De acordo com a filosofia de Python em que &lt;em&gt;tudo é um objeto&lt;/em&gt;, o objeto de classe, de fato, tem uma classe da qual é criada, e no novo tipo de classes de Python, esta é a classe &lt;span style="color: #000000;"&gt;type&lt;/span&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;Account&lt;span class="o"&gt;)&lt;/span&gt;
&amp;lt;class &lt;span class="s1"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Então, só pra confundir você um pouco mais, o tipo de um type (o tipo de Account), é type. A classe type é uma &lt;strong&gt;&lt;em&gt;metaclass&lt;/em&gt;&lt;/strong&gt;, uma classe criada para criar outras classes. Discutiremos sobre elas em um próximo tutorial.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Créditos para a imagem" src="{filename}/images/types_map.png" /&gt;
Créditos para a imagem: http://blog.invisivel.net/2012/04/10/pythons-object-model-explained/&lt;/p&gt;
&lt;p&gt;Objetos de classe suportam referência de atributo e instanciação.
Atributos são referenciados usando a sintaxe padrão de objetos, um ponto
seguido pelo nome do atributo: obj.name. Nomes de atributos válidos são
todos os nomes de variáveis e métodos presentes no namespace da classe,
quando o objeto de classe foi criado. Por exemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; Account.num_of_accounts
&amp;gt;&amp;gt;&amp;gt; 0
&amp;gt;&amp;gt;&amp;gt; Account.deposit
&amp;gt;&amp;gt;&amp;gt; &amp;lt;unbound method Account.deposit&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Instanciação de classe usa notação de função. Instanciação envolve
chamar o objeto de classe como uma função normal, sem parâmetros, como
mostrado abaixo para a classe Account:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; Account&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Depois da instanciação de um objeto de classe, um objeto de instância é
retornado, e o &lt;span style="color: #000000;"&gt;__init__&lt;/span&gt; que foi
definido na classe, é chamado com a instância como o primeiro argumento.
Isto executa qualquer inicialização definida pelo programador, como
inicializar os valores das variáveis de instância. No caso da classe
Account, o nome da conta e o balanço são setados, e o número de objetos
de instâncias é incrementado por mais 1.&lt;/p&gt;
&lt;h2&gt;Objetos de Instância&lt;/h2&gt;
&lt;p&gt;Se imaginarmos os objetos de classe como cortadores de biscoitos, então
os objetos de instância são os biscoitos que são os resultados de
instanciar objetos de classe. Atributos, dados e métodos: referência são
as únicas operações que são válidas em objetos de instância.&lt;/p&gt;
&lt;h2&gt;Método de objetos&lt;/h2&gt;
&lt;p&gt;Métodos de objeto são similares a objetos de função. Se &lt;span
style="color: #000000;"&gt;x&lt;/span&gt; é uma instância da classe &lt;span
style="color: #660066;"&gt;Account&lt;/span&gt;, &lt;span
style="color: #000000;"&gt;x.deposit&lt;/span&gt; é um exemplo de um método de
objeto. Métodos têm um argumento extra incluído em sua definição, o
argumento &lt;span style="color: #000088;"&gt;self&lt;/span&gt;. Este argumento
&lt;span style="color: #000088;"&gt;self&lt;/span&gt; se refere a uma instância da
classe. &lt;em&gt;Porque nós temos que passar uma instância como argumento para
um método?&lt;/em&gt; Isso é melhor ilustrado por uma chamada de método:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Account&lt;span class="o"&gt;()&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; x.inquiry&lt;span class="o"&gt;()&lt;/span&gt;
10
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O que exatamente acontece quando um método de instância é chamado? Você
pode ter notado que x.inquiry() acima é chamado sem um argumento, embora
a definição do método &lt;span style="color: #000000;"&gt;inquiry()&lt;/span&gt;
requeira o argumento &lt;span style="color: #000088;"&gt;self&lt;/span&gt;. O que
aconteceu com este argumento?&lt;/p&gt;
&lt;p&gt;O que tornam os métodos tão especiais é que o objeto no qual um método
está sendo chamado é passado como primeiro argumento da função. Em nosso
exemplo, a chamada para &lt;span style="color: #000000;"&gt;x.inquiry()&lt;/span&gt;
é exatamente equivalente a &lt;span
style="color: #660066;"&gt;Account&lt;/span&gt;.&lt;span
style="color: #000000;"&gt;f(x)&lt;/span&gt;. Geralmente, chamar um método com
uma lista de &lt;em&gt;n&lt;/em&gt; argumentos é equivalente a chamar a função
correspondente com uma lista de argumentos que é criada ao inserir o
objeto do método antes do primeiro argumento.&lt;/p&gt;
&lt;p&gt;O tutorial do Python diz:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Quando um atributo de instância é referenciado de que não é um
atributo de dados, sua classe é pesquisada. Se o nome indica um
atributo de classe válido que seja um objeto de função, um método de
objeto é criado ao embalar (ponteiros) o objeto de instância e o
objeto de função, ficando juntos em um objeto abstrato: este é o
método de objeto. Quando o método de objeto é chamado com uma lista de
argumentos, uma nova lista de argumento é construída a partir do
objeto de instância e da list de argumentos, e o objeto de função é
chamado com esta nova lista de argumentos.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;O acima citado se aplica para todos os método de objetos de instância,
incluindo o método &lt;span style="color: #000000;"&gt;__init__&lt;/span&gt;. O
argumento self não é, na verdade, uma palavra chave, e qualquer nome de
argumento pode ser usado como demonstrado na definição abaixo para a
classe Account:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; 
        &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt; 
        &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;del_account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deposit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt; 

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;withdraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt; 

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inquiry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; Account.num_of_accounts
&amp;gt;&amp;gt;&amp;gt; 0
&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Account&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;obi&amp;#39;&lt;/span&gt;, 0&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; x.deposit&lt;span class="o"&gt;(&lt;/span&gt;10&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; Account.inquiry&lt;span class="o"&gt;(&lt;/span&gt;x&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; 10
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Métodos de classe e estáticos&lt;/h2&gt;
&lt;p&gt;Todos os métodos definidos em uma classe por padrão operam em
instancias. No entanto, podemos definir métodos de classe ou estáticos
ao decorar tais métodos com os decoradores correspondentes &lt;span
style="color: #006666;"&gt;@staticmethods&lt;/span&gt; ou &lt;span
style="color: #006666;"&gt;@classmethods&lt;/span&gt;.&lt;/p&gt;
&lt;h3&gt;Métodos Estáticos&lt;/h3&gt;
&lt;p&gt;Métodos estáticos são métodos funções normais que existem no namespace
de uma classe. Referenciar um método estático de uma classe mostra que
em vez de um método type não ligado, uma &lt;em&gt;função&lt;/em&gt; type é retornada como
mostrado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; 
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt; 
        &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;del_account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deposit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt; 

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;withdraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt; 

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inquiry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Name={}, balance={}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;type&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Current Account&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; Account.deposit
&amp;lt;unbound method Account.deposit&amp;gt;
&amp;gt;&amp;gt;&amp;gt; Account.type
&amp;lt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nb"&gt;type &lt;/span&gt;at 0x106893668&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para definir um método estático, o decorador &lt;span
style="color: #006666;"&gt;@staticmethod&lt;/span&gt; é usado, e tal método não
requer o argumento &lt;span style="color: #000088;"&gt;self&lt;/span&gt;. Métodos
estáticos fornecem um mecanismo para melhor organização, como o código
relacionado a uma classe são colocados nessa classe e podem ser
sobrescritos em uma sub-classe como necessário.&lt;/p&gt;
&lt;h3&gt;Métodos de classe&lt;/h3&gt;
&lt;p&gt;Métodos de classe, como o nome implica, operam nas classes em si em vez
de instâncias. Métodos de classe são criados usando o decorador &lt;span
style="color: #006666;"&gt;@classmethod&lt;/span&gt; com a classe passada como o
primeiro argumento para o método em vez da instância.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; 
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt; 
        &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;del_account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deposit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt; 

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;withdraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt; 

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inquiry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Name={}, balance={}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt; 
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;from_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params_json&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params_json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;balance&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;type&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Current Account&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Um exemplo motivador do uso de métodos de classe é como uma &lt;em&gt;fábrica&lt;/em&gt;
para criação de objeto. Imagine que dados para a classe &lt;span
style="color: #660066;"&gt;Account&lt;/span&gt; venham em diferentes formatos,
tais como tuplas, JSON, strings e etc. Nós não podemos definir múltiplos
métodos &lt;span style="color: #000000;"&gt;__init__&lt;/span&gt;, sendo que uma
classe Python pode ter apenas um método &lt;span
style="color: #000000;"&gt;__init__&lt;/span&gt;, desse modo métodos de
classe vêm a calhar nessas situações. Na classe &lt;span
style="color: #660066;"&gt;Account&lt;/span&gt; definida acima no exemplo, nós
queremos inicializar uma conta a partir de um objeto JSON, então nós
definimos um método de classe, &lt;span
style="color: #000000;"&gt;from_json&lt;/span&gt; que recebe um objeto JSON e
manipula a extração de parâmetros e criação do objeto Account usando os
parâmetros extraídos. Um outro exemplo de um método de classe em ação é
o &lt;span style="color: #000000;"&gt;dict.fromkeys&lt;/span&gt;, método que é usado
para criar objetos dict de uma sequência de chaves e valores fornecidas.&lt;/p&gt;
&lt;h4&gt;Métodos especiais Python&lt;/h4&gt;
&lt;p&gt;Algumas vezes podemos querer customizar classes que definimos. Isto pode
ser alterar a maneira que objetos de classe são criados e inicializados,
ou fornecer comportamento polimórfico para certas operações.
Comportamento polimórfico habilita as classes que criamos a definir sua
própria implementação para certas operações Python, tais como a operação
+. Python fornece métodos &lt;em&gt;especiais&lt;/em&gt; que habilitam isso. Esses métodos
estão normalmente na forma &lt;span
style="color: #000000;"&gt;__*__&lt;/span&gt; onde &lt;span
style="color: #000000;"&gt;*&lt;/span&gt; se refere ao nome do método. Exemplo
de tais métodos são &lt;span style="color: #000000;"&gt;__init__&lt;/span&gt; e
&lt;span style="color: #000000;"&gt;__new__&lt;/span&gt; para customizar criação
e inicialização de objeto, &lt;span
style="color: #000000;"&gt;__getitem__&lt;/span&gt;, &lt;span
style="color: #000000;"&gt;__get__&lt;/span&gt;, &lt;span
style="color: #000000;"&gt;__add__&lt;/span&gt; e &lt;span
style="color: #000000;"&gt;__sub__&lt;/span&gt; para emular tipos padrões do
Python, &lt;span style="color: #000000;"&gt;__getattribute__&lt;/span&gt;, &lt;span
style="color: #000000;"&gt;__getattr__&lt;/span&gt; e etc. para customizar
acesso de atributos. Esses são apenas alguns dos métodos especiais.
Discutiremos alguns métodos especiais abaixo para prover um
entendimento, mas a &lt;a href="https://docs.python.org/3/reference/datamodel.html#special-method-names"&gt;documentação
Python&lt;/a&gt;
fornece uma lista compreensiva desses métodos.&lt;/p&gt;
&lt;h3&gt;Métodos Especiais para Criação de Objetos&lt;/h3&gt;
&lt;p&gt;Novas instâncias de classes são criadas em um processo de 2 passos:
usando o método &lt;span style="color: #000000;"&gt;__new__&lt;/span&gt; para
criar uma nova instância e o método &lt;span
style="color: #000000;"&gt;__init__&lt;/span&gt; para inicializar o novo
objeto criado. Programadores já estão familiarizados com a definição do
método &lt;span style="color: #000000;"&gt;__init__&lt;/span&gt;; o método &lt;span
style="color: #000000;"&gt;__new__&lt;/span&gt; é raramente definido pelo
programador pra cada classe, mas é possível que algum queira customizar
a criação de instâncias de classe.&lt;/p&gt;
&lt;h3&gt;Métodos Especiais para Acesso de Atributos&lt;/h3&gt;
&lt;p&gt;Nós podemos customizar o acesso de atributos para instâncias de classe
ao implementar os seguintes métodos listados:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; 
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt; 
        &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;del_account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__getattr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hey I dont see any attribute called {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deposit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt; 

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;withdraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt; 

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inquiry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Name={}, balance={}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt; 
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;from_dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;params_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;params_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;balance&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;type&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Current Account&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;obi&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;span style="color: #000000;"&gt;__getattr__&lt;/span&gt;(&lt;span
    style="color: #000088;"&gt;self&lt;/span&gt;, &lt;span
    style="color: #000000;"&gt;name&lt;/span&gt;): Este método é apenas chamado
    quando um atributo, &lt;em&gt;name&lt;/em&gt;, que está referenciado não é nem um
    atributo de instância ou nem é encontrado na árvore da classe para
    o objeto. Este método deve retornar algum valor para o atributo, ou
    lança uma exceção &lt;span
    style="color: #660066;"&gt;AttributeError&lt;/span&gt;. Por exemplo, se &lt;em&gt;x&lt;/em&gt; é
    uma instância da classe &lt;em&gt;Account&lt;/em&gt; definida acima, tentar acessar um
    atributo que não existe resultará em uma chamada para este método.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; acct = Account(&amp;quot;obi&amp;quot;, 10)
&amp;gt;&amp;gt;&amp;gt; acct.number
Hey I dont see any attribute called number
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;p&gt;
Note que se o código &lt;span
style="color: #000000;"&gt;__getattr__&lt;/span&gt; referencia atributos
de instância, e esses atributos não existem, um loop infinito pode
ocorrer porque o método &lt;span
style="color: #000000;"&gt;__getattr__&lt;/span&gt; é chamado
sucessivamente sem um fim&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span style="color: #000000;"&gt;__setattr__&lt;/span&gt;(&lt;span
    style="color: #000088;"&gt;self&lt;/span&gt;, &lt;span
    style="color: #000000;"&gt;name&lt;/span&gt;, &lt;span
    style="color: #000000;"&gt;value&lt;/span&gt;): Este método é chamado sempre
    que uma atribuição de atributos é tentada. &lt;span
    style="color: #000000;"&gt;__setattr__&lt;/span&gt; deve inserir o valor
    sendo atribuído no dicionário do atributo de instância em vez de
    usar self.name=value, que resulta em uma chamada recursiva e,
    consequentemente, para um loop infinito.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style="color: #000000;"&gt;__delattr__&lt;/span&gt;(&lt;span
    style="color: #000088;"&gt;self&lt;/span&gt;, &lt;span
    style="color: #000000;"&gt;name&lt;/span&gt;): Este é chamado sempre que del
    obj é chamado.&lt;/li&gt;
&lt;li&gt;&lt;span style="color: #000000;"&gt;__getattribute__&lt;/span&gt;(&lt;span
    style="color: #000088;"&gt;self&lt;/span&gt;, &lt;span
    style="color: #000000;"&gt;name&lt;/span&gt;): Este método é sempre chamado
    para implementar acessos de atributos para instâncias de classe.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Métodos Especiais para Emulação de Tipos&lt;/h2&gt;
&lt;p&gt;Python define certa sintaxe especial para usar com certos tipos; por
exemplo, os elementos em listas e tuplas podem ser acessados usando a
notação de índice &lt;span style="color: #000000;"&gt;[]&lt;/span&gt;, valores
numéricos podem ser somados com o operador &lt;span
style="color: #000000;"&gt;+&lt;/span&gt;, e assim por diante. Podemos criar
nossas próprias classes que fazem uso desta sintaxe especial ao
implementar certos métodos especiais que o interpretador Python chama
sempre que ele encontra tais sintaxes. Ilustramos isso com um exemplo
muito simples abaixo, que emula o básico de uma lista Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# the class is just a wrapper around another list to &lt;/span&gt;
        &lt;span class="c"&gt;# illustrate special methods&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__len__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# called when a user calls len(CustomList instance)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__getitem__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# called when a user uses square brackets for indexing &lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__setitem__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# called when a user performs an index assignment&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;IndexError&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__contains__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# called when the user uses the &amp;#39;in&amp;#39; keyword&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__add__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;otherList&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# provides support for the use of the + operator &lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;CustomList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;otherList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No exemplo acima, o CustomList é um wrapper fino em torno de uma lista
real. Nós implementamos alguns métodos customizados para fins de
ilustração:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;span style="color: #000000;"&gt;__len__&lt;/span&gt;(&lt;span
    style="color: #000088;"&gt;self&lt;/span&gt;): Este é chamado quando a
    função len() é chamada em uma instância de CustomList, como mostrado
    abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; myList = CustomList() 
&amp;gt;&amp;gt;&amp;gt; myList.append(1)    
&amp;gt;&amp;gt;&amp;gt; myList.append(2)
&amp;gt;&amp;gt;&amp;gt; myList.append(3)
&amp;gt;&amp;gt;&amp;gt; myList.append(4)
&amp;gt;&amp;gt;&amp;gt; len(myList)
4
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span style="color: #000000;"&gt;__getitem__&lt;/span&gt;(&lt;span
    style="color: #000088;"&gt;self&lt;/span&gt;, &lt;span
    style="color: #000000;"&gt;value&lt;/span&gt;): fornece suporte para o uso de
    colchetes para indexação em uma instância da classe CustomList:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; myList = CustomList()
&amp;gt;&amp;gt;&amp;gt; myList.append(1)    
&amp;gt;&amp;gt;&amp;gt; myList.append(2)
&amp;gt;&amp;gt;&amp;gt; myList.append(3)
&amp;gt;&amp;gt;&amp;gt; myList.append(4)
&amp;gt;&amp;gt;&amp;gt; myList[3]
4
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span style="color: #000000;"&gt;__setitem__&lt;/span&gt;(&lt;span
    style="color: #000088;"&gt;self&lt;/span&gt;, &lt;span
    style="color: #000000;"&gt;key&lt;/span&gt;, &lt;span
    style="color: #000000;"&gt;value&lt;/span&gt;): Chamado para implementar a
    atribuição de valor para self[key] em uma instância da classe
    CustomList:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; myList = CustomList()
&amp;gt;&amp;gt;&amp;gt; myList.append(1)    
&amp;gt;&amp;gt;&amp;gt; myList.append(2)
&amp;gt;&amp;gt;&amp;gt; myList.append(3)
&amp;gt;&amp;gt;&amp;gt; myList.append(4)
&amp;gt;&amp;gt;&amp;gt; myList[3] = 100
4
&amp;gt;&amp;gt;&amp;gt; myList[3]
100
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span style="color: #000000;"&gt;__contains__&lt;/span&gt;(&lt;span
    style="color: #000088;"&gt;self&lt;/span&gt;, &lt;span
    style="color: #000000;"&gt;key&lt;/span&gt;): Chamado para implementar
    operadores de teste de membros. Deve retornar &lt;em&gt;true&lt;/em&gt; se item está em
    self, e &lt;em&gt;false&lt;/em&gt; se não estiver:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; myList = CustomList()
&amp;gt;&amp;gt;&amp;gt; myList.append(1)    
&amp;gt;&amp;gt;&amp;gt; myList.append(2)
&amp;gt;&amp;gt;&amp;gt; myList.append(3)
&amp;gt;&amp;gt;&amp;gt; myList.append(4)
&amp;gt;&amp;gt;&amp;gt; 4 in myList
True
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span style="color: #000000;"&gt;__repr__&lt;/span&gt;(&lt;span
    style="color: #000088;"&gt;self&lt;/span&gt;): Chamado para computar a
    representação do objeto para &lt;em&gt;self&lt;/em&gt; quando print é chamado com o
    objeto como argumento:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; myList = CustomList()
&amp;gt;&amp;gt;&amp;gt; myList.append(1)    
&amp;gt;&amp;gt;&amp;gt; myList.append(2)
&amp;gt;&amp;gt;&amp;gt; myList.append(3)
&amp;gt;&amp;gt;&amp;gt; myList.append(4)
&amp;gt;&amp;gt;&amp;gt; print(myList)
[1, 2, 3, 4]
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span style="color: #000000;"&gt;__add__&lt;/span&gt;(&lt;span
    style="color: #000088;"&gt;self&lt;/span&gt;, &lt;span
    style="color: #000000;"&gt;otherList&lt;/span&gt;): Chamado para computar a
    adição de duas instâncias de CustomList quando o operador + é usado
    para somar duas instâncias juntas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; myList = CustomList()
&amp;gt;&amp;gt;&amp;gt; otherList = CustomList()
&amp;gt;&amp;gt;&amp;gt; otherList.append(100)
&amp;gt;&amp;gt;&amp;gt; myList.append(1)    
&amp;gt;&amp;gt;&amp;gt; myList.append(2)
&amp;gt;&amp;gt;&amp;gt; myList.append(3)
&amp;gt;&amp;gt;&amp;gt; myList.append(4)
&amp;gt;&amp;gt;&amp;gt; myList + otherList + otherList
[1, 2, 3, 4, 100, 100]
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Acima temos um exemplo de como podemos customizar comportamento de
classe ao definir certos métodos especiais de classe. Para uma listagem
de todos os métodos, veja a &lt;a href="https://docs.python.org/3/reference/datamodel.html#basic-customization"&gt;documentação
Python&lt;/a&gt;.
No tutorial seguinte, nós colocaremos em prática o que discutimos aqui
sobre métodos especiais e explicaremos &lt;strong&gt;descriptors&lt;/strong&gt;, uma
funcionalidade muito importante, que tem uso generalizado em programação
orientada a objetos em Python.&lt;/p&gt;
&lt;p&gt;NT.: Pessoal, tive uma certa dificuldade ao traduzir este artigo, pela
forma meio complicada que o autor o escreveu. Então desde já me desculpo
se alguma parte ficou meio -no sense-, e peço que coloquem nos
comentários qualquer possível melhoria que eu editarei o post :)&lt;/p&gt;
&lt;h2&gt;Leitura Complementar&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/reference/datamodel.html#"&gt;Python Data Model&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://dunderlabs.github.io/pages/pythonista-intermediario.html"&gt;Clique aqui para voltar para a tabela de conteúdo.&lt;/a&gt;&lt;/p&gt;</summary><category term="python"></category><category term="python class"></category><category term="python data model"></category><category term="translations"></category></entry><entry><title>Funções Python II: decorators</title><link href="https://dunderlabs.github.io/funcoes-python-ii-decorators.html" rel="alternate"></link><updated>2015-02-18T12:38:00-03:00</updated><author><name>Patrick Mazulo</name></author><id>tag:dunderlabs.github.io,2015-02-18:funcoes-python-ii-decorators.html</id><summary type="html">&lt;p&gt;&lt;img alt="Créditos da imagem" src="https://dunderlabs.github.io/images/posts/DecoratorsVisuallyExplained.png" /&gt;&lt;/p&gt;
&lt;p&gt;Créditos da imagem: &lt;a href="https://www.freshbooks.com/developers/blog/logging-actions-with-python-decorators-part-i-decorating-logged-functions"&gt;https://www.freshbooks.com/developers/blog/logging-actions-with-python-decorators-part-i-decorating-logged-functions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Decoradores de função (&lt;em&gt;Function Decorators&lt;/em&gt;) habilitam a adição de nova
funcionalidade para a função sem alterar a funcionalidade original dela.
Antes de ler esse post, é importante que você tenha lido e entendido o a
&lt;a href="http://indacode.com/funcoes-python/" title="Funções Python"&gt;primeira parte&lt;/a&gt;
sobre funções python. O pensamento principal que devemos tirar a partir
desse tutorial, é que funções Python são objetos de primeira classe; um
resultado disso é que:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Funções Python podem ser passadas como argumentos para outras
    funções&lt;/li&gt;
&lt;li&gt;Funções Python podem ser retornadas de outras chamadas de funções.&lt;/li&gt;
&lt;li&gt;Funções Python podem ser definidas dentro de outras funções
    resultando em closures.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As propriedades de funções Python listadas acima fornecem a função
necessária para explicar decoradores de função (que a partir daqui,
passaremos a nos referir no original, &lt;em&gt;function decorators&lt;/em&gt;).
Simplificando, &lt;em&gt;function decorators&lt;/em&gt; são &lt;strong&gt;containers (&lt;em&gt;wrappers&lt;/em&gt;) que
deixam você executar código antes&lt;/strong&gt; &lt;strong&gt;das funções que elas decoraram sem
modificar a função em si&lt;/strong&gt;. A estrutura desse tutorial segue uma
excelente resposta encontrada no &lt;a href="http://stackoverflow.com/questions/739654/how-can-i-make-a-chain-of-function-decorators-in-python/1594484#1594484"&gt;stack
overflow&lt;/a&gt; explicando
sobre &lt;em&gt;python decorators&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Function Decorators&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Function decorators&lt;/em&gt; não são exclusivos ao Python, então para
explica-los, ignoremos a sintaxe de &lt;em&gt;function decorator &lt;/em&gt;em Python por
enquanto, e ao invés disso vamos focar na essência de &lt;em&gt;function
decorators&lt;/em&gt;. Para entender o que decorators fazem, nós implementamos uma
função bem simples que é decorada (&lt;em&gt;decorated&lt;/em&gt;, termo em inglês) com uma
outra função simples que registra as chamadas para as funções decoradas.
A &lt;em&gt;decoração da função&lt;/em&gt; é conseguida através da composição de funções,
como mostrado abaixo (seguem as explicações nos comentários):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;

&lt;span class="c"&gt;# o decorator esperar uma outra função como argumento&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="c"&gt;# um container (wrapper) é definido na hora&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func_wrapper&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

        &lt;span class="c"&gt;# adicione qualquer funcionalidade de execução na função original&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Calling function: {} at {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;

        &lt;span class="c"&gt;# execute a função original&lt;/span&gt;
        &lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c"&gt;# adicione qualquer funcionalidade de execução na função original&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Finished calling : {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="c"&gt;# retorne a função wrapper definida no momento. O corpo da&lt;/span&gt;
    &lt;span class="c"&gt;# função wrapper não foi executado ainda, mas um closure&lt;/span&gt;
    &lt;span class="c"&gt;# na função func_to_decorate foi criado    &lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func_wrapper&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_full_name&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;My name is John Doe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt;decorated_func &lt;span class="o"&gt;=&lt;/span&gt; logger&lt;span class="o"&gt;(&lt;/span&gt;print_full_name&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt;decorated_func
&lt;span class="c"&gt;# o valor retornado, decorated_func, é uma referência para a func_wrapper&lt;/span&gt;
&amp;lt;&lt;span class="k"&gt;function&lt;/span&gt; func_wrapper at 0x101ed2578&amp;gt;
&amp;gt;&amp;gt;&amp;gt;decorated_func&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="c"&gt;# decorated_func chamada&lt;/span&gt;
Calling &lt;span class="k"&gt;function&lt;/span&gt;: print_full_name at 2015-01-24 13:48:05.261413
&lt;span class="c"&gt;# a funcionalidade original é preservada&lt;/span&gt;
My name is John Doe
Finished calling : print_full_name
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No simples exemplo definido acima, o decorator adiciona uma nova
funcionalidade, mostrando alguma informação antes e depois da chamada
original da função, para a função original sem altera-la. O decorator
&lt;span style="color: #000000;"&gt;logger&lt;/span&gt; recebe uma função para ser
decorada, &lt;span style="color: #000000;"&gt;print_full_name&lt;/span&gt; e
retorna uma função, &lt;span style="color: #000000;"&gt;func_wrapper&lt;/span&gt;
que chama a função decorada, &lt;span
style="color: #000000;"&gt;print_full_name&lt;/span&gt;, quando é executada. A
função retornada, &lt;span style="color: #000000;"&gt;func_wrapper&lt;/span&gt;
está fechada sobre a referência da função decorada (&lt;em&gt;closure&lt;/em&gt;), &lt;span
style="color: #000000;"&gt;print_full_name&lt;/span&gt; e portanto pode invocar
a função decorada quando está executando. No exemplo acima, chamando
&lt;span style="color: #000000;"&gt;decorated_func&lt;/span&gt; resulta em &lt;span
style="color: #000000;"&gt;print_full_name&lt;/span&gt; sendo executada além de
algum outro código implementando uma nova funcionalidade. Essa
habilidade de adicionar nova funcionalidade para uma função sem
modificar a função original é a essência de &lt;em&gt;function decorators&lt;/em&gt;. Uma
vez que esse conceito é entendido, o conceito de &lt;em&gt;decorators&lt;/em&gt; está
entendido.&lt;/p&gt;
&lt;h2&gt;Python decorators&lt;/h2&gt;
&lt;p&gt;Agora que nós felizmente entendemos a essência de &lt;em&gt;function decorators&lt;/em&gt;,
nós podemos seguir em frente para desconstruir construções Python que
permitem-nos definir decorators mais facilmente. A seção anterior
descreve a essência de decorators, mas ter que usar decorators através
de composições de funções como descrito é muito custoso. Python introduz
o símbolo &lt;span style="color: #666600;"&gt;@&lt;/span&gt; para decoração de
funções. Decorar uma função usando a sintaxe de decorator Python é
conseguida como mostrada abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@decorator&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;a_stand_alone_function&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Chamando &lt;span style="color: #000000;"&gt;stand_alone_function&lt;/span&gt;
agora é o equivalente a chamar a função &lt;span
style="color: #000000;"&gt;decorated_func&lt;/span&gt; da seção anterior, mas
não precisamos mais definir a função intermediária &lt;span
style="color: #000000;"&gt;decorated_func&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Note que decorators podem ser aplicados não apenas em funções Python,
mas também em classes Python e métodos de classe, mas discutiremos sobre
decorators de classes e métodos em um próximo tutorial.&lt;/p&gt;
&lt;p&gt;É importante entender o que o símbolo &lt;span
style="color: #666600;"&gt;@&lt;/span&gt; faz em respeito aos decorators em
Python. A linha &lt;span style="color: #006666;"&gt;@decorator&lt;/span&gt; não
define um decorator, em vez disso pode-se pensar dele como um açúcar
sintático (&lt;em&gt;syntatic sugar&lt;/em&gt;) para &lt;strong&gt;decorar uma função&lt;/strong&gt;. Eu gosto de
definir &lt;strong&gt;decorar uma função&lt;/strong&gt; como o processo de aplicar um decorator
existente a uma função. O &lt;strong&gt;&lt;em&gt;decorator&lt;/em&gt;&lt;/strong&gt; é a função real, &lt;span
style="color: #000000;"&gt;decorator&lt;/span&gt; que adiciona a nova
funcionalidade para a função original. De acordo com a PEP 318, o
seguinte trecho de decorator&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@dec2&lt;/span&gt;
&lt;span class="nd"&gt;@dec1&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;é equivalente a:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dec2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dec1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;sem o argumento intermediário &lt;span style="color: #000000;"&gt;func&lt;/span&gt;.
No exemplo acima, &lt;span style="color: #006666;"&gt;@dec1&lt;/span&gt; e &lt;span
style="color: #006666;"&gt;@dec2&lt;/span&gt; são os invocadores dos decorators.
Agora pare, pense cuidadosamente e garanta que você entendeu isso. &lt;span
style="color: #000000;"&gt;dec1&lt;/span&gt; e &lt;span
style="color: #000000;"&gt;dec2&lt;/span&gt; são referências de objeto de função,
e esses são os decorators reais. Esses valores podem ainda ser
substituídos por qualquer &lt;strong&gt;&lt;em&gt;chamada de função ou um valor que quando
avaliado retorna uma função que recebe uma outra função.&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;O que é de
suma importância é que o nome de referência&lt;/em&gt; seguindo o símbolo &lt;span
style="color: #666600;"&gt;@&lt;/span&gt; é uma referência para um objeto função
(para esse tutorial, nós assumimos que esta referência deve ser um
objeto função, mas na realidade ela deve ser um objeto &lt;strong&gt;chamável&lt;/strong&gt;
(&lt;strong&gt;callable)&lt;/strong&gt;) que recebe uma função como argumento. Entender esse fato
profundo ajudará em entender decorators Python e tópicos sobre
decorators mais envolventes, tais como decorators que recebem
argumentos.&lt;/p&gt;
&lt;h2&gt;Argumentos de funções para funções decoradas&lt;/h2&gt;
&lt;p&gt;Argumentos podem ser passados para funções que estão sendo decoradas ao
simplesmente passar essa função dentro da função que envolve ela, &lt;strong&gt;isto
é a função interna retornada quando o decorator é invocado&lt;/strong&gt;, a função
decorada. Nós ilustramos isso com um exemplo abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;

&lt;span class="c"&gt;# decorator espera uma outra função como argumento&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="c"&gt;# Uma função wrapper é definida na hora&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="c"&gt;# adicione qualquer funcionalidade de execução na função original&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Calling function: {} at {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;

        &lt;span class="c"&gt;# executa a função original&lt;/span&gt;
        &lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;# adicione qualquer funcionalidade de execução na função original&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Finished calling : {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c"&gt;# retorne a função wrapper definida no momento. O corpo da&lt;/span&gt;
    &lt;span class="c"&gt;# função wrapper não foi executado ainda, mas um closure&lt;/span&gt;
    &lt;span class="c"&gt;# na função func_to_decorate foi criado &lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func_wrapper&lt;/span&gt;

&lt;span class="nd"&gt;@logger&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_full_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;My name is {} {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;print_full_name&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;John&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;Doe&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

Calling &lt;span class="k"&gt;function&lt;/span&gt;: print_full_name at 2015-01-24 14:36:36.691557
My name is John Doe
Finished calling : print_full_name
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note como nós usamos &lt;span style="color: #666600;"&gt;*&lt;/span&gt;&lt;span
style="color: #000000;"&gt;args&lt;/span&gt; e &lt;span
style="color: #666600;"&gt;**&lt;/span&gt;&lt;span
style="color: #000000;"&gt;kwargs&lt;/span&gt; na definição da função wrapper
interna; isso é pelo simples motivo que nós não podemos saber de antemão
quais argumentos estão sendo passados para uma função que está sendo
decorada.&lt;/p&gt;
&lt;h2&gt;Função decorator com argumentos de função&lt;/h2&gt;
&lt;p&gt;Nós também podemos passar argumentos para a função decorator atual, mas
isso é mais complexo do que o caso de passar funções para funções
decoradas. Nós ilustramos isso com um grande exemplo abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Essa função recebe argumentos e retorna uma função&lt;/span&gt;
&lt;span class="c"&gt;# a função retornada é nosso decorator real&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator_maker_with_arguments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;decorator_arg1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="c"&gt;# isso é nosso decorator real que aceita uma função&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# a função wrapper recebe argumentos para a função decoradora&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function_arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function_arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c"&gt;# adicione qualquer funcionalidade de execução na função original&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Calling function: {} at {} with decorator arguments: {} and function arguments:{} {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;  
               &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;decorator_arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function_arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function_arg2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

            &lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function_arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function_arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="c"&gt;# adicione qualquer funcionalidade de execução na função original&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Finished calling : {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapped&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;decorator&lt;/span&gt;

&lt;span class="nd"&gt;@decorator_maker_with_arguments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Apollo 11 Landing&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function_arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function_arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;My full name is -- {} {} --&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function_arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function_arg2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; print_name&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Tranquility base &amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;To Houston&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

Calling &lt;span class="k"&gt;function&lt;/span&gt;: print_name at 2015-01-24 15:03:23.696982 with decorator arguments: Apollo &lt;span class="m"&gt;11&lt;/span&gt; Landing and &lt;span class="k"&gt;function&lt;/span&gt; arguments:Tranquility base  To Houston
My full name is -- Tranquility base  To Houston --
Finished calling : print_name
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como mencionado anteriormente, a chave para entender o que está
acontecendo com isso é notar que nós podemos substituir o valor de
referência seguindo a @ em uma decoração de função com qualquer valor
que &lt;strong&gt;&lt;em&gt;resulta em um objeto de função que recebe uma outra função como
argumento&lt;/em&gt;&lt;/strong&gt;. No exemplo acima, o valor retornado pela chamada de
função, &lt;span
style="color: #000000;"&gt;decorator_make_with_arguments&lt;/span&gt;(&lt;span
style="color: #008800;"&gt;"Apollo 11 landing"&lt;/span&gt;), é o decorator. A
chamada resulta em uma função, decorator que aceita uma função como
argumento. Assim a decoração '@decorator_maker_with_arguments("Apollo
11 landing")' é equivalente a &lt;span
style="color: #006666;"&gt;@decorator&lt;/span&gt; mas com o decorador, &lt;span
style="color: #000000;"&gt;decorator&lt;/span&gt;, fechado sobre o
argumento &lt;span style="color: #008800;"&gt;Apollo 11 landing&lt;/span&gt; pela
chamada da função &lt;span
style="color: #000000;"&gt;decorator_maker_with_arguments&lt;/span&gt;. Note
que os argumentos fornecidos para um decorator não pode ser
dinamicamente mudado em tempo de execução como eles são executados na
importação do script.&lt;/p&gt;
&lt;h2&gt;Functools.wrap&lt;/h2&gt;
&lt;p&gt;Usar decorators envolve trocar de uma função para uma outra. Um
resultado disso é que meta informações, tais como docstrings são
perdidas quando usar um decorator com tal função. Isso é ilustrado
abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;

&lt;span class="c"&gt;# decorator espera uma outra função como argumento&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="c"&gt;# uma função wrapper é definida na hora&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func_wrapper&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

        &lt;span class="c"&gt;# adicione qualquer funcionalidade de execução na função original&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Calling function: {} at {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;

        &lt;span class="c"&gt;# execute a função original&lt;/span&gt;
        &lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c"&gt;# adicione qualquer funcionalidade de execução na função original&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Finished calling : {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c"&gt;# retorne a função wrapper definida no momento. O corpo da&lt;/span&gt;
    &lt;span class="c"&gt;# função wrapper não foi executado ainda, mas um closure&lt;/span&gt;
    &lt;span class="c"&gt;# na função func_to_decorate foi criado &lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func_wrapper&lt;/span&gt;

&lt;span class="nd"&gt;@logger&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_full_name&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;return john doe&amp;#39;s full name&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;My name is John Doe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; print&lt;span class="o"&gt;(&lt;/span&gt;print_full_name.__doc__&lt;span class="o"&gt;)&lt;/span&gt;
None
&amp;gt;&amp;gt;&amp;gt; print&lt;span class="o"&gt;(&lt;/span&gt;print_full_name.__name__&lt;span class="o"&gt;)&lt;/span&gt;
func_wrapper
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No exemplo acima uma tentativa de mostrar a string de documentação
retorna &lt;span style="color: #000088;"&gt;None&lt;/span&gt; porque o decorator
trocou a função &lt;span style="color: #000000;"&gt;print_full_name&lt;/span&gt;
com a função &lt;span style="color: #000000;"&gt;func_wrapper&lt;/span&gt; que não
tem string de documentação. Até mesmo o nome da função agora referencia
o nome da função wrapper, em vez da função real. Isso, na maioria das
vezes, não o que nós queremos quando usamos decorators. Para contornar
isso, o módulo Python &lt;span style="color: #000000;"&gt;functools&lt;/span&gt;
fornece a função &lt;span style="color: #000000;"&gt;wraps&lt;/span&gt; que também
passa a ser um decorator. Esse decorator é aplicado a função wrapper e
recebe a função a ser decorada como argumento. O uso é ilustrado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;wraps&lt;/span&gt; 

&lt;span class="c"&gt;# decorator espera uma outra função como argumento&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="nd"&gt;@wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;# uma função wrapper é definida na hora&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="c"&gt;# adicione qualquer funcionalidade de execução na função original&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Calling function: {} at {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;

        &lt;span class="c"&gt;# execute a função original&lt;/span&gt;
        &lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;# adicione qualquer funcionalidade de execução na função original&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Finished calling : {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c"&gt;# retorne a função wrapper definida no momento. O corpo da&lt;/span&gt;
    &lt;span class="c"&gt;# função wrapper não foi executado ainda, mas um closure&lt;/span&gt;
    &lt;span class="c"&gt;# na função func_to_decorate foi criado &lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func_wrapper&lt;/span&gt;

&lt;span class="nd"&gt;@logger&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_full_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;return john doe&amp;#39;s full name&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;My name is {} {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; print&lt;span class="o"&gt;(&lt;/span&gt;print_full_name.__doc__&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; john doe&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s full name
&amp;gt;&amp;gt;&amp;gt;print&lt;span class="o"&gt;(&lt;/span&gt;print_full_name.__name__&lt;span class="o"&gt;)&lt;/span&gt;
print_full_name
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Aplicação de Decoradores&lt;/h2&gt;
&lt;p&gt;Decorators tem uma ampla variedades de aplicações em Python, e todas
essas não podem ser cobertas nesse artigo. Alguns exemplos de aplicações
de decorators incluem:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Memoização (&lt;em&gt;memoization&lt;/em&gt;) que é o cache de valores para prevenir
    recomputar tais valores se a computação é muito custosa; Um
    decorator de memoização pode ser usado para decorar uma função que
    executa o cálculo real, e a funcionalidade adicionada é que, para um
    dado argumento se o resultado já foi computado anteriormente então o
    valor armazenado é retornado para o chamador.&lt;/li&gt;
&lt;li&gt;Em aplicações web, decorators podem ser usados para proteger
    endpoints que requer autenticação; um endpoint é protegido com um
    decorator que checa se um usuário está autenticado quando uma
    requisição é feita para o endpoint. Django, um popular framework
    web, faz uso de decorators para gerenciar cache e permissões
    de views.&lt;/li&gt;
&lt;li&gt;Decorators podem também fornecer uma maneira limpa para realização
    de tarefas domésticas, tais como chamadas de funções de logging,
    tempo de função e etc.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;O uso de decorators é um campo de atuação muito largo, que é único para
diferentes situações. A &lt;a href="https://wiki.python.org/moin/PythonDecoratorLibrary"&gt;biblioteca de decorator
Python&lt;/a&gt; fornecem
ricos casos de uso de decorators Python. Navegando por esta coleção
fornecerá visão prática para o uso de decorators Python.&lt;/p&gt;
&lt;h2&gt;Leitura complementar&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-0318/"&gt;PEP 318 - Decorators for Functions and Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/739654/how-can-i-make-a-chain-of-function-decorators-in-python/1594484#1594484"&gt;StackOverflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://dunderlabs.github.io/pages/pythonista-intermediario.html"&gt;Clique aqui para voltar para a tabela de conteúdo.&lt;/a&gt;&lt;/p&gt;</summary><category term="python"></category><category term="python function"></category><category term="decorators"></category><category term="translations"></category></entry><entry><title>Funções Python</title><link href="https://dunderlabs.github.io/funcoes-python.html" rel="alternate"></link><updated>2015-02-11T13:15:00-03:00</updated><author><name>Patrick Mazulo</name></author><id>tag:dunderlabs.github.io,2015-02-11:funcoes-python.html</id><summary type="html">&lt;p&gt;&lt;img alt="Créditos da imagem" src="https://dunderlabs.github.io/images/posts/python_function_syntax.png" /&gt;
Créditos da imagem: &lt;a href="http://www.voidspace.org.uk/python/weblog/arch_Tools.shtml"&gt;http://www.voidspace.org.uk/python/weblog/arch_Tools.shtml&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Funções Python nomeadas ou &lt;em&gt;anônimas&lt;/em&gt; são um conjunto de declarações ou
expressões. Em Python, &lt;strong&gt;&lt;em&gt;funções são objetos de primeira classe&lt;/em&gt;&lt;/strong&gt;.
Isso significa que não há restrição no uso de funções. Funções python
podem ser usadas assim como qualquer outro valor python, tal como
strings e números. Funções Python tem atributos que podem ser
introspectados ao usar a função &lt;span style="color: #000088;"&gt;&lt;a href="https://docs.python.org/2/library/functions.html#dir"&gt;dir&lt;/a&gt;&lt;/span&gt;
do Python, como mostrado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; square
&amp;lt;&lt;span class="k"&gt;function&lt;/span&gt; square at 0x031AA230&amp;gt;
&amp;gt;&amp;gt;&amp;gt; dir&lt;span class="o"&gt;(&lt;/span&gt;square&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__call__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__class__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__closure__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__code__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__defaults__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__delattr__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__dict__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__doc__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__format__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__get__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__getattribute__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__globals__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__hash__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__init__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__module__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__name__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__new__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__reduce__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__reduce_ex__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__repr__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__setattr__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__sizeof__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__str__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__subclasshook__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;func_closure&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;func_code&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;func_defaults&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;func_dict&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;func_doc&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;func_globals&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;func_name&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Alguns atributos importantes das funções incluem:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;__&lt;span style="color: #000000;"&gt;doc&lt;/span&gt;__ retorna a string da
    documentação da função.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def square&lt;span class="o"&gt;(&lt;/span&gt;x&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;return square of given number&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; x**2

&amp;gt;&amp;gt;&amp;gt; square.__doc__
&lt;span class="s1"&gt;&amp;#39;return square of given number&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;__&lt;span style="color: #000000;"&gt;name&lt;/span&gt;__ retorna o nome da
    função&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;```` {.theme:shell-default .toolbar:1 .toolbar-overlay:false .striped:false .nums:false .lang:sh .decode:true}
def square(x):
    """return square of given number"""
    return x**2&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;square.func_name
'square'&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;-   \_\_&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;color: #000000;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;module&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;\_\_ retorna o nome
    do módulo que a função está definida.

````python
def square(x):
    &amp;quot;&amp;quot;&amp;quot;return square of given number&amp;quot;&amp;quot;&amp;quot;
    return x**2
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; square.__module__
&lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;span style="color: #000000;"&gt;func_defaults&lt;/span&gt; retorna uma
    tupla com os valores padrões dos argumentos.&lt;/li&gt;
&lt;li&gt;&lt;span style="color: #000000;"&gt;func_globals&lt;/span&gt; retorna uma
    referência para um dicionário que contém as variáveis globais
    da função.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;return square of given number&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; square.func_globals
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__builtins__&amp;#39;&lt;/span&gt;: &amp;lt;module &lt;span class="s1"&gt;&amp;#39;__builtin__&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;built-in&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt;, &lt;span class="s1"&gt;&amp;#39;__name__&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;square&amp;#39;&lt;/span&gt;: &amp;lt;&lt;span class="k"&gt;function&lt;/span&gt; square at 0x10f099c08&amp;gt;, &lt;span class="s1"&gt;&amp;#39;__doc__&amp;#39;&lt;/span&gt;: None, &lt;span class="s1"&gt;&amp;#39;__package__&amp;#39;&lt;/span&gt;: None&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;span style="color: #000000;"&gt;func_dict&lt;/span&gt; retorna o dicionário
    que define o namespace local para os atributos desta função&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;return square of given number&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="sb"&gt;````&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;

&lt;span class="sb"&gt;````&lt;/span&gt;&lt;span class="n"&gt;shell&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;square&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_dict&lt;/span&gt;
&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;span style="color: #000000;"&gt;func_closure&lt;/span&gt; retorna tupla de
    células que contém ligações para variáveis livres das funções.
    Closure serão discutidos mais tarde.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Funções podem ser repassadas como argumentos para outras funções. Essas
funções que recebem outras funções como argumento são comumente chamadas
como funções &lt;strong&gt;&lt;em&gt;de alta ordem&lt;/em&gt;&lt;/strong&gt; (ou &lt;strong&gt;&lt;em&gt;ordem superior&lt;/em&gt;&lt;/strong&gt;) e elas formam
uma parte muito importante na &lt;strong&gt;&lt;em&gt;programação funcional&lt;/em&gt;&lt;/strong&gt;. Um exemplo
muito bom dessas funções de alta ordem é a função &lt;a href="https://docs.python.org/2/library/functions.html#map"&gt;&lt;span
style="color: #000000;"&gt;map&lt;/span&gt;&lt;/a&gt;
que recebe uma função e um &lt;span
style="color: #000000;"&gt;iterável&lt;/span&gt;, e aplica a função para cada
item no &lt;span style="color: #000000;"&gt;iterável&lt;/span&gt;, retornando uma
nova lista. No exemplo abaixo, nós ilustramos isso ao passar a função
&lt;span style="color: #000000;"&gt;square&lt;/span&gt; definida anteriormente e um
&lt;span style="color: #000000;"&gt;iterável&lt;/span&gt; de números para a função
&lt;span style="color: #000000;"&gt;map&lt;/span&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; map&lt;span class="o"&gt;(&lt;/span&gt;square, range&lt;span class="o"&gt;(&lt;/span&gt;10&lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;0, 1, 4, 9, 16, 25, 36, 49, 64, 81&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Funções podem ser definidas dentro do bloco de código de outras funções,
e podem ser retornadas a partir da chamada de outras funções.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;outer&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;outer_var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;outer variable&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;outer_var&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;inner&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No exemplo acima, nós declaramos uma função, &lt;span
style="color: #000000;"&gt;inner&lt;/span&gt;, dentro de uma outra função, &lt;span
style="color: #000000;"&gt;outer&lt;/span&gt;, e retornamos a função &lt;span
style="color: #000000;"&gt;inner&lt;/span&gt; quando a função &lt;span
style="color: #000000;"&gt;outer&lt;/span&gt; é executada.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;outer&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;outer_var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;outer variable&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;outer_var&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;inner&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; outer&lt;span class="o"&gt;()&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; func
&amp;lt;&lt;span class="k"&gt;function&lt;/span&gt; inner at 0x031AA270&amp;gt;
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No exemplo acima, a função outer retorna uma função quando é chamada, e
esta é atribuída para a variável func. Essa variável pode ser chamada
assim como a função retornada:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; func&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;outer variable&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Definições de Função&lt;/h2&gt;
&lt;p&gt;A palavra reservada &lt;span style="color: #000088;"&gt;def&lt;/span&gt; é usada
para criar funções definidas pelo usuário. Definições de funções são
instruções executadas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Na função &lt;span style="color: #000000;"&gt;square&lt;/span&gt; acima, quando o
módulo contendo a função é carregado no interpretador python, ou se está
definida dentro do &lt;strong&gt;REPL&lt;/strong&gt; python, então a instrução da definição da
função que está em &lt;span style="color: #000088;"&gt;def&lt;/span&gt; &lt;span
style="color: #000000;"&gt;square&lt;/span&gt;(x) é executada. Isso tem algumas
implicações para argumentos padrões que tem estruturas de dados mutáveis
como valores; isso será coberto mais a frente neste tutorial. A execução
de uma definição de função liga o nome da função no atual namespace
local (&lt;em&gt;pense em namespaces como nomes para mapeamento de valores que
podem também ser aninhados. namespaces e escopo serão cobertos em mais
detalhes em um outro tutorial&lt;/em&gt;) para um objeto de função que é um
wrapper em torno do código executável para a função. Esse objeto função
contém uma referência para o atual namespace global que é o namespace
global que é usado quando a função é chamada. A definição da função não
executa o corpo da função; este é executado apenas quando a função é
chamada.&lt;/p&gt;
&lt;h2&gt;Argumentos da Chamada de Função&lt;/h2&gt;
&lt;p&gt;Além dos argumentos normais, funções python suportam número variável de
argumentos. Esses números variáveis de argumentos vêm em três tipos que
estão descritos abaixo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Valor padrão do argumento&lt;/strong&gt;: Isso permite um usuário definir
    alguns valores padrões para os argumentos da função. Nesse caso, tal
    função pode ser chamada com menos argumentos. Python usa o valor
    padrão fornecido para argumentos que não são fornecidos durante a
    chamada da função. Este exemplo abaixo é ilustrativo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def show_args(arg, def_arg=1, def_arg2=2):
    return &amp;quot;arg={}, def_arg={}, def_arg2={}&amp;quot;.format(arg, def_arg, def_arg2)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A função acima foi definida com um único argumento posicional
normal, &lt;span style="color: #000000;"&gt;arg&lt;/span&gt; e dois argumentos
padrões, &lt;span style="color: #000000;"&gt;def_arg&lt;/span&gt; e &lt;span
style="color: #000000;"&gt;def_arg2&lt;/span&gt;. A função acima pode ser
chamada em qualquer das seguintes maneiras abaixo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Fornecendo apenas o valor do argumento posicional não
    predefinido; nesse caso os outros argumentos recebem os valores
    padrões fornecidos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def show_args(arg, def_arg=1, def_arg2=2):
    return &amp;quot;arg={}, def_arg={}, def_arg2={}&amp;quot;.format(arg, def_arg, def_arg2)
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;shell&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; show_args(&amp;quot;tranquility&amp;quot;)
    &amp;#39;arg=tranquility, def_arg=1, def_arg2=2&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fornecendo valores para sobrescrever algum argumento padrão além
    do argumento posicional que não foi predefinido.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def show_args(arg, def_arg=1, def_arg2=2):
    return &amp;quot;arg={}, def_arg={}, def_arg2={}&amp;quot;.format(arg, def_arg, def_arg2)
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;shell&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; show_args(&amp;quot;tranquility&amp;quot;, &amp;quot;to Houston&amp;quot;)
    &amp;#39;arg=tranquility, def_arg=to Houston, def_arg2=2&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fornecendo valores para todos os argumentos, sobrescrevendo
    todos os argumentos com valores padrões.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def show_args(arg, def_arg=1, def_arg2=2):
    return &amp;quot;arg={}, def_arg={}, def_arg2={}&amp;quot;.format(arg, def_arg, def_arg2)
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;shell&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; show_args(&amp;quot;tranquility&amp;quot;, &amp;quot;to Houston&amp;quot;, &amp;quot;the eagle has landed&amp;quot;)
    &amp;#39;arg=tranquility, def_arg=to Houston, def_arg2=the eagle has landed&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;É também muito importante ser cuidadoso quando usar estruturas
    de dados mutáveis como argumentos padrões. Definições de função
    são executadas uma vez que essas estruturas de dados mutáveis,
    que são valores de referência, são criados na hora da definição.
    Isto significa que a mesma estrutura mutável de dado é usada
    para todas as funções chamadas, como mostrado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def show_args_using_mutable_defaults(arg, def_arg=[]):
    def_arg.append(&amp;quot;Hello World&amp;quot;)
    return &amp;quot;arg={}, def_arg={}&amp;quot;.format(arg, def_arg)
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;shell&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; show_args_using_mutable_defaults(&amp;quot;test&amp;quot;)
    &amp;quot;arg=test, def_arg=[&amp;#39;Hello World&amp;#39;]&amp;quot; 
&amp;gt;&amp;gt;&amp;gt; show_args_using_mutable_defaults(&amp;quot;test 2&amp;quot;)
    &amp;quot;arg=test 2, def_arg=[&amp;#39;Hello World&amp;#39;, &amp;#39;Hello World&amp;#39;]&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;p&gt;
Em cada chamada de função, &lt;span style="color: #660066;"&gt;Hello
World&lt;/span&gt; é adicionado a lista &lt;span
style="color: #000000;"&gt;def_arg&lt;/span&gt;, e depois de duas
chamadas de função, o argumento padrão tem 2 strings
hello world. É importante tomar nota disso quando usar
argumentos mutáveis padrão como valores padrão. A razão para
isso ficará claro quando nós discutirmos o Python Data Model.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Argumento Chave&lt;/strong&gt;: funções podem ser chamadas usando argumentos
    chave da forma &lt;span style="color: #000000;"&gt;kwarg&lt;/span&gt;&lt;span
    style="color: #666600;"&gt;=&lt;/span&gt;&lt;span
    style="color: #000000;"&gt;valor.&lt;/span&gt;Um kwarg refere ao nome do
    argumento usado na definição da função. Pegue a função definida
    abaixo com argumentos padrão e posicionado&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def show_args(arg, def_arg=1):
    return &amp;quot;arg={}, def_arg={}&amp;quot;.format(arg, def_arg)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para ilustrar uma chamada de função com argumentos chave, a seguinte
função pode ser chamada em qualquer das seguintes maneiras:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;show_args(arg=&amp;quot;test&amp;quot;, def_arg=3)

show_args(&amp;quot;test&amp;quot;)

show_args(arg=&amp;quot;test&amp;quot;)

show_args(&amp;quot;test&amp;quot;, 3)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Em uma chamada de função, argumentos chave não devem vir antes  de
argumentos não chaves, assim, a seguinte maneira irá falhar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;show_args(def_arg=4)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Uma função não pode fornecer valores duplicados para um argumento,
então a seguinte declaração é ilegal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;show_args(&amp;quot;test&amp;quot;, arg=&amp;quot;testing&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No exemplo acima, o argumento arg é um argumento posicional, então o
valor test é atribuído a ele. Tentar atribuir na chave arg novamente
é uma tentativa de múltiplas atribuições, e isso é ilegal.&lt;/p&gt;
&lt;p&gt;Todos os argumentos chaves passados devem corresponder a um dos
argumentos aceitos pela função, e a ordem das chaves incluindo
argumentos não opcionais não é importante, então o seguinte código
no qual a ordem dos argumentos está trocada é legal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;show_args(def_arg=&amp;quot;testing&amp;quot;, arg=&amp;quot;test&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Lista aleatória de argumentos&lt;/strong&gt;: Python também suporta definir
    funções que recebem uma série aleatória de argumentos que são
    passados para a função em uma tupla. Um exemplo disso no tutorial
    python é dado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def write_multiple_items(file, separator, *args): 
    file.write(separator.join(args))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O número aleatório de argumentos devem vir depois dos argumentos
normais; nesse caso, depois dos argumentos &lt;span
style="color: #000000;"&gt;file&lt;/span&gt; e &lt;span
style="color: #000000;"&gt;separator&lt;/span&gt;. A seguir temos um exemplo
de chamada de função para a função definida acima:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;f = open(&amp;quot;test.txt&amp;quot;, &amp;quot;wb&amp;quot;)
write_multiple_items(f, &amp;quot; &amp;quot;, &amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;, &amp;quot;three&amp;quot;, &amp;quot;four&amp;quot;, &amp;quot;five&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;p&gt;
Os argumentos &lt;span style="color: #000000;"&gt;one two three four
five&lt;/span&gt; são todos agrupados juntos em uma tupla que podem ser
acessados através do argumento &lt;span
style="color: #000000;"&gt;args&lt;/span&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Desempacotando Argumentos de Função&lt;/h3&gt;
&lt;p&gt;Algumas vezes, nós podemos ter argumentos para uma chamada de função
tanto em uma tupla, uma lista ou um dicionário. Esses argumentos pode
ser desempacotados nas funções pelas chamadas de função usando os
operadores &lt;span style="color: #000000;"&gt;*&lt;/span&gt; ou &lt;span
style="color: #000000;"&gt;**&lt;/span&gt;. Considere a seguinte função que
recebe 2 argumentos posicionais e mostra os valores&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def print_args&lt;span class="o"&gt;(&lt;/span&gt;a, b&lt;span class="o"&gt;)&lt;/span&gt;:
        print a
        print b
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Se nós tivermos os valores que nós queremos fornecer para a função em
uma lista, então nos poderíamos desempacotar esses valores diretamente
na função, como mostrado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;1, 2&lt;span class="o"&gt;]&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; print_args&lt;span class="o"&gt;(&lt;/span&gt;*args&lt;span class="o"&gt;)&lt;/span&gt;
1
2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Da mesma forma, quando nós temos palavras-chaves, nós podemos usar &lt;span
style="color: #000000;"&gt;dicts&lt;/span&gt; para armazenar, mapeando &lt;span
style="color: #000000;"&gt;kwarg para valor&lt;/span&gt; e o operador &lt;span
style="color: #000000;"&gt;**&lt;/span&gt; para desempacotar os argumentos
chaves para as funções, como mostrado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def parrot&lt;span class="o"&gt;(&lt;/span&gt;voltage, &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;’a stiff’, &lt;span class="nv"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;’voom’&lt;span class="o"&gt;)&lt;/span&gt;:
        print &lt;span class="s2"&gt;&amp;quot;-- This parrot wouldn’t&amp;quot;&lt;/span&gt;, action,
        print &lt;span class="s2"&gt;&amp;quot;if you put&amp;quot;&lt;/span&gt;, voltage, &lt;span class="s2"&gt;&amp;quot;volts through it.&amp;quot;&lt;/span&gt;,
        print &lt;span class="s2"&gt;&amp;quot;E’s&amp;quot;&lt;/span&gt;, state, &lt;span class="s2"&gt;&amp;quot;!&amp;quot;&lt;/span&gt;

&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;voltage&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;four million&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;state&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;bleedin’ demised&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;action&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;VOOM&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; parrot&lt;span class="o"&gt;(&lt;/span&gt;**d&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; This parrot wouldn’t VOOM &lt;span class="k"&gt;if&lt;/span&gt; you put four million volts through it. E’s bleedin’ demised
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;&lt;/h3&gt;
&lt;h3&gt;Definindo funções com &lt;span style="color: #666600;"&gt;*&lt;/span&gt; e &lt;span style="color: #666600;"&gt;**&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Algumas vezes, ao definir uma função, nós podemos não saber de antemão o
número de argumentos a esperar. Isso leva a definição de funções com a
seguinte assinatura:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;show_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O argumento &lt;span style="color: #000000;"&gt;*args&lt;/span&gt; representa uma
sequência de tamanho desconhecido de argumentos posicionais, enquanto
&lt;span style="color: #000000;"&gt;**kwargs&lt;/span&gt; representa um dicionário
de mapeamento nome-valor que pode conter qualquer quantidade de
nome-valor mapeada. O &lt;span style="color: #000000;"&gt;*args&lt;/span&gt; deve
vir antes do &lt;span style="color: #000000;"&gt;**kwargs&lt;/span&gt; na
definição da função. O seguinte código ilustra isso:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def show_args&lt;span class="o"&gt;(&lt;/span&gt;arg, *args, **kwargs&lt;span class="o"&gt;)&lt;/span&gt;:
        print arg
        &lt;span class="k"&gt;for&lt;/span&gt; item in args:
            print args
        &lt;span class="k"&gt;for&lt;/span&gt; key, value in kwargs:
            print key, value

&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;1, 2, 3, 4&lt;span class="o"&gt;]&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;kwargs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; dict&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;testing&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;24, &lt;span class="nv"&gt;year&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2014&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; show_args&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hey&amp;quot;&lt;/span&gt;, *args, **kwargs&lt;span class="o"&gt;)&lt;/span&gt;
hey
1
2
3
4
age 24
name testing
year 2014
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O argumento normal deve ser fornecido para a função, mas o &lt;span
style="color: #000000;"&gt;*args&lt;/span&gt; e &lt;span
style="color: #000000;"&gt;**kwargs&lt;/span&gt; são opcionais, como
demonstrado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; show_args&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hey&amp;quot;&lt;/span&gt;, *args, **kwargs&lt;span class="o"&gt;)&lt;/span&gt;
hey
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Na chamada da função o argumento normal é fornecido normalmente enquanto
os argumentos opcionais são desempacotados na chamada.&lt;/p&gt;
&lt;h2&gt;Funções Anônimas&lt;/h2&gt;
&lt;p&gt;Python também tem suporte para &lt;strong&gt;&lt;em&gt;funções anônimas&lt;/em&gt;&lt;/strong&gt;. Essas função são
criadas usando a palavra chave &lt;span
style="color: #000088;"&gt;lambda.&lt;/span&gt;Expressões lambda em python são da
seguinte forma:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;lambda_expr&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;lambda&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;parameter_list&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Expressões lambda retornam objetos de função depois da avaliação e tem
os mesmo atributos das funções nomeadas. Expressões lamda são
normalmente apenas usadas para funções muito simples em python, como
demonstrado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;square&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; lambda x: x**2
&amp;gt;&amp;gt;&amp;gt; &lt;span class="k"&gt;for&lt;/span&gt; i in range&lt;span class="o"&gt;(&lt;/span&gt;10&lt;span class="o"&gt;)&lt;/span&gt;:
    square&lt;span class="o"&gt;(&lt;/span&gt;i&lt;span class="o"&gt;)&lt;/span&gt;
0
1
4
9
16
25
36
49
64
81
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A expressão lambda acima é equivalente a seguinte função nomeada:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def square&lt;span class="o"&gt;(&lt;/span&gt;x&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="k"&gt;return&lt;/span&gt; x**2
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;&lt;/h3&gt;
&lt;h2&gt;Funções aninhadas e Closures&lt;/h2&gt;
&lt;p&gt;Definições de funções dentro de uma função cria funções aninhadas, assim
como mostrado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def outer&lt;span class="o"&gt;()&lt;/span&gt;:
        &lt;span class="nv"&gt;outer_var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;outer variable&amp;quot;&lt;/span&gt;
        def inner&lt;span class="o"&gt;()&lt;/span&gt;:
            &lt;span class="k"&gt;return&lt;/span&gt; outer_var
        &lt;span class="k"&gt;return&lt;/span&gt; inner
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nesse tipo de definição de função, a função &lt;span
style="color: #000000;"&gt;inner&lt;/span&gt; está apenas no escopo dentro da
função &lt;span style="color: #000000;"&gt;outer&lt;/span&gt;, por isso é na maioria
das vezes mais útil quando a função inner está sendo retornada
(movendo-a para o escopo da outer) ou quando está sendo passada em uma
outra função. Em funções aninhadas, tais como no exemplo acima, uma nova
instância da função aninhada é criada em cada chamada da função outer.
Isso porque durante a execução da função outer, a definição da nova
função inner é executada, mas o corpo não é executado.&lt;/p&gt;
&lt;p&gt;Uma função aninhada tem acesso ao ambiente em que foi criada. Isso é um
resultado direto da semântica da definição de função python. Um
resultado é que a variável definida na função outer pode ser
referenciada na função inner mesmo depois da função outer já ter
finalizado sua execução.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;outer&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;outer_var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;outer variable&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;outer_var&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;inner&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; outer&lt;span class="o"&gt;()&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; x
&amp;lt;&lt;span class="k"&gt;function&lt;/span&gt; inner at 0x0273BCF0&amp;gt;
&amp;gt;&amp;gt;&amp;gt; x&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;outer variable&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Quando funções aninhadas referenciam variáveis de funções externas nós
dizemos que a função aninhada está fechada (closure) sobre a variável
referenciada. Nós podemos usar um dos atributos especiais de objetos
função, &lt;span style="color: #000000;"&gt;__closure__&lt;/span&gt; para
acessar as variáveis fechadas, como demonstrado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;cl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; x.__closure__
&amp;gt;&amp;gt;&amp;gt; cl
&lt;span class="o"&gt;(&lt;/span&gt;&amp;lt;cell at 0x029E4470: str object at 0x02A0FD90&amp;gt;,&lt;span class="o"&gt;)&lt;/span&gt;

&amp;gt;&amp;gt;&amp;gt; cl&lt;span class="o"&gt;[&lt;/span&gt;0&lt;span class="o"&gt;]&lt;/span&gt;.cell_contents
&lt;span class="s1"&gt;&amp;#39;outer variable&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Closures em python tem um comportamento peculiar. No python 2.x e
abaixo, variáveis que apontam para tipos imutáveis tais como string e
números não podem ser recuperados dentro de um closure. O exemplo abaixo
ilustra isso:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; counter&lt;span class="o"&gt;()&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; c&lt;span class="o"&gt;()&lt;/span&gt;
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line 1, in &amp;lt;module&amp;gt;
  File &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line 4, in c
UnboundLocalError: &lt;span class="nb"&gt;local &lt;/span&gt;variable &lt;span class="s1"&gt;&amp;#39;count&amp;#39;&lt;/span&gt; referenced before assignment
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Uma solução bastante instável para isso é fazer uso de um tipo mutável
para capturar o closure, como mostrado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; counter&lt;span class="o"&gt;()&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; c&lt;span class="o"&gt;()&lt;/span&gt;
1
&amp;gt;&amp;gt;&amp;gt; c&lt;span class="o"&gt;()&lt;/span&gt;
2
&amp;gt;&amp;gt;&amp;gt; c&lt;span class="o"&gt;()&lt;/span&gt;
3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Python 3 introduziu a palavra chave &lt;span
style="color: #000088;"&gt;nonlocal&lt;/span&gt; que pode ser usada para resolver
esse problema de escopo de closure, como mostrado abaixo. No tutorial
sobre &lt;strong&gt;namespaces&lt;/strong&gt;, nós descrevemos essas peculiaridades em mais
detalhes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;nonlocal&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;
        &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Closures podem ser usados para manter estados (&lt;strong&gt;não é para isso que
classes servem&lt;/strong&gt;) e para algum simples casos, fornecendo uma solução
mais sucinta e legível que classes. Nós usamos um exemplo de registro
(logging) copiado do
&lt;a href="http://tech.pro/tutorial/1512/python-decorators"&gt;tech_pro&lt;/a&gt; para
ilustrar isso. Imagine uma API de registro extremamente trivial usando
classes baseadas em orientação a objetos que pode fazer logon em
diferentes níveis:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{}: {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_level&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;log_info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;info&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;log_warning&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;warning&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;log_error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Essa mesma funcionalidade pode ser implementada com closures, como
demonstrado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{}: {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;

&lt;span class="n"&gt;log_info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;info&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;log_warning&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;warning&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;log_error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A versão baseada em closure pode ser visto como a maneira mais sucinta e
legível, apesar de que ambas versões implementam a mesma funcionalidade.
Closures também desempenham um papel importante em uma grande função
Python: &lt;strong&gt;funções decoradoras&lt;/strong&gt; &lt;em&gt;(function decorators)&lt;/em&gt;. Essa é uma
funcionalidade amplamente usada que está explicada no próximo tutorial.&lt;/p&gt;
&lt;h3&gt;Leitura Complementar&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://tech.pro/tutorial/1512/python-decorators"&gt;Closures em Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/tutorial/controlflow.html#defining-functions"&gt;Definindo funções&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://dunderlabs.github.io/pages/pythonista-intermediario.html"&gt;Clique aqui para voltar para a tabela de conteúdo.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;N.T: Pessoal, tive uma certa dificuldade ao traduzir este capítulo da
série. Então gostaria de contar com o feedback de vocês nos comentários
para saber se conseguiram entender o que foi proposto :D&lt;/p&gt;</summary><category term="python"></category><category term="python function"></category><category term="translations"></category></entry><entry><title>Introdução ao Python Generators</title><link href="https://dunderlabs.github.io/introducao-ao-python-generators.html" rel="alternate"></link><updated>2015-02-04T12:16:00-03:00</updated><author><name>Patrick Mazulo</name></author><id>tag:dunderlabs.github.io,2015-02-04:introducao-ao-python-generators.html</id><summary type="html">&lt;p&gt;&lt;img alt="Créditos da imagem" src="https://dunderlabs.github.io/images/posts/relationships-generator-iterator.png" /&gt;
Créditos da imagem: &lt;a href="http://nvie.com/posts/iterators-vs-generators/"&gt;http://nvie.com/posts/iterators-vs-generators/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Geradores&lt;/em&gt; (&lt;em&gt;generators&lt;/em&gt;) é um conceito muito fascinante em Python;
&lt;em&gt;geradores&lt;/em&gt; tem uma ampla gama de aplicações, que vai desde simples
avaliação preguiçosa (&lt;em&gt;lazy evaluation&lt;/em&gt;) até avançadas execuções
simultâneas de tarefas (&lt;em&gt;veja&lt;/em&gt; &lt;a href="http://www.dabeaz.com/finalgenerator/"&gt;David
Beazley&lt;/a&gt;). Antes de mergulharmos
no fascinante mundo dos geradores Python, nós pegaremos um pequeno
desvio para explicar iteradores Python (&lt;em&gt;python iterators&lt;/em&gt;), um conceito
que eu acho que seja parte integrante para entender geradores.&lt;/p&gt;
&lt;h3&gt;Iteradores Python&lt;/h3&gt;
&lt;p&gt;Simplificando, um iterador em Python é qualquer tipo Python que pode ser
usado com um loop &lt;em&gt;for.&lt;/em&gt; Listas, tuplas, dicionários e &lt;em&gt;sets&lt;/em&gt; Python são
todos exemplos de iteradores embutidos. Alguém pode perguntar: "O que
faz desses tipos um iterador, e essa é uma propriedade apenas dos tipos
embutidos do Python?"&lt;/p&gt;
&lt;p&gt;Esses tipos são iteradores porque eles implementam o &lt;strong&gt;protocolo
iterador&lt;/strong&gt;. Então, &lt;strong&gt;O que é um protocolo iterador&lt;/strong&gt;? Para responder
esta pergunta, vamos precisar fazer outro pequeno desvio. Em Python,
existem alguns métodos especiais, comumente chamados como &lt;strong&gt;&lt;em&gt;métodos
mágicos&lt;/em&gt;&lt;/strong&gt;. Pode parecer estranho, mas apenas fique comigo e acredite
pela fé no que digo, pelo menos, até chegarmos à orientação a objetos em
Python.&lt;/p&gt;
&lt;p&gt;Esses métodos normalmente não são chamados explicitamente no código, mas
são chamados implicitamente durante sua execução. Um exemplo muito
familiar desses métodos mágicos, é o método &lt;em&gt;__&lt;span
style="color: #000000;"&gt;init&lt;/span&gt;__&lt;/em&gt;, que é mais ou menos como se
fosse um construtor que é chamado durante a inicialização de um objeto
Python. Semelhante a maneira como o método &lt;em&gt;__&lt;span
style="color: #000000;"&gt;init&lt;/span&gt;__&lt;/em&gt; tem de ser implementado na
inicialização de um objeto personalizado, o protocolo iterador tem uma
série de métodos mágicos que precisam ser implementados em qualquer
objeto que queira ser usado como um &lt;strong&gt;iterador&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Esses são os seguintes métodos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;O método __&lt;span style="color: #000000;"&gt;iter&lt;/span&gt;__ que é
    chamado na inicialização de um iterador. Ele deve retornar um objeto
    que tem o método &lt;em&gt;&lt;span style="color: #000088;"&gt;next&lt;/span&gt;()&lt;/em&gt; (no
    Python 3 este método foi mudado para __&lt;span
    style="color: #000000;"&gt;next&lt;/span&gt;__).&lt;/li&gt;
&lt;li&gt;O método &lt;span style="color: #000088;"&gt;&lt;em&gt;next&lt;/em&gt;&lt;/span&gt; que é chamado
    sempre que a função global &lt;em&gt;&lt;span
    style="color: #000088;"&gt;next&lt;/span&gt;()&lt;/em&gt; é invocada com o iterador
    como argumento. O método iterador &lt;span
    style="color: #000088;"&gt;&lt;em&gt;next&lt;/em&gt;&lt;/span&gt;deve retornar o próximo valor
    do iterável. Quando um iterador é usado com um loop &lt;em&gt;for&lt;/em&gt;, o &lt;em&gt;for&lt;/em&gt;
    chama implicitamente o método &lt;em&gt;&lt;span
    style="color: #000088;"&gt;next&lt;/span&gt;()&lt;/em&gt;. Este método levanta uma
    exceção &lt;span style="color: #660066;"&gt;&lt;em&gt;StopIteration&lt;/em&gt;&lt;/span&gt; quando
    não existe mais nenhum novo valor, para sinalizar o fim da iteração.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Qualquer classe Python pode ser definida para agir como um iterador,
desde que o protocolo iterador seja implementado. Isto é ilustrado
através da implementação de um simples iterador que retorna os números
da sequência Fibonacci até um determinado valor máximo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Fib&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                                        
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;                      
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__iter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;                          
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;                          
        &lt;span class="n"&gt;fib&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;StopIteration&lt;/span&gt;                  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;           
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt;for i in Fib&lt;span class="o"&gt;(&lt;/span&gt;10&lt;span class="o"&gt;)&lt;/span&gt;:
        print i      

0
1
1
2
3
5
8
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nós também podemos ir mais em frente e implementar nossa própria função
&lt;span style="color: #000000;"&gt;&lt;em&gt;range&lt;/em&gt;&lt;/span&gt; personalizada para loop em
números. Esta simples implementação apenas entra no loop partindo do 0
para cima.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomRange&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__iter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;numb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;StopIteration&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;numb&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="k"&gt;for&lt;/span&gt; i in CustomRange&lt;span class="o"&gt;(&lt;/span&gt;10&lt;span class="o"&gt;)&lt;/span&gt;:
        print i 
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Voltando aos Geradores&lt;/h3&gt;
&lt;p&gt;Agora, nós temos um entendimento básico sobre iteradores, mas não como
eles se relacionam com geradores. Em resumo, geradores são iteradores. A
&lt;strong&gt;&lt;em&gt;PEP 255&lt;/em&gt;&lt;/strong&gt;, que descreve simples geradores, refere-se a geradores
pelo seu nome completo: &lt;strong&gt;&lt;em&gt;generator-iterator&lt;/em&gt;&lt;/strong&gt; (gerador de
iteradores). Geradores são utilizados quer chamando o método &lt;em&gt;next&lt;/em&gt; no
objeto gerador, ou usando o objeto gerador em um loop &lt;em&gt;for&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Em Python, funções geradoras ou apenas geradores retornam objetos
geradores. Esses geradores são funções que contêm a palavra reservada
&lt;span style="color: #000088;"&gt;&lt;em&gt;yield&lt;/em&gt;&lt;/span&gt;. Ao invés de ter que
escrever cada gerador com o método &lt;em&gt;__&lt;span
style="color: #000000;"&gt;iter&lt;/span&gt;__&lt;/em&gt; e &lt;span
style="color: #000088;"&gt;&lt;em&gt;next&lt;/em&gt;&lt;/span&gt;, que é bastante complicado, Python
fornece a palavra reservada &lt;span style="color: #000088;"&gt;&lt;em&gt;yield&lt;/em&gt;&lt;/span&gt;
que provê uma maneira fácil para definir geradores. Por exemplo, o
iterador de Fibonacci pode ser remodelado como um gerador usando a
palavra reservada &lt;span style="color: #000088;"&gt;&lt;em&gt;yield&lt;/em&gt;&lt;/span&gt;, como
mostrado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O uso da palavra reservada &lt;span
style="color: #000088;"&gt;&lt;em&gt;yield&lt;/em&gt;&lt;/span&gt;simplifica muito a criação do
gerador.&lt;/p&gt;
&lt;h3&gt;A palavra reservada &lt;em&gt;yield&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;A palavra reservada &lt;span style="color: #000088;"&gt;&lt;em&gt;yield&lt;/em&gt;&lt;/span&gt;é usada
da seguinte maneira.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;lista_expressao&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O &lt;span style="color: #000088;"&gt;&lt;em&gt;yield&lt;/em&gt;&lt;/span&gt;é fundamental para as
funções geradoras em Python, mas o que essa palavra reservada &lt;span
style="color: #000088;"&gt;&lt;em&gt;yield&lt;/em&gt;&lt;/span&gt; faz? Para entender o &lt;span
style="color: #000088;"&gt;&lt;em&gt;yield&lt;/em&gt;&lt;/span&gt;, nós contrastamos ela com a
palavra reservada &lt;span style="color: #000088;"&gt;&lt;em&gt;return&lt;/em&gt;&lt;/span&gt;;  uma
outra palavra chave que devolve o controle para o chamador de uma
função. Quando uma função que está executando encontra o &lt;span
style="color: #000088;"&gt;&lt;em&gt;yield&lt;/em&gt;&lt;/span&gt;, ela suspende a execução naquele
ponto, salva seu contexto e retorna para o chamador, juntamente com
qualquer valor na lista_expressao; quando o chamador invoca o método
&lt;em&gt;next&lt;/em&gt; no objeto, a execução da função continua até outro &lt;span
style="color: #000000;"&gt;&lt;em&gt;yield&lt;/em&gt;&lt;/span&gt; ou &lt;span
style="color: #000000;"&gt;&lt;em&gt;return&lt;/em&gt;&lt;/span&gt; ser encontrado, ou quando o fim
da função é atingido. Citando a &lt;strong&gt;&lt;em&gt;PEP 255&lt;/em&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Se a declaração de um yield é encontrado, o estado da função é
congelado, e o valor da lista_expressao é retornado para o chamador
do método next(). Por "congelado" nós queremos dizer que todo o estado
local é retido, incluindo a ligação das variáveis locais, o ponteiro
de instrução e a pilha de avaliação interna: informação suficiente é
salva para que na próxima vez que o .next() é invocado, a função pode
proceder exatamente como se a declaração yield fosse apenas outra
chamada externa. Por outro lado, quando uma função encontra a
declaração de um &lt;span style="color: #000088;"&gt;return&lt;/span&gt;, ele
retorna para o chamador junto com qualquer valor que prosseguir a
declaração do &lt;span style="color: #000088;"&gt;return&lt;/span&gt;, e a
execução de tal função é completa para todos os efeitos. Pode-se
pensar do &lt;span style="color: #000088;"&gt;yield&lt;/span&gt; como o causador
de uma interrupção temporária.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Geradores Python em ação&lt;/h3&gt;
&lt;p&gt;Retornando para a função de números Fibonacci, se nós queremos gerar
todos os número Fibonacci até um determinado valor, o seguinte trecho de
código não-gerador pode ser usado para criar a sequência&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O trecho acima calcula avidamente todos os números abaixo do valor &lt;em&gt;max&lt;/em&gt;
e retorna a coleção de tais números usando uma simples chamada de
função. Por outro lado, usando o gerador Fibonacci para resolver o mesmo
problema é um jogada diferente. Nós podemos usá-lo em um loop &lt;em&gt;for&lt;/em&gt; e
permitir o construtor do &lt;em&gt;for&lt;/em&gt; implicitamente inicializar o gerador e
chamar o método &lt;span style="color: #000088;"&gt;next&lt;/span&gt; no objeto
gerador, ou ao explicitamente inicializá-lo e chamar o método &lt;span
style="color: #000088;"&gt;next&lt;/span&gt; no objeto. Os valores são
retornados, um depois do outro, ao chamar o método &lt;span
style="color: #000088;"&gt;next&lt;/span&gt; no gerador. O gerador de números
Fibonacci é implementado usando &lt;span
style="color: #000088;"&gt;&lt;em&gt;yield&lt;/em&gt;&lt;/span&gt; logo abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nas seções seguintes, nós explicitamente inicializaremos o gerador, e
faremos uso da função &lt;span style="color: #000088;"&gt;next&lt;/span&gt; para
pegar os valores do gerador. Primeiro, nós vamos inicializar o objeto
gerador como mostrado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;gen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; fib&lt;span class="o"&gt;(&lt;/span&gt;10&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; gen
&amp;lt;generator object fib at 0x1069a6d20&amp;gt;
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O que aconteceu acima é que quando o gerador é chamado, os argumentos
(max tem um valor máximo de 10) são ligados aos nomes, mas o corpo da
função não é executado. Ao invés disso, um objeto &lt;strong&gt;generator-iterator&lt;/strong&gt;
é retornado como mostrado pelo valor de gen. Este objeto pode então ser
usado como um iterador. Note que é a presença da palavra reservada &lt;span
style="color: #000088;"&gt;&lt;em&gt;yield&lt;/em&gt;&lt;/span&gt; é responsável por isso.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; next&lt;span class="o"&gt;(&lt;/span&gt;gen&lt;span class="o"&gt;)&lt;/span&gt;
0
&amp;gt;&amp;gt;&amp;gt; next&lt;span class="o"&gt;(&lt;/span&gt;gen&lt;span class="o"&gt;)&lt;/span&gt;
1
&amp;gt;&amp;gt;&amp;gt; next&lt;span class="o"&gt;(&lt;/span&gt;gen&lt;span class="o"&gt;)&lt;/span&gt;
1
&amp;gt;&amp;gt;&amp;gt; next&lt;span class="o"&gt;(&lt;/span&gt;gen&lt;span class="o"&gt;)&lt;/span&gt;
2
&amp;gt;&amp;gt;&amp;gt; next&lt;span class="o"&gt;(&lt;/span&gt;gen&lt;span class="o"&gt;)&lt;/span&gt;
3
&amp;gt;&amp;gt;&amp;gt; next&lt;span class="o"&gt;(&lt;/span&gt;gen&lt;span class="o"&gt;)&lt;/span&gt;
5
&amp;gt;&amp;gt;&amp;gt; next&lt;span class="o"&gt;(&lt;/span&gt;gen&lt;span class="o"&gt;)&lt;/span&gt;
8
&amp;gt;&amp;gt;&amp;gt; next&lt;span class="o"&gt;(&lt;/span&gt;gen&lt;span class="o"&gt;)&lt;/span&gt;
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line 1, in &amp;lt;module&amp;gt;
StopIteration
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora quando chamamos a função &lt;span style="color: #000088;"&gt;next&lt;/span&gt;
com o objeto gerador como argumento, o corpo da função geradora é
executado até ela encontrar a declaração de um &lt;em&gt;&lt;span
style="color: #000088;"&gt;yield&lt;/span&gt;,&lt;/em&gt; &lt;span
style="color: #000088;"&gt;&lt;em&gt;return&lt;/em&gt;&lt;/span&gt; ou o fim da função ser atingido.
No caso de encontrar a declaração de um &lt;em&gt;yield&lt;/em&gt;, a expressão seguinte ao
&lt;em&gt;yield&lt;/em&gt; é retornado para o chamador, e o estado da função é salvo.
Quando a função &lt;span style="color: #000088;"&gt;next&lt;/span&gt; é chamada no
objeto gerador de Fibonacci, a variável &lt;span
style="color: #000000;"&gt;a&lt;/span&gt; &lt;span style="color: #000000;"&gt;está
ligado a 0&lt;/span&gt; e &lt;span style="color: #000000;"&gt;b está ligado a
1&lt;/span&gt;. A condição do &lt;span style="color: #000088;"&gt;&lt;em&gt;while&lt;/em&gt;&lt;/span&gt; é
verdadeira, de modo que a primeira declaração do loop &lt;em&gt;while&lt;/em&gt; é
executada, que passa a ser uma expressão &lt;span
style="color: #000088;"&gt;&lt;em&gt;yield&lt;/em&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Esta expressão retorna para o chamador o valor de a que passa a ser 0, e
suspende naquele ponto com todo o contexto local salvo. Pense nisso como
comer seu almoço em partes, e que em seguida você guarda ele pra
continuar a comer mais tarde. Você pode continuar comendo até seu almoço
se esgotar, e no caso de um gerador isto é a função obtendo a declaração
de um &lt;em&gt;return&lt;/em&gt; ou o fim do corpo da função. Quando a função &lt;span
style="color: #000088;"&gt;next&lt;/span&gt; é chamada no objeto Fibonacci
novamente, a execução é retomada na linha a, b = b, a+b e continua
executando normalmente até um &lt;span
style="color: #000088;"&gt;&lt;em&gt;yield&lt;/em&gt;&lt;/span&gt; ser encontrado novamente. E assim
continua até a condição do loop for false e uma exceção &lt;span
style="color: #660066;"&gt;StopIteration&lt;/span&gt; seja levantada, que é o
sinal que não há mais dados para gerar.&lt;/p&gt;
&lt;h3&gt;Expressões Geradoras&lt;/h3&gt;
&lt;p&gt;Em &lt;a href="http://indacode.com/python-comprehensions/" title="Python Comprehensions"&gt;Python
Comprehensions&lt;/a&gt;nós
discutimos sobre list comprehensions e como elas são formadas. Uma
desvantagem com list comprehensions é que os valores são todos
calculados de uma vez, independente se esses valores são necessários
naquele momento ou não. Isto pode algumas vezes consumir uma quantidade
excessiva de memória. A &lt;a href="https://www.python.org/dev/peps/pep-0289/"&gt;&lt;strong&gt;PEP
289&lt;/strong&gt;&lt;/a&gt;propôs a expressão
geradora para resolver isto, e esta proposta foi aceita e adicionada a
linguagem. Expressões geradoras são como list comprehensions; a única
diferença é que os colchetes na list comprehensions são substituídos por
parênteses. Nós contrastamos uma list comprehension com uma expressão
geradora logo abaixo.&lt;/p&gt;
&lt;p&gt;Para gerar uma lista com o quadrado dos número de 0 e 10 usando list
comprehensions é feita da seguinte forma:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;i**2 &lt;span class="k"&gt;for&lt;/span&gt; i in range&lt;span class="o"&gt;(&lt;/span&gt;10&lt;span class="o"&gt;)]&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; squares
&lt;span class="o"&gt;[&lt;/span&gt;0, 1, 4, 9, 16, 25, 36, 49, 64, 81&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nós poderíamos usar uma expressão geradora, tal como mostrada abaixo, no
lugar de uma list comprehension:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;i**2 &lt;span class="k"&gt;for&lt;/span&gt; i in range&lt;span class="o"&gt;(&lt;/span&gt;10&lt;span class="o"&gt;))&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; squares
&amp;lt;generator object &amp;lt;genexpr&amp;gt; at 0x7f8c48ec8cd0&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nós podemos então acessar os valores do gerador usando um loop &lt;em&gt;for&lt;/em&gt; ou
o método &lt;span style="color: #000088;"&gt;next&lt;/span&gt;, como mostrado
abaixo. Cada valor é computado sob demanda, ou seja, só quando
requisitado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="k"&gt;for&lt;/span&gt; square in squares:
            print square
0
1
4
9
16
25
36
49
64
81
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;De que servem esses geradores?&lt;/h3&gt;
&lt;p&gt;Geradores Python fornecem a base para &lt;strong&gt;avaliação preguiçosa&lt;/strong&gt; e
&lt;strong&gt;cálculo sob demanda&lt;/strong&gt; em Python. Avaliação preguiçosa é uma parte
integral do processamento de fluxo (processamento de grande quantidades
de dados). Por exemplo, imagine que nós queremos criar uma quantidade
indeterminada de números Fibonacci, isto não seria possível com uma
abordagem sem geradores, porque nós temos que definir a quantidade de
números que precisamos ou entrar num loop infinito. Por outro lado,
adotando a abordagem dos geradores, fazer isso se torna trivial; nós
apenas temos que chamar o &lt;span style="color: #000088;"&gt;next&lt;/span&gt; para
pegar o próximo número Fibonacci, sem se preocupar sobre onde ou quando
o fluxo de números terminam.&lt;/p&gt;
&lt;p&gt;Um tipo mais prático de processamento de fluxo é manipulando grandes
arquivos de dados tais como arquivos de log. Geradores fornecem métodos
eficientes para processamento desses dados, onde só algumas partes do
arquivo são tratadas em um ponto no tempo. (&lt;a href="http://www.dabeaz.com/generators-uk/GeneratorsUK.pdf"&gt;David
Beazley&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Geradores também podem ser usados para substituir callbacks (&lt;em&gt;retorno de
chamada de funções&lt;/em&gt;). Ao invés de passar um callback para uma função, a
função pode ceder o controle (&lt;em&gt;yield control&lt;/em&gt;) para o chamador quando
ele precisar informar algo ao chamador. O chamador pode então invocar
uma função que teria sido usada como callback. Isto libera a função
principal da obrigação de saber sobre o callback.&lt;/p&gt;
&lt;p&gt;Em um nível mais avançado, geradores podem ser usados para implementar
concorrência (&lt;a href="http://www.dabeaz.com/finalgenerator/"&gt;David Beazley&lt;/a&gt;).
Quando um gerador &lt;span style="color: #000000;"&gt;&lt;em&gt;yields&lt;/em&gt;&lt;/span&gt; cede o
controle para o chamador, o chamador pode então ir em frente e chamar
outro gerador, simulando concorrência.&lt;/p&gt;
&lt;p&gt;O que listamos acima são apenas algumas das aplicabilidades dos
geradores Python. Em um post futuro, nós discutiremos novas adições ao
gerador Python que permitem um chamador enviar valores para o gerador,
bem como alguns usos avançados de geradores.&lt;/p&gt;
&lt;h3&gt;Leitura complementar&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-0255/"&gt;PEP 255 – Simple Generators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-0289/"&gt;PEP 289 – Generator Expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.dabeaz.com/finalgenerator/FinalGenerator.pdf"&gt;Generators: The Final Frontier by David Beazley&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/tutorial/classes.html#generators"&gt;Python Tutorials - Generators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/tutorial/classes.html#generator-expressions"&gt;Python Tutorials - Generator Expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/tutorial/classes.html#iterators"&gt;Python Tutorials - Iterators&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://dunderlabs.github.io/pages/pythonista-intermediario.html"&gt;Clique aqui para voltar para a tabela de conteúdo.&lt;/a&gt;&lt;/p&gt;</summary><category term="python"></category><category term="python iterators"></category><category term="generators"></category><category term="translations"></category></entry><entry><title>Python Comprehensions</title><link href="https://dunderlabs.github.io/python-comprehensions.html" rel="alternate"></link><updated>2015-01-30T02:25:00-03:00</updated><author><name>Patrick Mazulo</name></author><id>tag:dunderlabs.github.io,2015-01-30:python-comprehensions.html</id><summary type="html">&lt;p&gt;&lt;img alt="Créditos da imagem" src="https://dunderlabs.github.io/images/posts/list1.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Créditos da imagem: &lt;a href="https://datasciencelab.wordpress.com/2014/01/08/list-comprehension-in-python/"&gt;https://datasciencelab.wordpress.com/2014/01/08/list-comprehension-in-python/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python comprehensions são construções sintáticas que permitem que
sequências sejam construídas a partir de outras sequências de forma
clara e concisa. Existem três tipo de Python comprehensions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;list comprehensions,&lt;/li&gt;
&lt;li&gt;set comprehenscions, e&lt;/li&gt;
&lt;li&gt;dict comprehensions.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Construções de list comprehensions tem sido parte do Python desde a
versão 2.0, enquanto set e dict comprehensions só a partir do Python
2.7.&lt;/p&gt;
&lt;h3&gt;List Comprehensions&lt;/h3&gt;
&lt;p&gt;List comprehensions são de longe a construção de comprehensions mais
popular. List comprehensions fornecem uma maneira concisa de criar uma
nova lista de elementos que satisfazem uma dada condição a partir de um
&lt;strong&gt;iterável&lt;/strong&gt;. Um &lt;strong&gt;iterável&lt;/strong&gt; é qualquer construção python que possa ser
posto/iterado em um loop. Exemplos de iteráveis embutidos incluem lists,
sets e tuples. O exemplo abaixo da &lt;a href="https://docs.python.org/2/tutorial/datastructures.html"&gt;Documentação
Python&lt;/a&gt; ilustra
o uso de list comprehensions. Neste exemplo, nós queremos criar uma
lista com os números elevado ao quadrado de 0 a 10. Uma maneira
convencional de criar esta lista sem comprehensions é mostrada abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span class="k"&gt;for&lt;/span&gt; x in range&lt;span class="o"&gt;(&lt;/span&gt;10&lt;span class="o"&gt;)&lt;/span&gt;:
...     squares.append&lt;span class="o"&gt;(&lt;/span&gt;x**2&lt;span class="o"&gt;)&lt;/span&gt;
...
&amp;gt;&amp;gt;&amp;gt; squares
&lt;span class="o"&gt;[&lt;/span&gt;0, 1, 4, 9, 16, 25, 36, 49, 64, 81&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A mesma lista pode ser criada de uma maneira mais concisa usando list
comprehensions, como abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;x**2 &lt;span class="k"&gt;for&lt;/span&gt; x in range&lt;span class="o"&gt;(&lt;/span&gt;10&lt;span class="o"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A versão com comprehension parece ser obviamente mais clara e concisa do
que o método convencional.&lt;/p&gt;
&lt;p&gt;De acordo com a documentação python, &lt;strong&gt;uma list comprehension consiste
de colchetes contendo uma expressão seguida por uma ou mais cláusulas 
&lt;em&gt;for&lt;/em&gt; ou cláusulas &lt;em&gt;if,&lt;/em&gt; como mostrado abaixo&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;[expression for item1 in iterable1 if condition1 
            for item2 in iterable2 if condition2
            ...
            for itemN in iterableN if conditionN ]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O resultado é uma nova lista resultante da avaliação da expressão no
contexto das cláusulas &lt;em&gt;for&lt;/em&gt; e &lt;em&gt;if&lt;/em&gt; em seguida. Por exemplo, para criar
uma lista com o quadrado dos números pares entre 0 e 10, a seguinte
comprehension é usada:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;even_squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;i**2 &lt;span class="k"&gt;for&lt;/span&gt; i in range&lt;span class="o"&gt;(&lt;/span&gt;10&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; i % &lt;span class="nv"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; 0&lt;span class="o"&gt;]&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; even_squares
&lt;span class="o"&gt;[&lt;/span&gt;0, 4, 16, 36, 64&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A expressão i**2 é computada no contexto da cláusula &lt;em&gt;for&lt;/em&gt; que itera
sobre os número de 0 a 10, e a cláusula &lt;em&gt;if&lt;/em&gt;  filtra os números não
pares.&lt;/p&gt;
&lt;h3&gt;Loops &lt;em&gt;for&lt;/em&gt; aninhandos numa list comprehensions&lt;/h3&gt;
&lt;p&gt;List comprehensions também podem ser usadas com múltiplos ou loops &lt;em&gt;for&lt;/em&gt;
aninhados. Considerando, por exemplo, o simples fragmento de código
mostrado logo abaixo que cria uma tupla de pares de números extraídos
das duas sequências apresentadas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;combs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span class="k"&gt;for&lt;/span&gt; x in &lt;span class="o"&gt;[&lt;/span&gt;1,2,3&lt;span class="o"&gt;]&lt;/span&gt;:
...     &lt;span class="k"&gt;for&lt;/span&gt; y in &lt;span class="o"&gt;[&lt;/span&gt;3,1,4&lt;span class="o"&gt;]&lt;/span&gt;:
...         &lt;span class="k"&gt;if&lt;/span&gt; x !&lt;span class="o"&gt;=&lt;/span&gt; y:
...             combs.append&lt;span class="o"&gt;((&lt;/span&gt;x, y&lt;span class="o"&gt;))&lt;/span&gt;
...
&amp;gt;&amp;gt;&amp;gt; combs
&lt;span class="o"&gt;[(&lt;/span&gt;1, 3&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;1, 4&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;2, 3&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;2, 1&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;2, 4&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;3, 1&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;3, 4&lt;span class="o"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O código acima pode ser reescrito de uma maneira mais simples e concisa,
como demonstrado abaixo usando list comprehensions.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="o"&gt;[(&lt;/span&gt;x, y&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; x in &lt;span class="o"&gt;[&lt;/span&gt;1,2,3&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; y in &lt;span class="o"&gt;[&lt;/span&gt;3,1,4&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; x !&lt;span class="o"&gt;=&lt;/span&gt; y&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[(&lt;/span&gt;1, 3&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;1, 4&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;2, 3&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;2, 1&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;2, 4&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;3, 1&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;3, 4&lt;span class="o"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;É importante levar em consideração em como a ordem dos loops &lt;em&gt;for&lt;/em&gt; foi
usada nesta list comprehension. A observação cuidadosa dos trechos de
código usando comprehension e aquele sem comprehension mostra que a
ordem dos loops &lt;em&gt;for&lt;/em&gt; na comprehension seguiu a mesma ordem, como se
tivesse sido escrita sem comprehensions. O mesmo se aplica para loops
&lt;em&gt;for&lt;/em&gt; aninhados com profundidade maior que 2 loops.&lt;/p&gt;
&lt;h3&gt;List Comprehensions Aninhadas&lt;/h3&gt;
&lt;p&gt;List comprehensions também podem ser aninhadas. Considere o seguinte
exemplo extraído da documentação python, de uma matriz 3x4 implementada
como uma lista de 3 listas de tamanho 4:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;matrix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
...     &lt;span class="o"&gt;[&lt;/span&gt;1, 2, 3, 4&lt;span class="o"&gt;]&lt;/span&gt;,
...     &lt;span class="o"&gt;[&lt;/span&gt;5, 6, 7, 8&lt;span class="o"&gt;]&lt;/span&gt;,
...     &lt;span class="o"&gt;[&lt;/span&gt;9, 10, 11, 12&lt;span class="o"&gt;]&lt;/span&gt;,
... &lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Transposição é uma operação das matrizes que cria uma nova matriz a
partir de uma velha, usando as linhas da matriz velha como as colunas da
matriz nova, e as colunas da matriz velha como as linhas da matriz nova.
As linhas e colunas da matriz precisam ser transpostas usando a seguinte
list comprehension:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="o"&gt;[[&lt;/span&gt;row&lt;span class="o"&gt;[&lt;/span&gt;i&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; row in matrix&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; i in range&lt;span class="o"&gt;(&lt;/span&gt;4&lt;span class="o"&gt;)]&lt;/span&gt;
&lt;span class="o"&gt;[[&lt;/span&gt;1, 5, 9&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="o"&gt;[&lt;/span&gt;2, 6, 10&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="o"&gt;[&lt;/span&gt;3, 7, 11&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="o"&gt;[&lt;/span&gt;4, 8, 12&lt;span class="o"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O código acima é equivalente ao trecho dado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;transposed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span class="k"&gt;for&lt;/span&gt; i in range&lt;span class="o"&gt;(&lt;/span&gt;4&lt;span class="o"&gt;)&lt;/span&gt;:
...     transposed.append&lt;span class="o"&gt;([&lt;/span&gt;row&lt;span class="o"&gt;[&lt;/span&gt;i&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; row in matrix&lt;span class="o"&gt;])&lt;/span&gt;
...
&amp;gt;&amp;gt;&amp;gt; transposed
&lt;span class="o"&gt;[[&lt;/span&gt;1, 5, 9&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="o"&gt;[&lt;/span&gt;2, 6, 10&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="o"&gt;[&lt;/span&gt;3, 7, 11&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="o"&gt;[&lt;/span&gt;4, 8, 12&lt;span class="o"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Set comprehensions&lt;/h3&gt;
&lt;p&gt;Set comprehensions foram adicionado ao python na versão 2.7. Em set
comprehensions, nós usamos chaves ao invés de colchetes. Por exemplo,
para criar o set do quadrado de todos os números entre 0 e 10, o
seguinte set comprehension pode ser usado em vez do loop normal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;i**2 &lt;span class="k"&gt;for&lt;/span&gt; i in range&lt;span class="o"&gt;(&lt;/span&gt;10&lt;span class="o"&gt;)}&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; x
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="o"&gt;([&lt;/span&gt;0, 1, 4, 81, 64, 9, 16, 49, 25, 36&lt;span class="o"&gt;])&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Dict Comprehension&lt;/h3&gt;
&lt;p&gt;Assim como set comprehensions, dict comprehensions foram adicionados ao
python na versão 2.7. Abaixo nós criamos um mapping, sendo as chaves os
números entre 0 e 10, e os valores seus quadrados, usando dict
comprehensions.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;i:i**2 &lt;span class="k"&gt;for&lt;/span&gt; i in range&lt;span class="o"&gt;(&lt;/span&gt;10&lt;span class="o"&gt;)}&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; x
&lt;span class="o"&gt;{&lt;/span&gt;0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Leitura complementar&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/tutorial/datastructures.html"&gt;Documentação Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python Essential Reference, Fourth Edition&lt;/li&gt;
&lt;li&gt;&lt;a href="http://python-3-patterns-idioms-test.readthedocs.org/en/latest/Comprehensions.html"&gt;Python 3 Patterns, Recipes and Idioms&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href="https://dunderlabs.github.io/pages/pythonista-intermediario.html"&gt;Clique aqui para voltar para a tabela de conteúdo.&lt;/a&gt;&lt;/p&gt;</summary><category term="python"></category><category term="iterators"></category><category term="list comprehensions"></category><category term="translations"></category></entry><entry><title>Corrida Inglesa</title><link href="https://dunderlabs.github.io/corrida-inglesa.html" rel="alternate"></link><updated>2015-01-28T17:07:00-03:00</updated><author><name>Patrick Mazulo</name></author><id>tag:dunderlabs.github.io,2015-01-28:corrida-inglesa.html</id><summary type="html">&lt;p&gt;&lt;img alt="It's time to learn!" src="https://dunderlabs.github.io/images/posts/aprender_ingles.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Créditos da imagem: &lt;a href="http://wiseup.com/magazine/aprender-ingles"&gt;http://wiseup.com/magazine/aprender-ingles&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Saber inglês pra quem trabalha em TI além de ser mais do que necessário,
é essencial para sobreviver em meio ao mercado. Existem milhares de
motivos para isso, mas podemos resumir em apenas um: TODOS os materiais
mais atualizados, são feitos em inglês, e não existem muitas pessoas que
tenham tempo disponível o suficiente para traduzir tudo conforme o fluxo
de saída. Desse modo, não há outra maneira a não ser aprender inglês.&lt;/p&gt;
&lt;p&gt;Claramente você não precisar ter a dicção do &lt;a href="http://youtu.be/Mm4YFpO3y7Q?t=1m56s"&gt;rapper mais rápido do
mundo&lt;/a&gt;. Mas, no mínimo, ter a
capacidade suficiente para poder ler livros e artigos em inglês (mas
saber escrever, ouvir e falar também conta muito).&lt;/p&gt;
&lt;p&gt;Há alguns anos (sim, anos mesmo) que adio o estudo aprofundado do
inglês. Só aquele velho e maroto skimming/scanning com uma velha
ajudinha do Google Translate já me salvavam nos momentos que eu
precisava ler algo em inglês (e eram poucos esses momento). Mas, eu
finalmente ~~criei vergonha na cara ~~ vi que para que eu me tornasse o
ótimo profissional que eu quero ser, deveria sair da zona de conforto e
começar a estudar inglês &lt;strong&gt;pra valer!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Irei falar um pouco sobre essa minha experiência nesse processo de
aprendizado, mostrando quais métodos e técnicas eu estou usando para dar
aquele &lt;em&gt;up&lt;/em&gt; no inglês.&lt;/p&gt;
&lt;p&gt;Em meados de setembro de 2014, tomei essa decisão: vou estudar inglês
com o objetivo de me tornar fluente. Mas essa não seria a primeira vez
que eu iria tentar. Então o primeiro passo foi criar um
cronograma/roteiro diário que eu pudesse seguir, e por fim, tornar um
hábito. Há 1 mês atrás pesquisando sobre mudança de hábitos, acabei
encontrando artigos que falavam sobre a &lt;a href="http://www.antonioazevedo.com.br/archives/967"&gt;técnica dos 21 dias&lt;/a&gt;, que em resumo é:
Se você repetir determinadas ações diariamente em um determinado horário
durante 21 dias, as chances disso se tornar um hábito são
&lt;strong&gt;altíssimas.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Depois disso, consegui fechar um cronograma dividindo meu dia em
horários, e distribuindo entre eles os assuntos que eu iria estudar.
Finalizada essa parte, a próxima seria encontrar fontes de estudos para
acelerar o desempenho. Entrei num curso de inglês público da minha
cidade, e comecei a pesquisar por cursos no YouTube e plataformas de
ensino online. E é justamente sobre essas partes que vou falar agora.&lt;/p&gt;
&lt;p&gt;Ao pesquisar sobre plataformas online, acabei encontrando 2 ótimas. A
primeira foi o Duolingo. Na realidade, esse já era conhecido meu há uns
3 anos. Mas nunca fui realmente efetivo. Dessa vez, resolvi explorar
tudo o que ele poderia me proporcionar. E o resultado?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Em 4 meses (de setembro-janeiro), eu nunca havia aprendido
    tanto inglês. Posso até dizer que nesse tempo, aprendi o que nunca
    aprendi em 4 anos de ensino médio-técnico.&lt;/li&gt;
&lt;li&gt;Consegui melhorar todos os campos: writing, reading, listening
    and speaking.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;O &lt;a href="http://www.duolingo.com"&gt;Duolingo&lt;/a&gt; tem uma metodologia muito boa. Ele
é uma plataforma de ensino gamificada, com rank de pontuação entre você
e seus amigos. Se você possui um smartphone, pode instalá-lo, e assim
ele vai lembrar você diariamente para estudar um pouco. Além de tudo
isso, Duolingo também tem o que é chamado de
&lt;a href="https://www.duolingo.com/translations"&gt;imersão&lt;/a&gt;que nada mais é do que
uma seção do site onde você pode traduzir artigos, e ganhar mais pontos
por isso. A medida que você traduz, e que consegue boas aprovações das
suas traduções, você também passa de nível. Uma ótima vantagem dele
também é que ele conta com uma ótima jogada de interação de usuários. Já
fiz alguns bons amigos por lá :)&lt;/p&gt;
&lt;p&gt;Em conjunto com ele, também estou usando o
&lt;a href="http://www.memrise.com/course/189580/curso-completo-de-ingles-full-audio/"&gt;Memrise&lt;/a&gt;,
que tem um curso em áudio (~~gigante~~) completo, que frisa
principalmente o writing, reading e listening. Também o indico
fortemente.&lt;/p&gt;
&lt;p&gt;No YouTube você também vai encontrar ótimos canais, que ensinam desde o
básico, até algumas conversações bem elaboradas.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/user/agoraeufaloingles"&gt;AgoraEuFalo&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Nesse canal, o Leonardo Leite posta vídeo aulas de inglês,
    lições de inglês em mp3 e gravações de situações reais.
    Muito bacana.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/user/autodidatasemingles/"&gt;Autodidatas em Inglês&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Além de dicas e vídeos ensinando inglês, o canal (que possui
    blog e fanpage no Facebook) posta materiais para download sobre
    inglês em todos níveis, desde os mais básicos possíveis até
    TOEFL e IELTS.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/user/ExpertSchool"&gt;Elen Fernandes Expert School Online&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;A Elen Fernandes sempre posta ótimos vídeo com dicas e macetes
    para aprimorar o aprendizado de inglês.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/user/philochko"&gt;American English n' culture with Philochko&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Este é um canal de um americano que ensina inglês, além de
    conversações cotidianas, de forma fácil e engraçada. Já é
    preciso ter um pouco de experiência no listening para poder
    compreender o que ele fala.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Existem diversos outros canais, mas esses 4 são os que eu mais tenho
utilizado.&lt;/p&gt;
&lt;p&gt;Mas tão importante quanto essas dicas, existe essa que é: praticar.
Entrando nessa questão, eu separo em 2 grupos:&lt;/p&gt;
&lt;p&gt;1º - Pessoas que querem ter um inglês bom o suficiente para poder ler e
escrever com facilidade.&lt;/p&gt;
&lt;p&gt;2º - Pessoas que além disso, também querem ter a facilidade de poder
conversar com outras pessoas nesse idioma.&lt;/p&gt;
&lt;p&gt;A próxima dica, vale para os 2 grupos.&lt;/p&gt;
&lt;p&gt;Uma ótima maneira de poder praticar e então chegar no nível desejado, é
&lt;strong&gt;traduzindo&lt;/strong&gt;. Isso mesmo, tradução.&lt;/p&gt;
&lt;p&gt;Ao trabalhar com tradução de textos, você estará trabalhando seu
writing, reading e também sua interpretação de texto. Você vai cada vez
mais se acostumando em ter contato com textos em inglês, e ter mais
facilidade em ler tais textos. Se você for da área de computação, como
eu, uma ótima maneira de fazer isso seria traduzindo documentações de
frameworks/bibliotecas, artigos daquele blog que você começou a
acompanhar. Vale tudo. Além de estar melhorando suas habilidade em
inglês, estará ajudando pessoas que ainda não estão no mesmo nível que
você :D&lt;/p&gt;
&lt;p&gt;A próxima dica, vale principalmente para o segundo grupo: falar. Fale em
inglês. Conhece algum amigo que seja muito bom em conversação? Peça para
que os próximos diálogos entre vocês sejam em inglês, e peça também que
ele o corrija quando necessário. Não há melhor maneira de melhorar sua
pronúncia, e tudo o que o speaking cobre, do que falando.&lt;/p&gt;
&lt;p&gt;Recentemente eu descobri um ótimo site, chamado
&lt;a href="http://italki.com/"&gt;italki&lt;/a&gt;. É uma plataforma onde você pode procurar e
contratar professores nativos do idioma que você quer aprender (no
italki você pode aprender diversos idiomas, além do inglês). Mas o
grande diferencial é o seguinte: na seção community, você pode procurar
por usuários que queiram aprender o seu idioma (português). Assim, esse
&lt;em&gt;partner&lt;/em&gt; lhe ajudará a aprender inglês, e você o ajudará a falar
português. Já consegui falar com 2 usuários, um da Romênia e outro do
Canadá. Estamos à combinar os dias das aulas.&lt;/p&gt;
&lt;p&gt;Por fim, este está sendo meu cronograma para aprender inglês, que estou
seguindo para conseguir alcançar meu objetivo. Você pode se identificar
em alguns pontos, e não em outros. Mas uma coisa é certa: o resultado só
virá com a ação das nossas atitudes. :)&lt;/p&gt;
&lt;p&gt;Deixe nos comentários como você tem feito para aprimorar seu inglês,
técnicas, plataformas e canais do YouTube usados nessa empreitada.&lt;/p&gt;
&lt;p&gt;Cheers!&lt;/p&gt;</summary><category term="english"></category><category term="tips"></category></entry></feed>