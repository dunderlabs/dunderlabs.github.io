<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>__labs__</title><link href="https://dunderlabs.github.io/" rel="alternate"></link><link href="https://dunderlabs.github.io/feeds/python.atom.xml" rel="self"></link><id>https://dunderlabs.github.io/</id><updated>2020-05-31T10:56:00-03:00</updated><entry><title>Inserindo informações em PDFs editáveis com Python</title><link href="https://dunderlabs.github.io/inserindo-informacoes-em-pdfs-editaveis.html" rel="alternate"></link><updated>2020-05-31T10:56:00-03:00</updated><author><name>Patrick Mazulo</name></author><id>tag:dunderlabs.github.io,2020-05-31:inserindo-informacoes-em-pdfs-editaveis.html</id><summary type="html">&lt;p&gt;&lt;img alt="Python + PDF" src="https://dunderlabs.github.io/images/posts/python-pdf.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Créditos da imagem: &lt;a href="https://pdftables.com/blog/pdf-to-excel-with-python"&gt;https://pdftables.com/blog/pdf-to-excel-with-python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Fala pessoal, tudo beleza? Quase 3 anos depois, estou de volta ao blog. E dessa vez, para ficar!&lt;/p&gt;
&lt;p&gt;&lt;img alt="I am back" src="https://media.giphy.com/media/yj5UdA4elp8Wc/giphy.gif" /&gt;&lt;/p&gt;
&lt;h1&gt;Como começou&lt;/h1&gt;
&lt;p&gt;Há algum tempo que eu estava pensando em algum assunto interessante para voltar a escrever aqui. Algo pequeno porém conciso. Daí, em um dia normal do trabalho, passei muita dor de cabeça pra resolver um problema. Era um projeto que um colega me propôs onde iríamos melhorar um processo para os nossos usários internos. Atualmente, pra finalizar esse processo, nossos usuários faziam o seguinte:
- Baixavam um template de PDF
- Buscavam no sistema as informações necessárias para preenchê-lo
- Preenchiam manualmente
- Exportavam o template como um novo PDF (para que fosse read-only)
- Checavam novamente se todas as informações estava corretas&lt;/p&gt;
&lt;p&gt;Acho que já deu pra visualizar onde o gargalo e consumo de tempo estão, né? Pois é. Para resolver isso, a proposta seria: inserir essas informações no template de PDF automáticamente com os dados que já tínhamos no banco de dados... Na primeira vez que ele me falou isso, minha reação imediata foi:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Como???" src="https://media.giphy.com/media/QjIz1AqkGTszK/giphy.gif" /&gt;&lt;/p&gt;
&lt;h1&gt;A busca pela lib (quase) perfeita&lt;/h1&gt;
&lt;p&gt;É bem comum manipulações com certos tipos de arquivo, como &lt;code&gt;.csv&lt;/code&gt; ou mesmo arquivos &lt;code&gt;.xlsx&lt;/code&gt;. Apesar de eu saber que não é impossível fazer o mesmo com PDF, pelo pouco que eu sabia do arquivo, seria bem trabalhoso (spoiler: nem foi tanto assim). Certo, se é isso que precisamos fazer, vamos nessa. Comecei a pesquisar sobre maneiras de manipular arquivos PDF. Uma amiga do trabalho também me enviou dois links (&lt;a href="https://medium.com/@umerfarooq_26378/python-for-pdf-ef0fac2808b0"&gt;PDF for Python&lt;/a&gt; e &lt;a href="https://towardsdatascience.com/pdf-preprocessing-with-python-19829752af9f"&gt;PDF processing with Python&lt;/a&gt;) que ajudaram bastante.&lt;/p&gt;
&lt;p&gt;Neles temos listados algumas libs Python já existentes para lidar com esse tipo de arquivo. Tem algumas que parece ser bem famosas nesse quesito. Uma entre elas me chamou atenção. E essa foi a &lt;a href="https://github.com/pmaupin/pdfrw"&gt;&lt;code&gt;pdfrw&lt;/code&gt;&lt;/a&gt;, por ter o seguinte na descrição: &lt;em&gt;The &lt;strong&gt;fastest&lt;/strong&gt; pure Python PDF parser available&lt;/em&gt;. A &lt;a href="https://github.com/mstamy2/PyPDF2"&gt;PyPDF2&lt;/a&gt; também carrega essa alcunha no título, com exceção do &lt;em&gt;fastest&lt;/em&gt;. Não fiz nenhum teste de benchmarch (ainda), então preferi acreditar na audácia do autor em colocar isso :P&lt;/p&gt;
&lt;p&gt;Biblioteca escolhida, vem a segunda parte: como fazer para preencher um template de PDF com as informações que nós queremos? Bom, de volta a sala de pesquisa. Adentrando um pouco mais o Google, consegui encontrar um post de alguém que ensinava como fazer &lt;strong&gt;exatamente&lt;/strong&gt; o que eu precisava: &lt;a href="https://bostata.com/how-to-populate-fillable-pdfs-with-python/"&gt;&lt;em&gt;How to Populate Fillable PDF's with Python&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Achei uma abordagem muito simples, além de ter me lembrado de algo que eu já não fazia há algum tempo: salvar e compartilhar um aprendizado (o autor do post antes de chegar nessa solução, também pesquisou bastante e se baseou em outros posts). Beleza, vamos colocar os dedos no código!&lt;/p&gt;
&lt;h1&gt;Preparando as ferramentas&lt;/h1&gt;
&lt;p&gt;Mas antes de qualquer código, precisamos preparar nosso template de PDF. Assim como no post mencionado anteriormente, vamos pegar um do &lt;a href="https://squareup.com/us/en/invoices/invoice-templates"&gt;Square&lt;/a&gt;, onde podemos baixar um PDf de &lt;a href="https://d1g145x70srn7h.cloudfront.net/invoices/templates/red/invoice-template-en-us.pdf?color=red&amp;amp;format=pdf"&gt;cobrança gratuitamente&lt;/a&gt;. Primeiro, vamos abrir esse arquivo para ver o que temos. Estou usando KDE, então estou utilizando o Okular para arquivos PDF. Ao abrir o arquivo, essa é a imagem que tenho: &lt;img alt="PDF aberto usando Okular" src="https://i.imgur.com/d2icDUe.png" /&gt;.&lt;/p&gt;
&lt;p&gt;Você vai notar que tem um botão &lt;em&gt;Show Forms&lt;/em&gt; e ao clicar nele caixas escuras vão aparecer no PDF onde existem campos preenchíveis (você pode checar &lt;a href="https://i.imgur.com/1vdbroU.png"&gt;aqui&lt;/a&gt;). Cada campo desse pode ter um valor inserido. É realmente como se fosse um formulário. Certo, agora o próximo passo é editar o &lt;em&gt;nome&lt;/em&gt; de cada um desses campos pra algo mais próximo do nome de uma variável, afinal seria um pouco estranho ficar referenciando &lt;code&gt;Business Name&lt;/code&gt; ao invés de &lt;code&gt;business_name&lt;/code&gt; (vamos ver como isso vai ajudar mais na frente). Para isso, vamos precisar de algum programa para editar esse form, e infelizmente o Okular não tem essa funcionalidade.&lt;/p&gt;
&lt;p&gt;Pesquisando um pouco encontrei algumas opções e para fins de praticidade acabei ficando com o &lt;a href="https://aur.archlinux.org/packages/masterpdfeditor-free/"&gt;Master PDF Editor Free&lt;/a&gt;. É a versão free de um software pago. Também encontrei uma ferramenta web que nos traz a mesma funcionalidade, &lt;a href="https://www.pdfescape.com/"&gt;PDF Escape&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Só fica um pouco escondida (você tem que dar &lt;a href="https://i.imgur.com/mTcFDRy.png"&gt;&lt;em&gt;unlock&lt;/em&gt;&lt;/a&gt; no field, depois &lt;a href="https://i.imgur.com/8LAUe1o.png"&gt;&lt;em&gt;Object Properties&lt;/em&gt;&lt;/a&gt; que vai abrir um &lt;a href="https://i.imgur.com/NsxzsfE.png"&gt;&lt;em&gt;modal&lt;/em&gt;&lt;/a&gt; onde você vai poder mudar o &lt;code&gt;Name&lt;/code&gt; do field). Finalizando toda a troca dos nomes por um snake-case, teremos o seguinte:&lt;/p&gt;
&lt;p&gt;&lt;img alt="PDF com nomes em snake-case" src="https://i.imgur.com/dnzC6hm.png" /&gt;&lt;/p&gt;
&lt;h1&gt;Agora sim, código!&lt;/h1&gt;
&lt;p&gt;Agora vamos pegar cada um desses nomes e salvar em um dicionário sendo as chaves e criar alguns valores fictícios. Aqui vou deixar ele assim:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;data_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="s"&gt;&amp;#39;business_email_address&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;contato@dunderlabs.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s"&gt;&amp;#39;business_name_1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Dunderlabs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s"&gt;&amp;#39;business_name_2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Dunderlabs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s"&gt;&amp;#39;business_phone_number&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;(34) 2222-2222&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s"&gt;&amp;#39;customer_email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;mazulo@dunderlabs.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s"&gt;&amp;#39;customer_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Patrick Mazulo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s"&gt;&amp;#39;due_date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;30/05/2020&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s"&gt;&amp;#39;invoice_number&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;5786878&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s"&gt;&amp;#39;item_1_amount&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;R$8000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s"&gt;&amp;#39;item_1_price&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;R$200/hr&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s"&gt;&amp;#39;item_1_quantity&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;40 hours&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s"&gt;&amp;#39;item_1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Criação de blog&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s"&gt;&amp;#39;note_contents&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Muito obrigado por realizar essa compra!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s"&gt;&amp;#39;send_date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;29/05/2020&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s"&gt;&amp;#39;subtotal&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;R$8000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s"&gt;&amp;#39;total&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;R$8000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Um arquivo de PDF internamente parece ter algumas peculiaridades interessantes em relação a como é construído e interpretado. Vale a pena dar uma lida maior sobre o tipo de arquivo se bater uma curiosidade maior (a especificação do arquivo tem mais de 1000 páginas!). Agora, vamos começar a brincar com o PDF usando pdfrw. Primeiramente, precisamos instalar a lib usando nosso clássico &lt;code&gt;pip install pdfrw&lt;/code&gt;. Agora vou abrir um terminal do ipython para que possamos ver o que temos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pdfrw&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PdfReader&lt;/span&gt;                                                    

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;                                                                      

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pathlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;                                                       

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Documents/Dunderlabs/Posts/pdf_template.pdf&amp;#39;&lt;/span&gt;                           

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;pdf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PdfReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;                               

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;                                                                     
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/Root&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/Info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/ID&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/Size&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Info&lt;/span&gt;                                                                       
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/CreationDate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;(D:20160817230153Z)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;&amp;#39;/Creator&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;(Word)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;&amp;#39;/Keywords&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;()&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;&amp;#39;/ModDate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;(D:20160902175952-07&amp;#39;00&amp;#39;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;&amp;#39;/Producer&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;(Adobe Mac PDF Plug-in)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;&amp;#39;/Title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;(Microsoft Word - [For PDF] Invoice Template - Purple.dotx)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                                                                 
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como podemos ver, o &lt;code&gt;PdfReader&lt;/code&gt; lê o arquivo PDF e entrega pra gente um objeto de fácil interação. Pelo que pudemos ver, essa instância também tem métodos que você normalmente encontra em um dicionário, como &lt;code&gt;.keys()&lt;/code&gt;. Se você der um &lt;code&gt;dir(pdf)&lt;/code&gt; vai conseguir ver todos os métodos que esse objeto nos dá, entre eles &lt;code&gt;.values()&lt;/code&gt;, &lt;code&gt;.update()&lt;/code&gt; (métodos de &lt;code&gt;dict&lt;/code&gt;) além de métodos da específicos da classe &lt;code&gt;PdfReader&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Se você der um print em &lt;code&gt;pdf.Root&lt;/code&gt; ele irá mostrar todo o conteúdo do PDF parseado na estrutura &lt;code&gt;key:value&lt;/code&gt; que a lib cria. O código que vamos usar para escrever as nossas informações no template, vai percorrer a estrutura da página do template (no nosso caso, só temos 1 página) usando essas "notações" para chegar nos campos editáveis. Para concluir nosso objetivo, vamos ter o seguinte código:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pathlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pdfrw&lt;/span&gt;


&lt;span class="n"&gt;TEMPLATE_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Documents/Dunderlabs/Posts/pdf_template.pdf&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;OUTPUT_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Documents/Dunderlabs/Posts/invoice.pdf&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;ANNOT_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/Annots&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;ANNOT_FIELD_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/T&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;SUBTYPE_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/Subtype&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;WIDGET_SUBTYPE_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/Widget&amp;#39;&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;write_pdf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_pdf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;output_pdf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data_dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;template_pdf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pdfrw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PdfReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;input_pdf&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c"&gt;# [1]&lt;/span&gt;

    &lt;span class="n"&gt;annotations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;template_pdf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;ANNOT_KEY&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c"&gt;# [2]&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;annotation&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;annotations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c"&gt;# [3]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;annotation&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;SUBTYPE_KEY&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;WIDGET_SUBTYPE_KEY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;annotation&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ANNOT_FIELD_KEY&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;  &lt;span class="c"&gt;# [4]&lt;/span&gt;
                &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;annotation&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ANNOT_FIELD_KEY&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c"&gt;# [5]&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;  &lt;span class="c"&gt;# [6]&lt;/span&gt;
                    &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="s"&gt;&amp;#39;V&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;data_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;  &lt;span class="c"&gt;# [7]&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="n"&gt;annotation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pdfrw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PdfDict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c"&gt;# [8]&lt;/span&gt;
        &lt;span class="n"&gt;annotation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pdfrw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PdfDict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ff&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c"&gt;# [9]&lt;/span&gt;

    &lt;span class="n"&gt;template_pdf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AcroForm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="c"&gt;# [10]&lt;/span&gt;
        &lt;span class="n"&gt;pdfrw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PdfDict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NeedAppearances&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pdfrw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PdfObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;true&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pdfrw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PdfWriter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;output_pdf&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;template_pdf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# [11]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora vamos comentar as partes mais importantes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[1]&lt;/code&gt; nós estamos lendo o nosso template usando o &lt;code&gt;PdfReader&lt;/code&gt;, assim como mostrei já antes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[2]&lt;/code&gt; como nosso arquivo possui apenas uma página, podemos usar &lt;code&gt;.pages[0][ANNOT_KEY]&lt;/code&gt; para pegar as &lt;em&gt;annotations&lt;/em&gt; do arquivo diretamente. Caso você tenha mais de 1 página, isso ficará dentro de um outro loop.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[3]&lt;/code&gt; vamos agora percorrer todas as &lt;em&gt;annotations&lt;/em&gt; que pegamos na página.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[4]&lt;/code&gt; verificamos se essa annotation possui algo dentro da chave &lt;code&gt;'/T'&lt;/code&gt;. É lá onde teremos os nosso campos editáveis.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[5]&lt;/code&gt; aqui nós vamos usar slice para pegar a key de &lt;code&gt;annotation[ANNOT_FIELD_KEY][1:-1]&lt;/code&gt; da maneira como salvamos no nosso dicionário. Lembra da imagem que as keys dos campos editáveis são salvas da seguinte maneira: &lt;code&gt;[business_name]&lt;/code&gt;? Com o slice &lt;code&gt;[1:-1]&lt;/code&gt; só será retornado o texto dentro dos &lt;code&gt;[]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[6]&lt;/code&gt; vamos nos assegurar que a key que pegamos está dentro do nosso dicionário de dados. Isso vai ser necessário no nosso caso porque por questões de praticidade, não editei todos os fields do template, somente aqueles que salvei em &lt;code&gt;data_dict&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[7]&lt;/code&gt; atualizamos o valor da chave &lt;code&gt;V&lt;/code&gt; com o que temos no nosso &lt;code&gt;data_dict&lt;/code&gt;. Isso sobrescreverá o valor vazio que está no template com o nosso valor.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[8]&lt;/code&gt; atualizo o dict da annotation com o dict &lt;code&gt;update&lt;/code&gt; contendo os novos valores.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[9]&lt;/code&gt; ao final de cada loop, essa linha vai servir para fazer com que esse campo do form não seja mais editável quando você abri-lo. Agradecimentos a resposta nessa &lt;a href="https://github.com/pmaupin/pdfrw/issues/186#issuecomment-585020314"&gt;issue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[10]&lt;/code&gt; isso vai fazer com que quando salvarmos o arquivo, o PDF abra e não apareça mais como sendo um template sem valores nos seus campos. Sem isso, ao abrir o PDF depois de salvo, ainda mostrava os fields e só mostrava os valores ao clicar. Nessa &lt;a href="https://github.com/pmaupin/pdfrw/issues/84#issuecomment-463493521"&gt;issue&lt;/a&gt; encontrei isso como solução.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[11]&lt;/code&gt; ao final de tudo, uso o &lt;code&gt;PdfWriter&lt;/code&gt; para escrever o template modificado em um novo PDF.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Depois de uma longa jornada, concluímos nosso objetivo&lt;/h1&gt;
&lt;p&gt;Agora temos por completo o código que vai preencher o formulário em um PDF. As aplicações disso são várias, como por exemplo: uma view Django que gera um PDF preenchido com as informações que estejam no banco de dados. Isso vai diminuir a possibilidade de erro humano, além de acelerar um processo que pode ser facilmente feito pelo sistema. Agora nossos usuários podem focar em somente checar as informações (o que é muito mais rápido) e seguir com o processo.&lt;/p&gt;
&lt;p&gt;O código completo você pode encontrar aqui nesse &lt;a href="https://gist.github.com/mazulo/30b8778166897e2722d5ec4bd81f9f2e"&gt;gist&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Notas finais:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Caso você não queira passar por toda aquela dor de cabeça em achar um jeito de editar os nomes dos campos, fiz esse &lt;a href="https://gist.github.com/mazulo/1ffa79d611d096771dd602ef680a9ac7"&gt;script&lt;/a&gt; que vai mostrar pra você o nome deles. Com isso, você pode ir testando eles e usá-los como keys no seu dicionário de dados.&lt;/li&gt;
&lt;li&gt;Tive alguns problemas na edição usando &lt;em&gt;Master PDF Editr&lt;/em&gt; e &lt;em&gt;PDF Escape&lt;/em&gt; online. O script não estava conseguindo atualizar os dados em alguns dos campos. Então caso queira testar esse código com um template que funcione por completo, estou deixando nesse &lt;a href="https://bostata.com/download/post/fillable_pdf/invoice_template.pdf"&gt;link&lt;/a&gt; o PDF que o autor do post usou como exemplo. Esse foi editado usando o Adobe Acrobat PDF. Infelizmente não temos opções muito poderosas assim para linux (não que eu conheça, ainda estou pesquisando para futuramente atualizar o post mas caso você conheça, deixa lá nos comentários :)&lt;/li&gt;
&lt;li&gt;Apesar de ser consideravelmente simples usar &lt;a href="https://github.com/pmaupin/pdfrw"&gt;pdfrw&lt;/a&gt;, a lib não tem atualizações desde 2018 e a última interação do criador em PRs foi em junho de 2019. As outras libs listadas naqueles 2 artigos também não estão em um estado muito diferente :/&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dúvidas e/ou críticas, só visitar os comentários mais abaixo. Valeu pessoal, e até a próxima!&lt;/p&gt;</summary><category term="python"></category><category term="pdf"></category></entry><entry><title>Eu deveria usar PYTHONOPTIMIZE?</title><link href="https://dunderlabs.github.io/eu-deveria-usar-pythonoptimize.html" rel="alternate"></link><updated>2016-07-26T22:09:00-03:00</updated><author><name>Patrick Mazulo</name></author><id>tag:dunderlabs.github.io,2016-07-26:eu-deveria-usar-pythonoptimize.html</id><summary type="html">&lt;p&gt;&lt;img alt="Créditos da imagem" src="https://dunderlabs.github.io/images/posts/pythonoptimize.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Créditos da imagem: &lt;a href="http://blog.ziade.org/2015/11/25/should-i-use-pythonoptimize/"&gt;http://blog.ziade.org/2015/11/25/should-i-use-pythonoptimize/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Eu deveria usar PYTHONOPTIMIZE?&lt;/h2&gt;
&lt;p&gt;Ontem, eu estava revisando alguns códigos para os nossos projetos e em um PR eu vi algo ligeiramente similar a isso:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SomeObject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;some_attribute&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;SomeObject&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;some_attribute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;AssertionError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;SomeObject&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do_something_else&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Não me levou a crer que seria uma boa ideia depender do &lt;code&gt;assert&lt;/code&gt; porque quando Python é executado usando a flag &lt;strong&gt;PYTHONOPTIMIZE&lt;/strong&gt;, que você pode ativar com o variável de ambiente de mesmo nome ou com &lt;code&gt;-O&lt;/code&gt; ou &lt;code&gt;-OO&lt;/code&gt;, todas as declarações de &lt;code&gt;assert&lt;/code&gt; são retiradas do código.&lt;/p&gt;
&lt;p&gt;Para minha surpresa, muitas pessoas estão ignorando &lt;code&gt;-O&lt;/code&gt; e &lt;code&gt;-OO&lt;/code&gt; dizendo que ninguém usa essas flags em produção, e que o código que contém asserts é bom.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PYTHONOPTIMIZE&lt;/strong&gt; tem três valores possíveis: &lt;strong&gt;0&lt;/strong&gt;, &lt;strong&gt;1&lt;/strong&gt; (-O) ou &lt;strong&gt;2&lt;/strong&gt; (-OO). &lt;strong&gt;0&lt;/strong&gt; é o default, onde nada acontece.&lt;/p&gt;
&lt;p&gt;Quando o valor é &lt;strong&gt;1&lt;/strong&gt;, é isso o que acontece:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;asserts são removidos&lt;/li&gt;
&lt;li&gt;os arquivos bytecode gerados estão usando a extensão &lt;strong&gt;.pyo&lt;/strong&gt; ao invés de &lt;strong&gt;.pyc&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sys.flags.optimize&lt;/strong&gt; é setado para 1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;strong&gt;debug&lt;/strong&gt;&lt;/strong&gt; é setado para False&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;E para &lt;strong&gt;2&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tudo que o &lt;strong&gt;1&lt;/strong&gt; faz&lt;/li&gt;
&lt;li&gt;docstrings são removidas&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A meu conhecimento, uma razão antiga para rodar com a flag &lt;strong&gt;-O&lt;/strong&gt; era produzir um código bytecode mais eficiente, mas como falei isso não é mais verdade.&lt;/p&gt;
&lt;p&gt;Um outro comportamento que mudou está relacionado ao &lt;strong&gt;pdb&lt;/strong&gt;: você não poderia rodar um debugging passo-a-passo quando &lt;strong&gt;PYTHONOPTIMIZE&lt;/strong&gt; estiver ativado.&lt;/p&gt;
&lt;p&gt;Por último, a questão &lt;strong&gt;.pyo&lt;/strong&gt; vs &lt;strong&gt;.pyc&lt;/strong&gt; deve sumir um dia, de acordo com a &lt;a href="https://www.python.org/dev/peps/pep-0488"&gt;PEP 488&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Então o que faz isso nos deixar? Há alguma boa razão para usar essas flags?&lt;/p&gt;
&lt;p&gt;Algumas aplicações aproveitam a flag &lt;strong&gt;&lt;strong&gt;debug&lt;/strong&gt;&lt;/strong&gt; para oferecer dois modos de execução. Um com mais informações de debug, ou um comportamento diferente quando um erro é encontrado.&lt;/p&gt;
&lt;p&gt;Esse é o caso para o pyglet, de acordo com a &lt;a href="http://pyglet.readthedocs.org/en/latest/programming_guide/debug.html#error-checking"&gt;documentação dele&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Algumas empresas também estão usando o modo &lt;strong&gt;-O&lt;/strong&gt; para ligeiramente reduzir o consumo de memória ao rodar aplicações. Esse parece ser o caso no YouTube.&lt;/p&gt;
&lt;p&gt;E é inteiramente possível que o próprio Python, no futuro, adicione algumas novas otimizações por trás dessa flag.&lt;/p&gt;
&lt;p&gt;Então, sim, mesmo que você não use essas opções de flags, é uma boa prática assegurar que seu código python está testado com todos os possíveis valores para &lt;strong&gt;PYTHONOPTIMIZE&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;É fácil demais, apenas rode seus testes com &lt;strong&gt;-O&lt;/strong&gt; e &lt;strong&gt;-OO&lt;/strong&gt; e sem, e assegure que seu código não depende de docstrings ou assertions.&lt;/p&gt;
&lt;p&gt;Se você tem dependências em algum deles, tenha certeza que seu código trata elegamentemente o modo otimizado, ou lança um erro no início explicando porque você não está compatível com ele.&lt;/p&gt;
&lt;p&gt;Agradecimentos a Brett Cannon, Michael Foord e outros pelo feedback no Twitter sobre este assunto.&lt;/p&gt;
&lt;p&gt;Dúvidas e/ou críticas, só visitar os comentários mais abaixo. Valeu pessoal, e até a próxima!&lt;/p&gt;
&lt;p&gt;Referências:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.ziade.org/2015/11/25/should-i-use-pythonoptimize/"&gt;Post original&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="python"></category><category term="optimization"></category><category term="translations"></category></entry><entry><title>Python decorators em 12 passos fáceis</title><link href="https://dunderlabs.github.io/python-decorators-em-doze-passos.html" rel="alternate"></link><updated>2016-02-17T12:06:00-03:00</updated><author><name>Patrick Mazulo</name></author><id>tag:dunderlabs.github.io,2016-02-17:python-decorators-em-doze-passos.html</id><summary type="html">&lt;p&gt;&lt;img alt="Créditos para a imagem" src="https://dunderlabs.github.io/images/posts/decorator2.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Créditos para a imagem: &lt;a href="http://slideplayer.com.br/slide/4928758/"&gt;http://slideplayer.com.br/slide/4928758/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Entendendo Python decorators em 12 passos fáceis!&lt;/h2&gt;
&lt;p&gt;Ok, talvez eu esteja brincando. Como um instrutor Python, entender decorators é um tópico onde encontro estudantes lutando bastante para entender após a primeira exposição ao assunto. O motivo é que decorators realmente são difíceis de entender! Entendê-los requer compreender vários conceitos de programação funcional bem como se sentir confortável com algumas funcionalidades únicas sobre definição de função do Python e sintaxe de chamada de função. &lt;em&gt;Usar&lt;/em&gt; decorators é fácil (veja na Seção 10)! Mas escrevê-los pode ser complicado.&lt;/p&gt;
&lt;p&gt;Não posso tornar os decorators fáceis - mas talvez ao caminharmos por cada pedaço desse puzzle, um passo de cada vez, eu possa ajudar você a se sentir mais confiante em entender decorators. Pelo fato de decorators ser um assunto complexo, esse artigo vai ser longo - mas não desista dele! Eu prometo fazer cada pedaço tão simples quanto possível - e se você entender cada pedaço, vai entender como decorators funcionam! Estou tentando assumir mínimo conhecimento de Python mas esse artigo provavelmente vai ser mais útil para pessoas que já tenha tido pelo menos um trabalho ocasional com Python.&lt;/p&gt;
&lt;p&gt;Eu gostaria também de salientar que eu usei o módulo de doctest do Python para rodar os exemplos de código neste artigo. O código parece com uma sessão no console interativo do Python (&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; e &lt;code&gt;...&lt;/code&gt; indicam comandos Python enquanto a saída tem sua própria linha). Eventualmente podem haver comentários enigmáticos que começam com "doctest" - eles são apenas diretivas para o doctest e podem ser ignorados.&lt;/p&gt;
&lt;h3&gt;1. Funções&lt;/h3&gt;
&lt;p&gt;Funções em Python são criadas com a palavra chave &lt;code&gt;def&lt;/code&gt; e recebe um nome e uma lista opcional de parâmetros. Elas podem retornar valores com a palavra chave &lt;code&gt;return&lt;/code&gt;. Vamos fazer e chamar uma função bem simples.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def foo&lt;span class="o"&gt;()&lt;/span&gt;:
...     &lt;span class="k"&gt;return&lt;/span&gt; 1
&amp;gt;&amp;gt;&amp;gt; foo&lt;span class="o"&gt;()&lt;/span&gt;
1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O corpo da função (assim como todas as declarações multi-linhas em Python) é obrigatório e indicado por indentação. Podemos chamar funções acrescentando parênteses ao nome da função.&lt;/p&gt;
&lt;h3&gt;2. Escopo&lt;/h3&gt;
&lt;p&gt;Em Python, funções criam um novo escopo. Pythonistas também podem dizer que funções têm seu próprio namespace. Isso significa que Python olha primeiro no namespace da função para procurar nomes de variáveis que ele encontra no corpo da função. Python inclui algumas funções que nos deixam olhar nosso namespace. Vamos escrever uma função simples para investigar a diferença entre escopo local e global.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;a_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;This is a global variable&amp;quot;&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; def foo&lt;span class="o"&gt;()&lt;/span&gt;:
...     print locals&lt;span class="o"&gt;()&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; print globals&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c"&gt;# doctest: +ELLIPSIS&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;..., &lt;span class="s1"&gt;&amp;#39;a_string&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;This is a global variable&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; foo&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c"&gt;# 2&lt;/span&gt;
&lt;span class="o"&gt;{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A função builtin &lt;code&gt;globals&lt;/code&gt; retorna um dicionário contendo todos os nomes de variáveis que o Python conhece. (Por uma questão de clareza, eu omiti na saída algumas variáveis que o Python cria automaticamente.) No ponto #2 eu chamei minha função &lt;code&gt;foo&lt;/code&gt; que mostra o conteúdo do namespace local de dentro da função. Como nós podemos ver, a função &lt;code&gt;foo&lt;/code&gt; tem seu próprio e separado namespace que está atualmente vazio.&lt;/p&gt;
&lt;h3&gt;3. Regras de resolução de variáveis&lt;/h3&gt;
&lt;p&gt;Claro que isso não significa que não podemos acessar variáveis globais dentro de nossas funções. A regra do escopo do Python é que a criação de variáveis sempre cria uma nova variável local, mas acesso de variável (incluindo modificação) verifica no escopo local e então procura por todo o escopo em que está envolvido para procurar uma que bata com a busca. Então se nós modificarmos nossa função &lt;code&gt;foo&lt;/code&gt; para mostrar nossa variável global, tudo vai funcionar como esperado:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;a_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;This is a global variable&amp;quot;&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; def foo&lt;span class="o"&gt;()&lt;/span&gt;:
...     print a_string &lt;span class="c"&gt;# 1&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; foo&lt;span class="o"&gt;()&lt;/span&gt;
This is a global variable
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No ponto #1 Python procura por uma variável local na nossa função e não a encontra, então ele vai em busca de uma variável global com o mesmo nome.&lt;/p&gt;
&lt;p&gt;Por outro lado, se nós tentarmos fazer uma atribuição na variável global dentro da nossa função, isso não vai fazer o que nós pensamos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;a_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;This is a global variable&amp;quot;&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; def foo&lt;span class="o"&gt;()&lt;/span&gt;:
...     &lt;span class="nv"&gt;a_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;test&amp;quot;&lt;/span&gt; &lt;span class="c"&gt;# 1&lt;/span&gt;
...     print locals&lt;span class="o"&gt;()&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; foo&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a_string&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; a_string &lt;span class="c"&gt;# 2&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;This is a global variable&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como podemos ver, variáveis globais pode ser acessadas (mesmo se elas são  de tipos mutáveis) mas não podem (por padrão) receber atribuição. No ponto #1 dentro da nossa função, na realidade estamos criando uma nova variável local que "cobre" a variável global com o mesmo nome. Podemos ver isso ao dar &lt;code&gt;print&lt;/code&gt; no namespace &lt;code&gt;locals&lt;/code&gt; dentro da nossa função &lt;code&gt;foo&lt;/code&gt; e perceber que agora ele tem uma entrada. Podemos também ver novamente o namespace global no ponto #2 que ao checarmos o valor da variável &lt;code&gt;a_string&lt;/code&gt; que esta não foi de fato alterada.&lt;/p&gt;
&lt;h3&gt;4. Tempo de vida da variável&lt;/h3&gt;
&lt;p&gt;É importante também notar que não apenas as variáveis "vivem" dentro de um namespace, elas também tem um tempo de vida.
Considere:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def foo&lt;span class="o"&gt;()&lt;/span&gt;:
...     &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 1
&amp;gt;&amp;gt;&amp;gt; foo&lt;span class="o"&gt;()&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; print x &lt;span class="c"&gt;# 1&lt;/span&gt;
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  ...
NameError: name &lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt; is not defined
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Não é apenas uma questão de regra de escopo no ponto #1 que causa o problema (embora esse é o porque de nós termos um &lt;code&gt;NameError&lt;/code&gt;) isso também tem a ver com a forma que as chamadas de função são implementadas em Python e muitas outras linguagens. Não existe nenhuma sintaxe que possamos usar para pegar o valor da variável &lt;code&gt;x&lt;/code&gt; nesse ponto - ela literalmente não existe! O namespace criado para nossa função &lt;code&gt;foo&lt;/code&gt; é criado do zero toda vez que a função é chamada, e é destruído quando a função termina.&lt;/p&gt;
&lt;h3&gt;5. Argumentos e parâmetros de função&lt;/h3&gt;
&lt;p&gt;Python nos permite passar argumentos para funções. O nome do parâmetro se torna uma variável local na nossa função.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def foo&lt;span class="o"&gt;(&lt;/span&gt;x&lt;span class="o"&gt;)&lt;/span&gt;:
...     print locals&lt;span class="o"&gt;()&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; foo&lt;span class="o"&gt;(&lt;/span&gt;1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;: 1&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Python tem uma variedade de maneiras para definir parâmetros de função e passar argumentos para eles. Você poderá ver uma lista completa e detalhada na &lt;a href="https://docs.python.org/3/tutorial/controlflow.html#more-on-defining-functions"&gt;documentação oficial do Python sobre definição de funções&lt;/a&gt;. Vou mostrar aqui a versão resumida: parâmetros de função podem ser tanto &lt;strong&gt;posicionais&lt;/strong&gt; quanto podem ser &lt;strong&gt;obrigatórios&lt;/strong&gt; ou &lt;strong&gt;nomeados&lt;/strong&gt;, parâmetros que tem &lt;strong&gt;valor padrão&lt;/strong&gt; são &lt;strong&gt;opcionais&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def foo&lt;span class="o"&gt;(&lt;/span&gt;x, &lt;span class="nv"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="c"&gt;# 1&lt;/span&gt;
...     &lt;span class="k"&gt;return&lt;/span&gt; x - y
&amp;gt;&amp;gt;&amp;gt; foo&lt;span class="o"&gt;(&lt;/span&gt;3, 1&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 2&lt;/span&gt;
2
&amp;gt;&amp;gt;&amp;gt; foo&lt;span class="o"&gt;(&lt;/span&gt;3&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 3&lt;/span&gt;
3
&amp;gt;&amp;gt;&amp;gt; foo&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c"&gt;# 4&lt;/span&gt;
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  ...
TypeError: foo&lt;span class="o"&gt;()&lt;/span&gt; takes at least &lt;span class="m"&gt;1&lt;/span&gt; argument &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; given&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; foo&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1, &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;3&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 5&lt;/span&gt;
2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No ponto #1 estamos definindo uma função que tem um parâmetro posicional &lt;code&gt;x&lt;/code&gt; e um parâmetro nomeado &lt;code&gt;y&lt;/code&gt;. Como vemos no ponto #2 podemos chamar essa função passando argumentos normalmente - os valores são passados para os parâmetros de &lt;code&gt;foo&lt;/code&gt; pela posição embora um deles está definido na definição da função como um parâmetro nomeado. Também podemos chamar a função sem passar nenhum argumento para o parâmetro nomeado, como você pode ver no ponto #3 - Python usa o valor padrão de &lt;code&gt;0&lt;/code&gt; que declaramos se ele não receber um valor para o parâmetro nomeado &lt;code&gt;y&lt;/code&gt;. Claro que não podemos deixar de passar valores para o primeiro (obrigatório, posicional) parâmetro - ponto #4 mostra que o resultado disso é uma exceção.&lt;/p&gt;
&lt;p&gt;Tudo simples e claro? Agora vai começar a ficar um pouco confuso - Python suporta argumentos nomeados na chamada da função. Olhe no ponto #5 - aqui estamos chamando a função com dois argumentos nomeados embora ela esteja definida com um parâmetro nomeado e outro sendo posicional. Desde que tenhamos nomes para nossos parâmetros, a ordem em que passamos eles não importa.&lt;/p&gt;
&lt;p&gt;O caso contrário é verdadeiro, claro. Um dos parâmetros para nossa função está definido como um parâmetro nomeado, mas passamos um argumento para ele pela posição - a chamada &lt;code&gt;foo(3,1)&lt;/code&gt; no ponto #2 passa o &lt;code&gt;3&lt;/code&gt; como o argumento para o nosso parâmetro obrigatório &lt;code&gt;x&lt;/code&gt; e passa o segundo (o inteiro &lt;code&gt;1&lt;/code&gt;) para o segundo parâmetro embora ele já estivesse definido como um parâmetro nomeado.&lt;/p&gt;
&lt;p&gt;Wooow! Parecem ser muitas palavras para explicar um conceito bem simples: parâmetros de função podem ter nomes ou posições. Isso significa coisas ligeiramente diferentes dependendo se estamos na definição de função ou na hora da chamada de função, e podemos usar argumentos nomeados para funções definidas apenas com paramêtros posicionais e vice-versa! Novamente - se tudo isso foi muito rápido, dê uma olhada nas &lt;a href="https://docs.python.org/3/tutorial/controlflow.html#more-on-defining-functions"&gt;documentações&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;6. Funções aninhadas&lt;/h3&gt;
&lt;p&gt;Python permite a criação de funções aninhadas. Isso significa que podemos declarar funções dentro de funções e as regras sobre escopo e tempo de vida continuam valendo normalmente.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def outer&lt;span class="o"&gt;()&lt;/span&gt;:
...     &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 1
...     def inner&lt;span class="o"&gt;()&lt;/span&gt;:
...         print x &lt;span class="c"&gt;# 1&lt;/span&gt;
...     inner&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c"&gt;# 2&lt;/span&gt;
...
&amp;gt;&amp;gt;&amp;gt; outer&lt;span class="o"&gt;()&lt;/span&gt;
1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Parece um pouco complicado, mas ainda continua se comportando de uma maneira bem sensata. Considere o que acontece no ponto #1 - Python procura por uma variável local de nome &lt;code&gt;x&lt;/code&gt;, não achando ele então procura no escopo em volta que é outra função! A variável &lt;code&gt;x&lt;/code&gt; é uma variável local para nossa função &lt;code&gt;outer&lt;/code&gt; mas como antes nossa função &lt;code&gt;inner&lt;/code&gt; tem acesso ao escopo que está em sua volta (pelo menos ler e modificar o acesso). No ponto #2 nós chamamos a função &lt;code&gt;inner&lt;/code&gt;. É importante lembrar que &lt;code&gt;inner&lt;/code&gt; também é apenas um nome de variável que segue as regras de busca de variáveis do Python - Python procura no escopo de &lt;code&gt;outer&lt;/code&gt; primeiro e encontra uma variável local de nome &lt;code&gt;inner&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;7. Funções são objetos de primeira classe em Python&lt;/h3&gt;
&lt;p&gt;Esta é uma simples observação de que, em Python, funções são objetos como qualquer outro. Ah, função contendo variável, você não é tão especial!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; issubclass&lt;span class="o"&gt;(&lt;/span&gt;int, object&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# all objects in Python inherit from a common baseclass&lt;/span&gt;
True
&amp;gt;&amp;gt;&amp;gt; def foo&lt;span class="o"&gt;()&lt;/span&gt;:
...     pass
&amp;gt;&amp;gt;&amp;gt; foo.__class__ &lt;span class="c"&gt;# 1&lt;/span&gt;
&amp;lt;&lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;function&amp;#39;&lt;/span&gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; issubclass&lt;span class="o"&gt;(&lt;/span&gt;foo.__class__, object&lt;span class="o"&gt;)&lt;/span&gt;
True
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Você pode nunca ter pensando em suas funções tendo atributos - mas funções são objetos em Python, assim como qualquer outro. (E se você achou isso confuso, espere até ver que classes são objetos em Python, assim como qualquer outro objeto!) Talvez isso esteja tornando o ponto em uma maneira acadêmica - funções são apenas valores normais como qualquer outro valor em Python. Isso significa que você pode passar funções para outras funções como argumentos, ou retornar funções em uma função como seu valor de retorno! Se você nunca pensou nesse tipo de coisa, considere o seguinte código Python que funciona perfeitamente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def add&lt;span class="o"&gt;(&lt;/span&gt;x, y&lt;span class="o"&gt;)&lt;/span&gt;:
...     &lt;span class="k"&gt;return&lt;/span&gt; x + y
&amp;gt;&amp;gt;&amp;gt; def sub&lt;span class="o"&gt;(&lt;/span&gt;x, y&lt;span class="o"&gt;)&lt;/span&gt;:
...     &lt;span class="k"&gt;return&lt;/span&gt; x - y
&amp;gt;&amp;gt;&amp;gt; def apply&lt;span class="o"&gt;(&lt;/span&gt;func, x, y&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="c"&gt;# 1&lt;/span&gt;
...     &lt;span class="k"&gt;return&lt;/span&gt; func&lt;span class="o"&gt;(&lt;/span&gt;x, y&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 2&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; apply&lt;span class="o"&gt;(&lt;/span&gt;add, 2, 1&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 3&lt;/span&gt;
3
&amp;gt;&amp;gt;&amp;gt; apply&lt;span class="o"&gt;(&lt;/span&gt;sub, 2, 1&lt;span class="o"&gt;)&lt;/span&gt;
1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esse exemplo pode não parecer tão estranho pra você - &lt;code&gt;add&lt;/code&gt; e &lt;code&gt;sub&lt;/code&gt; são funções Python normais que recebem dois valores e retornam um valor calculado. No ponto #1 pode ver que a variável espera receber uma função é uma variável como qualquer outra. No ponto #2 chamamos a função passamos para &lt;code&gt;apply&lt;/code&gt; - parêntesis em Python são o operador de chamada, e eles chamam o valor que o nome daquela variável contém. E no ponto #3 você pode ver que passar funções como valores não tem nenhuma sintaxe especial em Python - nomes de função são apenas rótulos/nomes de variáveis como qualquer outra variável.&lt;/p&gt;
&lt;p&gt;Você pode ver esse tipo de comportamento antes - Python usa funções como argumentos para operações frequentemente usadas como personalização da função built-in &lt;code&gt;sorted&lt;/code&gt;, ao fornever uma função para o parâmetro &lt;code&gt;key&lt;/code&gt;. Mas e sobre retornar funções como valores? Veja:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def outer&lt;span class="o"&gt;()&lt;/span&gt;:
...     def inner&lt;span class="o"&gt;()&lt;/span&gt;:
...         print &lt;span class="s2"&gt;&amp;quot;Inside inner&amp;quot;&lt;/span&gt;
...     &lt;span class="k"&gt;return&lt;/span&gt; inner &lt;span class="c"&gt;# 1&lt;/span&gt;
...
&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; outer&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c"&gt;#2&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; foo &lt;span class="c"&gt;# doctest:+ELLIPSIS&lt;/span&gt;
&amp;lt;&lt;span class="k"&gt;function&lt;/span&gt; inner at 0x...&amp;gt;
&amp;gt;&amp;gt;&amp;gt; foo&lt;span class="o"&gt;()&lt;/span&gt;
Inside inner
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Isso pode parecer um pouco bizarro. No ponto #1 retornamos a variável &lt;code&gt;inner&lt;/code&gt; que passa a ser um rótulo/nome de função. Não há sintaxe especial aqui - nossa função está retornando a função &lt;code&gt;inner&lt;/code&gt; que de outra forma não poderia ser chamada. Lembra do tempo de vida da variável? A função &lt;code&gt;inner&lt;/code&gt; é sempre redefinida toda vez que a função &lt;code&gt;outer&lt;/code&gt; é chamada, mas se &lt;code&gt;inner&lt;/code&gt; não fosse retornada pela função, ela iria simplesmente deixar de existir quando o escopo se fosse.&lt;/p&gt;
&lt;p&gt;No ponto #2 podemos pegar o valor de retorno que é nossa função &lt;code&gt;inner&lt;/code&gt; e armazená-la em uma nova variável &lt;code&gt;foo&lt;/code&gt;. Podemos ver que se nós avaliarmos &lt;code&gt;foo&lt;/code&gt;, veremos que ela realmente contém nossa função &lt;code&gt;inner&lt;/code&gt; e que podemos chamá-la ao usar o operador de chamada (parêntesis, lembra?). Isso pode parecer um pouco estranho, mas nada difícil de entender, né? Mas calma, porque as coisas estão prestes a ficar realmente estranhas!&lt;/p&gt;
&lt;h3&gt;8. Closures&lt;/h3&gt;
&lt;p&gt;Não vamos começar com uma definição, mas sim com outro exemplo de código. Vamos dar uma copiada no nosso último exemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def outer&lt;span class="o"&gt;()&lt;/span&gt;:
...     &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 1
...     def inner&lt;span class="o"&gt;()&lt;/span&gt;:
...         print x &lt;span class="c"&gt;# 1&lt;/span&gt;
...     &lt;span class="k"&gt;return&lt;/span&gt; inner
&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; outer&lt;span class="o"&gt;()&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; foo.func_closure &lt;span class="c"&gt;# doctest: +ELLIPSIS&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&amp;lt;cell at 0x...: int object at 0x...&amp;gt;,&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A partir do nosso último exemplo, podemos ver que &lt;code&gt;inner&lt;/code&gt; é uma função retornada por &lt;code&gt;outer&lt;/code&gt; em uma variável chamada &lt;code&gt;foo&lt;/code&gt;, e que poderíamos chamar ela com &lt;code&gt;foo()&lt;/code&gt;. Mas ela vai rodar? Vamos considerar primeiro as regras de escopo.&lt;/p&gt;
&lt;p&gt;Tudo funciona de acordo com as regras de escopo do Python - &lt;code&gt;x&lt;/code&gt; é uma variável local na nossa função &lt;code&gt;outer&lt;/code&gt;. Quando &lt;code&gt;inner&lt;/code&gt; imprime &lt;code&gt;x&lt;/code&gt; no ponto #1 Python procura por uma variável local em &lt;code&gt;inner&lt;/code&gt;, e ao não encontrar, procura no escopo que está em sua volta, que é a função &lt;code&gt;outer&lt;/code&gt;, encontrando a variável lá.&lt;/p&gt;
&lt;p&gt;Mas o que acontece do ponto de vista do tempo de vida da variável? Nossa variável &lt;code&gt;x&lt;/code&gt; é local para a função &lt;code&gt;outer&lt;/code&gt;, o que significa que ela existe apenas enquanto a função &lt;code&gt;outer&lt;/code&gt; está sendo executada. Não somos capazes de chamar a função &lt;code&gt;inner&lt;/code&gt; até depois do retorno de &lt;code&gt;outer&lt;/code&gt;, então de acordo com o nosso modelo de como Python funciona, &lt;code&gt;x&lt;/code&gt; não deveria existir mais na hora que chamamos &lt;code&gt;inner&lt;/code&gt;, e talvez um erro de runtime ou algo do tipo deveria acontecer.&lt;/p&gt;
&lt;p&gt;Acontece que, contra nossas expectativas, nossa função retornada &lt;code&gt;inner&lt;/code&gt; funciona. Python tem suporte para uma funcionalidade chamada &lt;strong&gt;function closures&lt;/strong&gt; que significa que funções internas (isso é, uma função que está dentro de outra função) definidas em escopo não global lembram como era o seu namespace em tempo de definição. Isso pode ser visto ao acessar o atributo &lt;code&gt;func_closure&lt;/code&gt; da nossa função &lt;code&gt;inner&lt;/code&gt; que contém as variáveis no escopo envolto.&lt;/p&gt;
&lt;p&gt;Lembre - a função interna está sendo definida novamente toda vez que a função &lt;code&gt;outer&lt;/code&gt; é chamada. Agora o valor de &lt;code&gt;x&lt;/code&gt; não muda, então cada função &lt;code&gt;inner&lt;/code&gt; faz a mesma coisa como outra função &lt;code&gt;inner&lt;/code&gt; - mas e se mexermos nela um pouco mais?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def outer&lt;span class="o"&gt;(&lt;/span&gt;x&lt;span class="o"&gt;)&lt;/span&gt;:
...     def inner&lt;span class="o"&gt;()&lt;/span&gt;:
...         print x &lt;span class="c"&gt;# 1&lt;/span&gt;
...     &lt;span class="k"&gt;return&lt;/span&gt; inner
&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;print1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; outer&lt;span class="o"&gt;(&lt;/span&gt;1&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;print2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; outer&lt;span class="o"&gt;(&lt;/span&gt;2&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; print1&lt;span class="o"&gt;()&lt;/span&gt;
1
&amp;gt;&amp;gt;&amp;gt; print2&lt;span class="o"&gt;()&lt;/span&gt;
2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A partir desse exemplo, você pode ver que &lt;strong&gt;closures&lt;/strong&gt; - o fato que funções lembram seus escopo - podem ser usadas para construir funções customizadas que têm, essencialmente, um argumento explicito. Não estamos passando os números 1 ou 2 para nossa função &lt;code&gt;inner&lt;/code&gt;, mas estamos construindo versões customizadas da nossa função &lt;code&gt;inner&lt;/code&gt; que "se lembram" que números elas devem imprimir.&lt;/p&gt;
&lt;p&gt;Isso por si só é uma técnica poderosa - você pode até pensar dele como similar a técnicas de orientação de objeto em algumas maneiras: &lt;code&gt;outer&lt;/code&gt; é um construtor para &lt;code&gt;inner&lt;/code&gt; com &lt;code&gt;x&lt;/code&gt; agindo como uma variável privada. E os usos são numerosos - se você está familiarizado com o parâmetro &lt;code&gt;key&lt;/code&gt; da função &lt;code&gt;sorted&lt;/code&gt;, provavelmente escreveu uma função lambda para ordenar uma lista de listas pelo segundo item ao invés do primeiro. Você pode agora estar capacitado a escrever uma função &lt;code&gt;itemgetter&lt;/code&gt; que recebe o índice para recuperar e retornar uma função que poderia adequadamente ser passada ao parâmetro key.&lt;/p&gt;
&lt;p&gt;Mas não vamos fazer nada tão mundano com closures! Ao invés disso, vamos em frente mais uma vez e escrever um decorator!&lt;/p&gt;
&lt;h3&gt;9. Decorator!&lt;/h3&gt;
&lt;p&gt;Um decorator é apenas um objeto chamável que recebe uma função como parâmetro e retorna uma função substituta. Vamos começar de forma simples e trabalhar nosso caminho até úteis decorators.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def outer&lt;span class="o"&gt;(&lt;/span&gt;some_func&lt;span class="o"&gt;)&lt;/span&gt;:
...     def inner&lt;span class="o"&gt;()&lt;/span&gt;:
...         print &lt;span class="s2"&gt;&amp;quot;before some_func&amp;quot;&lt;/span&gt;
...         &lt;span class="nv"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; some_func&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c"&gt;# 1&lt;/span&gt;
...         &lt;span class="k"&gt;return&lt;/span&gt; ret + 1
...     &lt;span class="k"&gt;return&lt;/span&gt; inner
&amp;gt;&amp;gt;&amp;gt; def foo&lt;span class="o"&gt;()&lt;/span&gt;:
...     &lt;span class="k"&gt;return&lt;/span&gt; 1
&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;decorated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; outer&lt;span class="o"&gt;(&lt;/span&gt;foo&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 2&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; decorated&lt;span class="o"&gt;()&lt;/span&gt;
before some_func
2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Veja cuidadosamente nosso exemplo de decorator. Definimos uma função chamada &lt;code&gt;outer&lt;/code&gt; que tem um único parâmetro &lt;code&gt;some_func&lt;/code&gt;. Dentro de &lt;code&gt;outer&lt;/code&gt; definimos uma função aninhada chamada &lt;code&gt;inner&lt;/code&gt;. A função &lt;code&gt;inner&lt;/code&gt; vai imprimir uma string e então chamar &lt;code&gt;some_func&lt;/code&gt;, pegando seu valor de retorno no ponto #1. O valor de &lt;code&gt;some_func&lt;/code&gt; pode ser diferente em cada vez que &lt;code&gt;outer&lt;/code&gt; é chamada, mas não importa que função seja, nós vamos chamá-la. Finalmente &lt;code&gt;inner&lt;/code&gt; retorna o valor de retorno de &lt;code&gt;some_func()&lt;/code&gt; + 1 - e podemos ver que quando chamamos nossa função retornada armazenada em &lt;code&gt;decorated&lt;/code&gt; no ponto #2 temos os resultados do print e também retorna o valor 2 ao invés do valor original 1 que nós poderíamos estar esperando receber ao chamar &lt;code&gt;foo&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Poderíamos dizer que a variável &lt;code&gt;decorated&lt;/code&gt; é uma versão decorada de &lt;code&gt;foo&lt;/code&gt; - ela é &lt;code&gt;foo&lt;/code&gt; mais alguma coisa. De fato se nós escrevemos um decorator útil podemos querer substituir completamente &lt;code&gt;foo&lt;/code&gt; com a versão decorada, então sempre vamos ter nossa versão "mais alguma coisa" de &lt;code&gt;foo&lt;/code&gt;. Podemos fazer isso sem aprender uma nova sintaxe, simplesmente reatribuindo a variável que contém nossa função:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def outer&lt;span class="o"&gt;(&lt;/span&gt;some_func&lt;span class="o"&gt;)&lt;/span&gt;:
&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; outer&lt;span class="o"&gt;(&lt;/span&gt;foo&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; foo &lt;span class="c"&gt;# doctest: +ELLIPSIS&lt;/span&gt;
&amp;lt;&lt;span class="k"&gt;function&lt;/span&gt; inner at 0x...&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora todas as chamadas de &lt;code&gt;foo()&lt;/code&gt; não vão ter o resultado original de antes, terão a nossa versão decorada! Pegou a ideia? Vamos escrever um decorator mais útil.&lt;/p&gt;
&lt;p&gt;Imagine que nós temos uma biblioteca que nos dá objetos de coordenadas. Talvez eles sejam primariamente compostos de pares de coordenadas &lt;code&gt;x&lt;/code&gt; e &lt;code&gt;y&lt;/code&gt;. Infelizmente os objetos de coordenadas não suportam operações matemáticas e não podemos modificar o código fonte, então não podemos adicionar esse suporte. No entanto, vamos estar fazendo muita matemática então queremos fazer funções &lt;code&gt;add&lt;/code&gt; e &lt;code&gt;sub&lt;/code&gt; para receberem dois objetos de coordenada e fazerem a operação matemática apropriada. Esas funções seriam fácil de escrever (vou fornecer um exemplo da classe Coordenada para ilustrar)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; class Coordinate&lt;span class="o"&gt;(&lt;/span&gt;object&lt;span class="o"&gt;)&lt;/span&gt;:
...     def __init__&lt;span class="o"&gt;(&lt;/span&gt;self, x, y&lt;span class="o"&gt;)&lt;/span&gt;:
...         self.x &lt;span class="o"&gt;=&lt;/span&gt; x
...         self.y &lt;span class="o"&gt;=&lt;/span&gt; y
...     def __repr__&lt;span class="o"&gt;(&lt;/span&gt;self&lt;span class="o"&gt;)&lt;/span&gt;:
...         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Coord: &amp;quot;&lt;/span&gt; + str&lt;span class="o"&gt;(&lt;/span&gt;self.__dict__&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; def add&lt;span class="o"&gt;(&lt;/span&gt;a, b&lt;span class="o"&gt;)&lt;/span&gt;:
...     &lt;span class="k"&gt;return&lt;/span&gt; Coordinate&lt;span class="o"&gt;(&lt;/span&gt;a.x + b.x, a.y + b.y&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; def sub&lt;span class="o"&gt;(&lt;/span&gt;a, b&lt;span class="o"&gt;)&lt;/span&gt;:
...     &lt;span class="k"&gt;return&lt;/span&gt; Coordinate&lt;span class="o"&gt;(&lt;/span&gt;a.x - b.x, a.y - b.y&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;one&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Coordinate&lt;span class="o"&gt;(&lt;/span&gt;100, 200&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;two&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Coordinate&lt;span class="o"&gt;(&lt;/span&gt;300, 200&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; add&lt;span class="o"&gt;(&lt;/span&gt;one, two&lt;span class="o"&gt;)&lt;/span&gt;
Coord: &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;: 400, &lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;: 400&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Mas e se nossas funções de adição e subtração tivessem que também ter um comportamento de verificação de limites? Talvez você possa apenas somar ou subtrair baseado em coordenadas positivas e qualquer resultado deveria ser limitado a coordenadas positivas. Então atualmente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;one&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Coordinate&lt;span class="o"&gt;(&lt;/span&gt;100, 200&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;two&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Coordinate&lt;span class="o"&gt;(&lt;/span&gt;300, 200&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;three&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Coordinate&lt;span class="o"&gt;(&lt;/span&gt;-100, -100&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; sub&lt;span class="o"&gt;(&lt;/span&gt;one, two&lt;span class="o"&gt;)&lt;/span&gt;
Coord: &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;: 0, &lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;: -200&lt;span class="o"&gt;}&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; add&lt;span class="o"&gt;(&lt;/span&gt;one, three&lt;span class="o"&gt;)&lt;/span&gt;
Coord: &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;: 100, &lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;: 0&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;mas preferimos ter a diferença de &lt;code&gt;one&lt;/code&gt; e &lt;code&gt;two&lt;/code&gt; sendo &lt;code&gt;{x: 0, y: 0}&lt;/code&gt; e a soma de &lt;code&gt;one&lt;/code&gt; e &lt;code&gt;three&lt;/code&gt; sendo &lt;code&gt;{x: 100, y: 200}&lt;/code&gt; sem modificar &lt;code&gt;one&lt;/code&gt;, &lt;code&gt;two&lt;/code&gt; ou &lt;code&gt;three&lt;/code&gt;. Invés de adicionar verificação de limites na entrada de argumentos de cada função e o valor de retorno de cada função, vamos escrever um decorator de verificação de limites!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def wrapper&lt;span class="o"&gt;(&lt;/span&gt;func&lt;span class="o"&gt;)&lt;/span&gt;:
...     def checker&lt;span class="o"&gt;(&lt;/span&gt;a, b&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="c"&gt;# 1&lt;/span&gt;
...         &lt;span class="k"&gt;if&lt;/span&gt; a.x &amp;lt; &lt;span class="m"&gt;0&lt;/span&gt; or a.y &amp;lt; 0:
...             &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Coordinate&lt;span class="o"&gt;(&lt;/span&gt;a.x &lt;span class="k"&gt;if&lt;/span&gt; a.x &amp;gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; 0, a.y &lt;span class="k"&gt;if&lt;/span&gt; a.y &amp;gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; 0&lt;span class="o"&gt;)&lt;/span&gt;
...         &lt;span class="k"&gt;if&lt;/span&gt; b.x &amp;lt; &lt;span class="m"&gt;0&lt;/span&gt; or b.y &amp;lt; 0:
...             &lt;span class="nv"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Coordinate&lt;span class="o"&gt;(&lt;/span&gt;b.x &lt;span class="k"&gt;if&lt;/span&gt; b.x &amp;gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; 0, b.y &lt;span class="k"&gt;if&lt;/span&gt; b.y &amp;gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; 0&lt;span class="o"&gt;)&lt;/span&gt;
...         &lt;span class="nv"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; func&lt;span class="o"&gt;(&lt;/span&gt;a, b&lt;span class="o"&gt;)&lt;/span&gt;
...         &lt;span class="k"&gt;if&lt;/span&gt; ret.x &amp;lt; &lt;span class="m"&gt;0&lt;/span&gt; or ret.y &amp;lt; 0:
...             &lt;span class="nv"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Coordinate&lt;span class="o"&gt;(&lt;/span&gt;ret.x &lt;span class="k"&gt;if&lt;/span&gt; ret.x &amp;gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; 0, ret.y &lt;span class="k"&gt;if&lt;/span&gt; ret.y &amp;gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; 0&lt;span class="o"&gt;)&lt;/span&gt;
...         &lt;span class="k"&gt;return&lt;/span&gt; ret
...     &lt;span class="k"&gt;return&lt;/span&gt; checker
&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; wrapper&lt;span class="o"&gt;(&lt;/span&gt;add&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;sub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; wrapper&lt;span class="o"&gt;(&lt;/span&gt;sub&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; sub&lt;span class="o"&gt;(&lt;/span&gt;one, two&lt;span class="o"&gt;)&lt;/span&gt;
Coord: &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;: 0, &lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;: 0&lt;span class="o"&gt;}&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; add&lt;span class="o"&gt;(&lt;/span&gt;one, three&lt;span class="o"&gt;)&lt;/span&gt;
Coord: &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;: 200, &lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;: 100&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O decorator funciona do mesmo jeito que antes - retorna uma versão modificada de uma função, mas neste caso ela faz algo útil ao checar e normalizar a entrada de parâmetros e o valor de retorno, substituindo qualquer valor negativo de &lt;code&gt;x&lt;/code&gt; ou &lt;code&gt;y&lt;/code&gt; por 0.&lt;/p&gt;
&lt;p&gt;É uma questão de opinião quanto ao fazer isso torna nosso código mais limpo: isolar a checagem de limites na sua própria função e aplicá-la para todas as funções que nos interessam envolvendo-as com um decorator. A alternativa seria uma chamada de função em cada argumento de entrada e na saída resultante antes de retornar dentro de cada função matemática, e é inegável que usar o decorator é, pelo menos, menos repetitivo em termos de quantidade de código necessário para aplicar checagem de limites para uma função.&lt;/p&gt;
&lt;h3&gt;10. O símbolo @ aplica um decorator a uma função&lt;/h3&gt;
&lt;p&gt;A versão 2.4 do Python nos trouxe suporte para envolver uma função em um decorator ao adicionar antes da definição da função o símbolo &lt;code&gt;@&lt;/code&gt; e o nome do decorator. Nos exemplos de código acima, nós usamos decorators nas nossas funções ao substituir a variável contendo a função com a versão decorada.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; wrapper&lt;span class="o"&gt;(&lt;/span&gt;add&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esse padrão pode ser usado em qualquer momento, para envolver qualquer função. Mas se estamos definindo uma função, podemos "decorá-la" com o símbolo &lt;code&gt;@&lt;/code&gt; dessa maneira:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; @wrapper
... def add&lt;span class="o"&gt;(&lt;/span&gt;a, b&lt;span class="o"&gt;)&lt;/span&gt;:
...     &lt;span class="k"&gt;return&lt;/span&gt; Coordinate&lt;span class="o"&gt;(&lt;/span&gt;a.x + b.x, a.y + b.y&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;É importante notar que essa maneira não é diferente do que simplesmente substituir a variável original &lt;code&gt;add&lt;/code&gt; com o retorno da função &lt;code&gt;wrapper&lt;/code&gt; - Python apenas adiciona um &lt;code&gt;syntatic sugar&lt;/code&gt; para fazer aquilo que acontece de maneira explícita.&lt;/p&gt;
&lt;p&gt;Novamente - usar decorators é fácil! Ainda que escrever decorators úteis como &lt;code&gt;staticmethod&lt;/code&gt; ou &lt;code&gt;classmethod&lt;/code&gt; seja difícil, usá-los é apenas uma questão de adicionar à sua função o &lt;code&gt;@nomedodecorator&lt;/code&gt;!&lt;/p&gt;
&lt;h3&gt;11. &lt;em&gt;args e &lt;/em&gt;*kwargs&lt;/h3&gt;
&lt;p&gt;Fizemos um decorator bem útil, mas ele está codificado para funcionar em apenas um tipo particular de função - uma que recebe dois argumentos. Nossa função interna &lt;code&gt;checker&lt;/code&gt; aceita dois argumentos e passa os argumentos para a função que foi capturada na closure. E se nós quiséssemos um decorator que fizesse alguma coisa para qualquer função possível? Vamos fazer um decorator que incrementa o contador para cada chamada de função de cada função decorada sem mudar nenhuma das funções decoradas. Isso significa que o decorator teria que aceitar a assinatura de chamada de qualquer função que ele decora e também chamar as funções decoradas passando quaisquer argumentos que foram passados pra ele.&lt;/p&gt;
&lt;p&gt;Acontece que Python tem um suporte sintático para essa funcionalidade. Certifique-se de ter lido o &lt;a href="https://docs.python.org/3/tutorial/controlflow.html#arbitrary-argument-lists"&gt;Tutorial Python&lt;/a&gt; para mais detalhes, mas o operador &lt;code&gt;*&lt;/code&gt; usado ao definir uma função significa que qualquer argumento posicional extra passado para a função vão ficar na variável antecedida por &lt;code&gt;*&lt;/code&gt;. Então:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def one&lt;span class="o"&gt;(&lt;/span&gt;*args&lt;span class="o"&gt;)&lt;/span&gt;:
...     print args &lt;span class="c"&gt;# 1&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; one&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;()&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; one&lt;span class="o"&gt;(&lt;/span&gt;1, 2, 3&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;1, 2, 3&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; def two&lt;span class="o"&gt;(&lt;/span&gt;x, y, *args&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="c"&gt;# 2&lt;/span&gt;
...     print x, y, args
&amp;gt;&amp;gt;&amp;gt; two&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
a b &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;,&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A primeira função &lt;code&gt;one&lt;/code&gt; simplesmente mostra quaisquer (se houver) argumentos posicionais que foram passados pra ela. Como você pode ver no ponto #1, nos referimos a variável &lt;code&gt;args&lt;/code&gt; dentro da função - &lt;code&gt;*args&lt;/code&gt; é usado apenas na definição da função para indicar que argumentos posicionais devem ser armazenados na variável &lt;code&gt;args&lt;/code&gt;. Python também nos permite especificar algumas variáveis e pegar os parâmetros adicionais em &lt;code&gt;args&lt;/code&gt;, como podemos ver no ponto #2.&lt;/p&gt;
&lt;p&gt;O operador &lt;code&gt;*&lt;/code&gt; também pode ser usado ao chamar funções, e aqui ele tem um significado semelhante ao anterior. Uma variável antecedida por &lt;code&gt;*&lt;/code&gt; ao &lt;strong&gt;chamar&lt;/strong&gt; uma função significa que o conteúdo da variável deve ser extraído e usado como argumentos posicionais. Um exemplo para entender melhor:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def add&lt;span class="o"&gt;(&lt;/span&gt;x, y&lt;span class="o"&gt;)&lt;/span&gt;:
...     &lt;span class="k"&gt;return&lt;/span&gt; x + y
&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;lst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;1,2&lt;span class="o"&gt;]&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; add&lt;span class="o"&gt;(&lt;/span&gt;lst&lt;span class="o"&gt;[&lt;/span&gt;0&lt;span class="o"&gt;]&lt;/span&gt;, lst&lt;span class="o"&gt;[&lt;/span&gt;1&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="c"&gt;# 1&lt;/span&gt;
3
&amp;gt;&amp;gt;&amp;gt; add&lt;span class="o"&gt;(&lt;/span&gt;*lst&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 2&lt;/span&gt;
3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O código no ponto #1 faz exatamente a mesma coisa que o código no ponto #2 - Python está fazendo isso automaticamente pra nós no ponto #2 o que poderíamos fazer manualmente. Isso não é nada mal - &lt;code&gt;*args&lt;/code&gt; tanto extrair variáveis posicionais a partir de um iterável na &lt;em&gt;chamada de uma função&lt;/em&gt; quanto na &lt;em&gt;definição de uma função&lt;/em&gt; aceitar qualquer quantidade de variáveis posicionais.&lt;/p&gt;
&lt;p&gt;As coisas ficam um pouco mais complicadas ao introduzirmos o &lt;code&gt;**&lt;/code&gt; que faz em dicionários e pares chave/valor exatamente a mesma coisa que &lt;code&gt;*&lt;/code&gt; em iteráveis e parâmetros posicionais. Simples, né?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def foo&lt;span class="o"&gt;(&lt;/span&gt;**kwargs&lt;span class="o"&gt;)&lt;/span&gt;:
...     print kwargs
&amp;gt;&amp;gt;&amp;gt; foo&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{}&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; foo&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1, &lt;span class="nv"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;: 2, &lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;: 1&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Quando definimos uma função, podemos usar &lt;code&gt;**kwargs&lt;/code&gt; para indicar que todos os argumentos nomeados não capturados devem ser armazenados em um dicionário chamado &lt;code&gt;kwargs&lt;/code&gt;. Da mesma forma que antes, nem a variável &lt;code&gt;args&lt;/code&gt; ou &lt;code&gt;kwargs&lt;/code&gt; fazem parte da sintaxe do Python, mas é uma convenção usar esse nome para essas variáveis ao declarar funções. Assim como &lt;code&gt;*&lt;/code&gt;, podemos usar &lt;code&gt;**&lt;/code&gt; ao chamar uma função bem como quando definí-la.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;dct&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;: 1, &lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;: 2&lt;span class="o"&gt;}&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; def bar&lt;span class="o"&gt;(&lt;/span&gt;x, y&lt;span class="o"&gt;)&lt;/span&gt;:
...     &lt;span class="k"&gt;return&lt;/span&gt; x + y
&amp;gt;&amp;gt;&amp;gt; bar&lt;span class="o"&gt;(&lt;/span&gt;**dct&lt;span class="o"&gt;)&lt;/span&gt;
3
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;12. Decorators mais genéricos&lt;/h3&gt;
&lt;p&gt;Dado nosso novo poder, podemos criar um decorator que "registra" os argumentos para funções. Vamos apenas imprimir, por questões de simplicidade:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def logger&lt;span class="o"&gt;(&lt;/span&gt;func&lt;span class="o"&gt;)&lt;/span&gt;:
...     def inner&lt;span class="o"&gt;(&lt;/span&gt;*args, **kwargs&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="c"&gt;#1&lt;/span&gt;
...         print &lt;span class="s2"&gt;&amp;quot;Arguments were: %s, %s&amp;quot;&lt;/span&gt; % &lt;span class="o"&gt;(&lt;/span&gt;args, kwargs&lt;span class="o"&gt;)&lt;/span&gt;
...         &lt;span class="k"&gt;return&lt;/span&gt; func&lt;span class="o"&gt;(&lt;/span&gt;*args, **kwargs&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c"&gt;#2&lt;/span&gt;
...     &lt;span class="k"&gt;return&lt;/span&gt; inner
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Perceba que nossa função &lt;code&gt;inner&lt;/code&gt; recebe qualquer quantidade de parâmetros, independente de tipo no ponto #1 e os passa como argumentos para a função que foi decorada, no ponto #2. Isso nos permite envolver/decorar qualquer função, não importando sua assinatura.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; @logger
... def foo1&lt;span class="o"&gt;(&lt;/span&gt;x, &lt;span class="nv"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1&lt;span class="o"&gt;)&lt;/span&gt;:
...     &lt;span class="k"&gt;return&lt;/span&gt; x * y
&amp;gt;&amp;gt;&amp;gt; @logger
... def foo2&lt;span class="o"&gt;()&lt;/span&gt;:
...     &lt;span class="k"&gt;return&lt;/span&gt; 2
&amp;gt;&amp;gt;&amp;gt; foo1&lt;span class="o"&gt;(&lt;/span&gt;5, 4&lt;span class="o"&gt;)&lt;/span&gt;
Arguments were: &lt;span class="o"&gt;(&lt;/span&gt;5, 4&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;{}&lt;/span&gt;
20
&amp;gt;&amp;gt;&amp;gt; foo1&lt;span class="o"&gt;(&lt;/span&gt;1&lt;span class="o"&gt;)&lt;/span&gt;
Arguments were: &lt;span class="o"&gt;(&lt;/span&gt;1,&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;{}&lt;/span&gt;
1
&amp;gt;&amp;gt;&amp;gt; foo2&lt;span class="o"&gt;()&lt;/span&gt;
Arguments were: &lt;span class="o"&gt;()&lt;/span&gt;, &lt;span class="o"&gt;{}&lt;/span&gt;
2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Chamar nossas funções resulta eu um "log" de saída, bem como o retorno do valor esperado de cada função.&lt;/p&gt;
&lt;h3&gt;Mais sobre decorators&lt;/h3&gt;
&lt;p&gt;Se você conseguiu acompanhar o último exemplo, você entendeu decorators! Parabéns - Siga em frente e use seus novos poderes para o bem!&lt;/p&gt;
&lt;p&gt;Se você estiver interessado em um estudo mais aprofundado: &lt;a href="http://www.artima.com/weblogs/viewpost.jsp?thread=240808"&gt;Bruce Eckel tem um excelente artigo sobre decorators&lt;/a&gt; e implementa eles em Python com objetos ao invés de funções. Pode ser que você ache que o código na sua versão orientada a objetos mais fácil de ler do que nossa versão puramente funcional. Bruce também tem um artigo após esse primeiro sobre &lt;a href="http://www.artima.com/weblogs/viewpost.jsp?thread=240845"&gt;fornecer argumentos para decorators&lt;/a&gt; que pode também ser mais fácil de implementar com objetos do que com funções. E por fim - você também pode estudar a função built-ing &lt;code&gt;wraps&lt;/code&gt; do módulo &lt;a href="https://docs.python.org/3/library/functools.html"&gt;functools&lt;/a&gt;, que (talvez de uma maneira confusa inicialmente) é um decorator que pode ser usado em nossos decorators para modificar a assinatura das nossas funções substitutas, para que elas se pareçam mais com a função decorada.&lt;/p&gt;
&lt;p&gt;[1] Eu também li recentemente um artigo sobre &lt;a href=""&gt;decorators&lt;/a&gt; que me fez refletir...
[2] "global" é uma grande mentira no Python que dizem ser uma coisa maravilhosa, mas é uma discussão para outro dia...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Graças ao Nick eu atualizei minha terminologia no artigo para deixar mais claro que "parâmetros" são as variáveis nomeadas na assinatura da função, enquanto "argumentos" são os valores que são passados para a função.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Viu algum trecho que poderia ficar com uma tradução melhor? Manda lá nos comentários mais abaixo. Valeu pessoal, e até a próxima!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Referências:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://simeonfranklin.com/blog/2012/jul/1/python-decorators-in-12-steps/"&gt;Post original&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="python"></category><category term="python decorators"></category><category term="decorators"></category><category term="translations"></category></entry><entry><title>Wat's up, doc?</title><link href="https://dunderlabs.github.io/wats-up-doc.html" rel="alternate"></link><updated>2016-02-15T10:48:00-03:00</updated><author><name>Patrick Mazulo</name></author><id>tag:dunderlabs.github.io,2016-02-15:wats-up-doc.html</id><summary type="html">&lt;p&gt;&lt;img alt="Créditos para a imagem" src="https://dunderlabs.github.io/images/posts/wat.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Créditos para a imagem: &lt;a href="http://www.b-list.org/weblog/2015/nov/15/real-python-wat/"&gt;http://www.b-list.org/weblog/2015/nov/15/real-python-wat/&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Wat's up, doc?&lt;/h3&gt;
&lt;p&gt;No mesmo rumo da &lt;a href="https://www.destroyallsoftware.com/talks/wat"&gt;maravilhosa palestra do Gary Bernhardt sobre JavaScript&lt;/a&gt;, há também uma &lt;a href="https://github.com/cosmologicon/pywat"&gt;coleção de momentos de Python "wat"&lt;/a&gt; que muitas vezes aparecem por aí. Há também um questionário relacionado na página deste último link (que não vou dar spoiler; você pode ler ele e checar suas respostas). Toda linguagem tem algumas partes não intuitivas — ou, no mínimo, aparentemente não. Mas se você está trabalhando com Python, entender &lt;em&gt;porque&lt;/em&gt; esses pedaços de código se comportam dessa maneira é interessante, e potencialmente útil (OK, provavelmente não útil, mas no mínimo interessante). Então vamos dar uma olhada neles e ver o que realmente está acontecendo.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;"Convertendo para uma string e vice-versa"&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;O exemplo é este:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esta é uma muito simples: &lt;code&gt;str(False)&lt;/code&gt; é &lt;code&gt;"False"&lt;/code&gt;, e &lt;code&gt;bool("False")&lt;/code&gt; é &lt;code&gt;True&lt;/code&gt;, porque qualquer string não vazia é &lt;code&gt;True&lt;/code&gt; ("truthy", se quiser ser preciso, uma vez que a checagem boolean do Python raramente usa instancias reais de &lt;code&gt;bool&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;"Misturar strings com inteiros"&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;O exemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;33&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;2&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;222&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esse é um caso um pouco mais interessante, e leva as pessoas a discutirem sobre o sistema de tipos do Python. O comportamento neste caso vem do fato que Python suporta sobrecarga de operador, e não restringe quais tipos você está permitido definir que seus operadores atuem. Neste caso, o operador * está implementado nos tipos numéricos, onde é o operador de multiplicação (e, obviamente, exige que o outro operando seja um número). Mas é também implementado nos tipos sequenciais (lembre, &lt;code&gt;str&lt;/code&gt; é um tipo sequencial em Python), onde é um operador de repetição e exige que o outro operando seja numérico.&lt;/p&gt;
&lt;p&gt;Então, quando usar este operador com um operando numérico e outro operando que é sequencial, Python aplica o comportamento de repetição.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;"O operador de conversão implícita não documentado"&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hora de brincar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Entender esse requer saber um pouco da história do Python. Inicialmente não havia o tipo boolean built-in (como em muitas das outras linguagens que carecem do tipo boolean), então a convenção era usar o inteiro 1 como o valor "true" e o inteiro 0 como "false". Python 2.2.1 trouxe &lt;code&gt;bool()&lt;/code&gt; como uma função built-in, mas não o tipo boolean — em vez disso, ele definiu &lt;code&gt;True&lt;/code&gt; e &lt;code&gt;False&lt;/code&gt; como alias (apelidos) built-in para 1 e 0. A função &lt;code&gt;bool()&lt;/code&gt; retornaria 1 para valores "True" e 0 para "False". Python 2.3 implementou o tipo &lt;code&gt;bool&lt;/code&gt;, como uma sub-classe de &lt;code&gt;int&lt;/code&gt; com apenas duas instâncias: &lt;code&gt;True&lt;/code&gt; e &lt;code&gt;False&lt;/code&gt;, que teriam valores inteiros 1 e 0. Esse comportamento acabou ficando preso para o Python 3, como você pode verificar abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="mf"&gt;3.5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Sep&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt; &lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GCC&lt;/span&gt; &lt;span class="mf"&gt;4.2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;Compatible&lt;/span&gt; &lt;span class="n"&gt;Apple&lt;/span&gt; &lt;span class="n"&gt;LLVM&lt;/span&gt; &lt;span class="mf"&gt;6.1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clang&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;602.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;darwin&lt;/span&gt;
&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;help&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;information&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;issubclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para mais detalhes sobre essa esquisitice em torno da introdução do tipo &lt;code&gt;bool&lt;/code&gt;, veja esse &lt;a href="http://python-history.blogspot.com/2013/11/the-history-of-bool-true-and-false.html"&gt;post do Guido&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;"Combinação dos tipos numéricos"&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O autor diz "Note: isso não é simplesmente devido a imprecisão de ponto flutuante."
O que é tecnicamente verdade, eu acho, mas um pouco enganador: o truque aqui é empurrar a faixa no qual um float de dupla precisão pode representar cada inteiro (o deslocamento do 53º bit, como floats de dupla precisão têm apenas 53 bits de precisão). Se você brincar com ele, vai descobrir que só tem números anteriores esse ponto, como esperado para esta faixa: no IEEE 754, de &lt;code&gt;2**51&lt;/code&gt; a &lt;code&gt;2**52&lt;/code&gt;, floats de dupla precisão são espaçados por 0.5, passando a serem espaçados por 1 — isto é, todos inteiros e apenas inteiros pode ser representados — acima de &lt;code&gt;2**53&lt;/code&gt;, e além &lt;code&gt;2**53&lt;/code&gt; eles são espaçados por 2, de modo que apenas inteiros pares possam ser reprensentados.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;"Precedência de operador?"&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Isso não é exatamente sobre precedência; em vez disso, é sobre suporte do Python a operadores de comparação encadeados. Estamos acostumados a poder fazer coisas como &lt;code&gt;if x&amp;lt; y &amp;lt;= z&lt;/code&gt; em Python, e estamos com isso fazendo contruções como esta. Esse encadeamento de operadores é equivalente a &lt;code&gt;if (x &amp;lt; y) and (y &amp;lt;= z)&lt;/code&gt;, mas com &lt;code&gt;y&lt;/code&gt; sendo avaliado só na primeira.&lt;/p&gt;
&lt;p&gt;E uma vez que &lt;code&gt;==&lt;/code&gt; e &lt;code&gt;in&lt;/code&gt; são operadores de comparação, o mesmo acontece aqui: &lt;code&gt;False == False in [False]&lt;/code&gt; é equivalente a &lt;code&gt;(False == False) and (False in [False])&lt;/code&gt;. Ambas comparações são verdadeiras, então o resultado polêmico está correto.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;"Tipo iteráveis em comparação"&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esse tem um alcance maior. O que realmente está acontecendo no primeiro exemplo é que &lt;code&gt;a&lt;/code&gt; é uma lista, e &lt;code&gt;(x, y)&lt;/code&gt; é uma tupla. Uma lista e uma tupla não serão idênticas quando comparadas, mesmo se seus conteúdos forem iguais. De igual modo, &lt;code&gt;sorted()&lt;/code&gt; retorna uma lista, então você só vai ter uma comparação de igualdade bem sucedida quando comparar o resultado com uma lista.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;"Tipos de operações aritméticas"&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Python permite que comparações aritméticas de floats e ints funcionem, então &lt;code&gt;1 == 1.0&lt;/code&gt; (e &lt;code&gt;1 ** -1&lt;/code&gt; é igual a &lt;code&gt;1.0&lt;/code&gt; — expoentes negativos sempre retornam um valor float). Mas &lt;code&gt;int&lt;/code&gt; e &lt;code&gt;float&lt;/code&gt; não são do mesmo tipo, então a igualdade de tipo dará falso.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;"Brincando com iteradores"&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Novamente, esta é uma brincadeira com tipos. A função built-in &lt;code&gt;sorted()&lt;/code&gt; do Python recebe uma sequência, e retorna uma lista contendo os mesmos valores ordenados. Mas &lt;code&gt;reversed()&lt;/code&gt; retorna um objeto iterador que vai percorrer a sequência na ordem reversa.&lt;/p&gt;
&lt;p&gt;O iterador retornado pela função &lt;code&gt;reversed()&lt;/code&gt; não implementa o método &lt;code&gt;__eq__()&lt;/code&gt;, então para comparações Python volta para chamar &lt;code&gt;__hash__()&lt;/code&gt; em cada operando e compara os resultados. O iterador também não implementa &lt;code&gt;__hash__()&lt;/code&gt;, então ele pega a implementação padrão de &lt;code&gt;object&lt;/code&gt;, que por sua vez é derivada do endereço de memória do objeto. Uma vez que duas diferentes instâncias de iteradores tem endereços de memória diferentes, o resultado de duas chamadas a &lt;code&gt;reversed()&lt;/code&gt; na mesma sequência irá comparar como desigual.&lt;/p&gt;
&lt;p&gt;A comparação dos resultados de &lt;code&gt;sorted()&lt;/code&gt; no segundo exemplo é mais complicado: a primeira chamada para &lt;code&gt;sorted()&lt;/code&gt; consome o iterador retornado pelo &lt;code&gt;reversed()&lt;/code&gt; e produz a lista ordenada &lt;code&gt;[1, 2, 3]&lt;/code&gt;. Mas a segunda chamada para &lt;code&gt;sorted()&lt;/code&gt; não tem mais nada para consumir, e retorna uma lista vazia &lt;code&gt;[]&lt;/code&gt;, e é o caso em que &lt;code&gt;[1, 2, 3] != []&lt;/code&gt;;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;"Tipos circulares"&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Isso é uma daquelas coisas :)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;"extend vs +="&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;([],)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;tuple&amp;#39;&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;does&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;support&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="n"&gt;assignment&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Python não vai permitir você atribuir diretamente aos índices de uma tupla, seja através da sintaxe normal ou aumentada (+= e similares). Mas ele vai deixar você chamar métodos dos objetos na tupla, e se acontecer desses objetos serem mutáveis e deles definirem métodos que permitem você mudá-los sem usar sintaxe de atribuição, vai funcionar.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“Indexando com floats”&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt; &lt;span class="n"&gt;indices&lt;/span&gt; &lt;span class="n"&gt;must&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;integers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;}[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;}[&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esse é um pouco sorrateiro: os dois primeiros exemplos usam uma lista, e índices de listas devem ser inteiros. Os outros dois exemplos usam um dicionário, e qualquer tipo "hasheável" pode servir como uma chave de dicionário.&lt;/p&gt;
&lt;p&gt;Quanto ao motivo de &lt;code&gt;0&lt;/code&gt; e &lt;code&gt;0.0&lt;/code&gt; devolverem o mesmo valor, não estou 100% certo disso (como não tenho analisado a implementação de dicionário do CPython ultimamente), mas eu acredito que a prevenção de colisões permitem que duas chaves peguem o mesmo valor do dicionário se eles tem o mesmo hash e são comparados iguais (e uma vez que &lt;code&gt;hash(0) == hash(0.0)&lt;/code&gt; e &lt;code&gt;0 == 0.0&lt;/code&gt; você tem o resultado no exemplo).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;"tudo e vazio"&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([[]])&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([[[]]])&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Complicado, né? O argumento para &lt;code&gt;all()&lt;/code&gt; é uma sequência. Então no primeiro exemplo, nós estamos pedindo para ele avaliar uma sequência vazia; &lt;code&gt;all()&lt;/code&gt; está definido para retornar &lt;code&gt;True&lt;/code&gt; para uma sequência vazia. O segundo exemplo tem uma sequência contendo um item — uma lista vazia — que é avaliado como &lt;code&gt;False&lt;/code&gt;, então retorna &lt;code&gt;False&lt;/code&gt;. O terceiro pega uma sequência contendo um item — uma lista contendo uma lista vazia — que é avaliada como &lt;code&gt;True&lt;/code&gt; (porque a lista contendo a lista vazia é por si só não vazia), e então retorna &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“sum and strings”&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;t sum strings [use &amp;#39;&amp;#39;.join(seq) instead]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esse é outra onde uma rápida olhada na documentação da função revela o que está acontecendo.&lt;/p&gt;
&lt;p&gt;Quando dá-se uma sequência vazia, &lt;code&gt;sum()&lt;/code&gt; retornará 0, e a string vazia é uma sequência vazia. Quando dado dois argumentos, &lt;code&gt;sum()&lt;/code&gt; trata o segundo argumento como um valor acumulador inicial para retornar quando a sequência fornecida é vazia (de fato, a definição dessa função é &lt;code&gt;sum(sequence, start=0)&lt;/code&gt; então realmente, no caso de uma sequência vazia com um argumento, ela está apenas retornando o valor padrão de &lt;code&gt;start&lt;/code&gt;); isso que está acontecendo no segundo, terceiro e quarto exemplos. No quinto exemplo, &lt;code&gt;sum()&lt;/code&gt; reclama que não funciona com um valor string para o segundo parâmetro, uma vez que &lt;code&gt;sum()&lt;/code&gt; está definido para ser capaz de rejeitar tipos não numéricos.&lt;/p&gt;
&lt;p&gt;Há outro "wat": &lt;code&gt;sum()&lt;/code&gt; apenas checa o tipo do seu segundo argumento (se você quiser verificar, é a função &lt;code&gt;builtin_sum()&lt;/code&gt; no Python 2, e &lt;code&gt;builtin_sum_impl()&lt;/code&gt; no Python 3, e em ambas as versões está localizado em &lt;code&gt;Python/bltinmodule.c&lt;/code&gt; na árvore de código fonte). No Python 2, ele curto-circuita com um &lt;code&gt;TypeError&lt;/code&gt; se o segundo argumento é uma instância de &lt;code&gt;basestring&lt;/code&gt;; no Python 3 ele curto-circuita com &lt;code&gt;TypeError&lt;/code&gt; quando o segundo argumento é uma instância de &lt;code&gt;str&lt;/code&gt;, &lt;code&gt;bytes&lt;/code&gt; ou &lt;code&gt;bytearray&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Mas ele nunca checa o tipo do primeiro argumento, ou dos itens na sequência (se for uma sequência); ela simplesmente confia no fato que iteração em um tipo não sequencial lança uma exceção &lt;code&gt;TypeError&lt;/code&gt;, e adição de uma string para um inteiro vai levantar um &lt;code&gt;TypeError&lt;/code&gt; (o último porque você não pode passar um valor do tipo string para o segundo argumento, e esse argumento é padrão 0 quando não especificado).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“Comparing NaNs”&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;1e400&lt;/span&gt;  &lt;span class="c"&gt;# nan&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;1e400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;1e400&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;1e400&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;NaN&lt;/code&gt; é estranho. IEEE 754 nos fala que comparações com &lt;code&gt;NaN&lt;/code&gt; são desordenadas; &lt;code&gt;NaN&lt;/code&gt; não é nem maior, menor ou igual a qualquer valor de ponto flutuante, incluindo ele mesmo.&lt;/p&gt;
&lt;p&gt;Então, na primeira chamada de &lt;code&gt;len()&lt;/code&gt;, em teoria nós devemos esperar 6 como resposta; todos os valores são &lt;code&gt;NaN&lt;/code&gt; e nenhum deles são iguais aos outros, de modo que o conjunto literal não deve suprimir qualquer valor duplicado. De igual modo, a segunda chamada de &lt;code&gt;len()&lt;/code&gt; deveria retornar 3.&lt;/p&gt;
&lt;p&gt;O que realmente parece estar acontecendo é que Python está considerando &lt;code&gt;x&lt;/code&gt; e &lt;code&gt;x&lt;/code&gt; serem valores duplicados, &lt;code&gt;float(x)&lt;/code&gt; e &lt;code&gt;float(x)&lt;/code&gt; também serem valores duplicados, e &lt;code&gt;0*1e400&lt;/code&gt; and &lt;code&gt;0*1e400&lt;/code&gt; serem valores "distintos". ~~O porque eu não tenho certeza. Eu acredito que é possível que esteja acontecendo algum tipo complicado de avaliação única, mas isso exigiria Python saber &lt;code&gt;float(x)&lt;/code&gt; sempre retorna o mesmo valor para o mesmo &lt;code&gt;x&lt;/code&gt; (e neste caso não é verdade no caso que ambas as chamadas retornam valores &lt;code&gt;NaN&lt;/code&gt; que são desiguais).~~&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Edit&lt;/em&gt;: &lt;a href="https://www.reddit.com/r/Python/comments/3ojwf9/explaining_the_python_wats/cvxxto3"&gt;um comentário no reddit acertou na solução&lt;/a&gt;. Python parece estar usando o identificador como um curto-circuito otimizado para evitar fazer uma checagem de igualdade potencialmente custosa. E realmente, ambos &lt;code&gt;x is x&lt;/code&gt; e &lt;code&gt;float(x) is float(x)&lt;/code&gt; retornam &lt;code&gt;True&lt;/code&gt; com &lt;code&gt;x = 0*1e400&lt;/code&gt;, mas &lt;code&gt;0*1e400 is 0*1e400&lt;/code&gt; retorna &lt;code&gt;False&lt;/code&gt;. Se alguém mais quiser se divertir um pouco mais, dê uma olhada em &lt;em&gt;porquê&lt;/em&gt; &lt;code&gt;*1e400 is not 0*1e400&lt;/code&gt; retorna &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Viu algum trecho que poderia ficar com uma tradução melhor? Manda lá nos comentários mais abaixo. Valeu pessoal, e até a próxima!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Referências:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.b-list.org/weblog/2015/oct/13/wats-doc/"&gt;Post original&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="python"></category><category term="python wat"></category><category term="translations"></category></entry><entry><title>Classes e Objetos I</title><link href="https://dunderlabs.github.io/classes-e-objetos-i.html" rel="alternate"></link><updated>2015-03-16T11:58:00-03:00</updated><author><name>Patrick Mazulo</name></author><id>tag:dunderlabs.github.io,2015-03-16:classes-e-objetos-i.html</id><summary type="html">&lt;p&gt;&lt;img alt="Créditos para a imagem" src="https://dunderlabs.github.io/images/posts/python-model.png" /&gt;
Créditos para a imagem: &lt;a href="http://blog.invisivel.net/2012/04/10/pythons-object-model-explained/"&gt;http://blog.invisivel.net/2012/04/10/pythons-object-model-explained/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Em Python, tudo é um objeto. Classes fornecem o mecanismo para criar novos tipos de objetos. Neste tutorial, nós vamos deixar um pouco de lado o básico de classes e programação orientada a objetos e focaremos em tópicos que proveem um melhor entendimento deste paradigma de programação em Python. É assumido que nós estamos lidando com um novo estilo de classes. Existem classes Python que herdam da super classe &lt;em&gt;object&lt;/em&gt;.
Definindo Classes&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;A declaração &lt;span style="color: #000088;"&gt;class&lt;/span&gt; é usada para definir novas classes. Esta declaração define um conjunto de atributos, variáveis e métodos, que estão associados e compartilhados por uma coleção de instâncias de tal classe. Uma simples definição de classe é dada abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; 
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt; 
        &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;del_account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deposit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt; 

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;withdraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt; 

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inquiry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Definições de classe introduzem os seguintes novos objetos:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Objeto de classe&lt;/li&gt;
&lt;li&gt;Objeto de Instância&lt;/li&gt;
&lt;li&gt;Objeto de método&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Objetos de Classe&lt;/h2&gt;
&lt;p&gt;Quando uma definição de classe é encontrada durante a execução de um programa, um novo namespace é criado, e este serve como o namespace em que todas as variáveis de classe e definições de métodos se ligam. Note que este namespace não cria um novo escopo local que pode ser usado por métodos de classe, daí a necessidade por nomes completos ao acessar variáveis em métodos. A classe &lt;span style="color: #660066;"&gt;Account&lt;/span&gt; da seção anterior ilustra isto; métodos que tentam acessar a variável &lt;span style="color: #000000;"&gt;num_of_accounts&lt;/span&gt; devem usar o nome completo, &lt;span style="color: #660066;"&gt;Account&lt;/span&gt;.&lt;span style="color: #000000;"&gt;num_of_accounts&lt;/span&gt;, senão resulta em um erro como mostrado abaixo, quando o nome completo não é usado no método __init__:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; 
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt; 
        &lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;del_account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deposit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt; 

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;withdraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt; 

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inquiry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;acct&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Account&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;obi&amp;#39;&lt;/span&gt;, 10&lt;span class="o"&gt;)&lt;/span&gt;
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;&amp;quot;python&amp;quot;&lt;/span&gt;, line 1, in &amp;lt;module&amp;gt;
  File &lt;span class="s2"&gt;&amp;quot;python&amp;quot;&lt;/span&gt;, line 9, in __init__
UnboundLocalError: &lt;span class="nb"&gt;local &lt;/span&gt;variable &lt;span class="s1"&gt;&amp;#39;num_of_accounts&amp;#39;&lt;/span&gt; referenced before assignment
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No fim da execução de uma definição de classe, um objeto de classe é criado. O escopo que estava em vigor imediatamente antes que a definição de classe fosse criada é reintegrada, e o objeto classe é ligado aqui ao nome de classe dado no cabeçalho da definição de classe.&lt;/p&gt;
&lt;p&gt;Agora vejamos uma curiosidade aqui. Alguém pode perguntar: &lt;strong&gt;&lt;em&gt;se a classe criada é um objeto, então qual é a classe da classe objeto?&lt;/em&gt;&lt;/strong&gt;. De acordo com a filosofia de Python em que &lt;em&gt;tudo é um objeto&lt;/em&gt;, o objeto de classe, de fato, tem uma classe da qual é criada, e no novo tipo de classes de Python, esta é a classe &lt;span style="color: #000000;"&gt;type&lt;/span&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;Account&lt;span class="o"&gt;)&lt;/span&gt;
&amp;lt;class &lt;span class="s1"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Então, só pra confundir você um pouco mais, o tipo de um type (o tipo de Account), é type. A classe type é uma &lt;strong&gt;&lt;em&gt;metaclass&lt;/em&gt;&lt;/strong&gt;, uma classe criada para criar outras classes. Discutiremos sobre elas em um próximo tutorial.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Créditos para a imagem" src="{filename}/images/types_map.png" /&gt;
Créditos para a imagem: http://blog.invisivel.net/2012/04/10/pythons-object-model-explained/&lt;/p&gt;
&lt;p&gt;Objetos de classe suportam referência de atributo e instanciação.
Atributos são referenciados usando a sintaxe padrão de objetos, um ponto
seguido pelo nome do atributo: obj.name. Nomes de atributos válidos são
todos os nomes de variáveis e métodos presentes no namespace da classe,
quando o objeto de classe foi criado. Por exemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; Account.num_of_accounts
&amp;gt;&amp;gt;&amp;gt; 0
&amp;gt;&amp;gt;&amp;gt; Account.deposit
&amp;gt;&amp;gt;&amp;gt; &amp;lt;unbound method Account.deposit&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Instanciação de classe usa notação de função. Instanciação envolve
chamar o objeto de classe como uma função normal, sem parâmetros, como
mostrado abaixo para a classe Account:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; Account&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Depois da instanciação de um objeto de classe, um objeto de instância é
retornado, e o &lt;span style="color: #000000;"&gt;__init__&lt;/span&gt; que foi
definido na classe, é chamado com a instância como o primeiro argumento.
Isto executa qualquer inicialização definida pelo programador, como
inicializar os valores das variáveis de instância. No caso da classe
Account, o nome da conta e o balanço são setados, e o número de objetos
de instâncias é incrementado por mais 1.&lt;/p&gt;
&lt;h2&gt;Objetos de Instância&lt;/h2&gt;
&lt;p&gt;Se imaginarmos os objetos de classe como cortadores de biscoitos, então
os objetos de instância são os biscoitos que são os resultados de
instanciar objetos de classe. Atributos, dados e métodos: referência são
as únicas operações que são válidas em objetos de instância.&lt;/p&gt;
&lt;h2&gt;Método de objetos&lt;/h2&gt;
&lt;p&gt;Métodos de objeto são similares a objetos de função. Se &lt;span
style="color: #000000;"&gt;x&lt;/span&gt; é uma instância da classe &lt;span
style="color: #660066;"&gt;Account&lt;/span&gt;, &lt;span
style="color: #000000;"&gt;x.deposit&lt;/span&gt; é um exemplo de um método de
objeto. Métodos têm um argumento extra incluído em sua definição, o
argumento &lt;span style="color: #000088;"&gt;self&lt;/span&gt;. Este argumento
&lt;span style="color: #000088;"&gt;self&lt;/span&gt; se refere a uma instância da
classe. &lt;em&gt;Porque nós temos que passar uma instância como argumento para
um método?&lt;/em&gt; Isso é melhor ilustrado por uma chamada de método:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Account&lt;span class="o"&gt;()&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; x.inquiry&lt;span class="o"&gt;()&lt;/span&gt;
10
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O que exatamente acontece quando um método de instância é chamado? Você
pode ter notado que x.inquiry() acima é chamado sem um argumento, embora
a definição do método &lt;span style="color: #000000;"&gt;inquiry()&lt;/span&gt;
requeira o argumento &lt;span style="color: #000088;"&gt;self&lt;/span&gt;. O que
aconteceu com este argumento?&lt;/p&gt;
&lt;p&gt;O que tornam os métodos tão especiais é que o objeto no qual um método
está sendo chamado é passado como primeiro argumento da função. Em nosso
exemplo, a chamada para &lt;span style="color: #000000;"&gt;x.inquiry()&lt;/span&gt;
é exatamente equivalente a &lt;span
style="color: #660066;"&gt;Account&lt;/span&gt;.&lt;span
style="color: #000000;"&gt;f(x)&lt;/span&gt;. Geralmente, chamar um método com
uma lista de &lt;em&gt;n&lt;/em&gt; argumentos é equivalente a chamar a função
correspondente com uma lista de argumentos que é criada ao inserir o
objeto do método antes do primeiro argumento.&lt;/p&gt;
&lt;p&gt;O tutorial do Python diz:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Quando um atributo de instância é referenciado de que não é um
atributo de dados, sua classe é pesquisada. Se o nome indica um
atributo de classe válido que seja um objeto de função, um método de
objeto é criado ao embalar (ponteiros) o objeto de instância e o
objeto de função, ficando juntos em um objeto abstrato: este é o
método de objeto. Quando o método de objeto é chamado com uma lista de
argumentos, uma nova lista de argumento é construída a partir do
objeto de instância e da list de argumentos, e o objeto de função é
chamado com esta nova lista de argumentos.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;O acima citado se aplica para todos os método de objetos de instância,
incluindo o método &lt;span style="color: #000000;"&gt;__init__&lt;/span&gt;. O
argumento self não é, na verdade, uma palavra chave, e qualquer nome de
argumento pode ser usado como demonstrado na definição abaixo para a
classe Account:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; 
        &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt; 
        &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;del_account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deposit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt; 

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;withdraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt; 

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inquiry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; Account.num_of_accounts
&amp;gt;&amp;gt;&amp;gt; 0
&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Account&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;obi&amp;#39;&lt;/span&gt;, 0&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; x.deposit&lt;span class="o"&gt;(&lt;/span&gt;10&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; Account.inquiry&lt;span class="o"&gt;(&lt;/span&gt;x&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; 10
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Métodos de classe e estáticos&lt;/h2&gt;
&lt;p&gt;Todos os métodos definidos em uma classe por padrão operam em
instancias. No entanto, podemos definir métodos de classe ou estáticos
ao decorar tais métodos com os decoradores correspondentes &lt;span
style="color: #006666;"&gt;@staticmethods&lt;/span&gt; ou &lt;span
style="color: #006666;"&gt;@classmethods&lt;/span&gt;.&lt;/p&gt;
&lt;h3&gt;Métodos Estáticos&lt;/h3&gt;
&lt;p&gt;Métodos estáticos são métodos funções normais que existem no namespace
de uma classe. Referenciar um método estático de uma classe mostra que
em vez de um método type não ligado, uma &lt;em&gt;função&lt;/em&gt; type é retornada como
mostrado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; 
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt; 
        &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;del_account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deposit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt; 

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;withdraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt; 

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inquiry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Name={}, balance={}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;type&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Current Account&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; Account.deposit
&amp;lt;unbound method Account.deposit&amp;gt;
&amp;gt;&amp;gt;&amp;gt; Account.type
&amp;lt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nb"&gt;type &lt;/span&gt;at 0x106893668&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para definir um método estático, o decorador &lt;span
style="color: #006666;"&gt;@staticmethod&lt;/span&gt; é usado, e tal método não
requer o argumento &lt;span style="color: #000088;"&gt;self&lt;/span&gt;. Métodos
estáticos fornecem um mecanismo para melhor organização, como o código
relacionado a uma classe são colocados nessa classe e podem ser
sobrescritos em uma sub-classe como necessário.&lt;/p&gt;
&lt;h3&gt;Métodos de classe&lt;/h3&gt;
&lt;p&gt;Métodos de classe, como o nome implica, operam nas classes em si em vez
de instâncias. Métodos de classe são criados usando o decorador &lt;span
style="color: #006666;"&gt;@classmethod&lt;/span&gt; com a classe passada como o
primeiro argumento para o método em vez da instância.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; 
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt; 
        &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;del_account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deposit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt; 

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;withdraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt; 

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inquiry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Name={}, balance={}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt; 
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;from_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params_json&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params_json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;balance&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;type&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Current Account&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Um exemplo motivador do uso de métodos de classe é como uma &lt;em&gt;fábrica&lt;/em&gt;
para criação de objeto. Imagine que dados para a classe &lt;span
style="color: #660066;"&gt;Account&lt;/span&gt; venham em diferentes formatos,
tais como tuplas, JSON, strings e etc. Nós não podemos definir múltiplos
métodos &lt;span style="color: #000000;"&gt;__init__&lt;/span&gt;, sendo que uma
classe Python pode ter apenas um método &lt;span
style="color: #000000;"&gt;__init__&lt;/span&gt;, desse modo métodos de
classe vêm a calhar nessas situações. Na classe &lt;span
style="color: #660066;"&gt;Account&lt;/span&gt; definida acima no exemplo, nós
queremos inicializar uma conta a partir de um objeto JSON, então nós
definimos um método de classe, &lt;span
style="color: #000000;"&gt;from_json&lt;/span&gt; que recebe um objeto JSON e
manipula a extração de parâmetros e criação do objeto Account usando os
parâmetros extraídos. Um outro exemplo de um método de classe em ação é
o &lt;span style="color: #000000;"&gt;dict.fromkeys&lt;/span&gt;, método que é usado
para criar objetos dict de uma sequência de chaves e valores fornecidas.&lt;/p&gt;
&lt;h4&gt;Métodos especiais Python&lt;/h4&gt;
&lt;p&gt;Algumas vezes podemos querer customizar classes que definimos. Isto pode
ser alterar a maneira que objetos de classe são criados e inicializados,
ou fornecer comportamento polimórfico para certas operações.
Comportamento polimórfico habilita as classes que criamos a definir sua
própria implementação para certas operações Python, tais como a operação
+. Python fornece métodos &lt;em&gt;especiais&lt;/em&gt; que habilitam isso. Esses métodos
estão normalmente na forma &lt;span
style="color: #000000;"&gt;__*__&lt;/span&gt; onde &lt;span
style="color: #000000;"&gt;*&lt;/span&gt; se refere ao nome do método. Exemplo
de tais métodos são &lt;span style="color: #000000;"&gt;__init__&lt;/span&gt; e
&lt;span style="color: #000000;"&gt;__new__&lt;/span&gt; para customizar criação
e inicialização de objeto, &lt;span
style="color: #000000;"&gt;__getitem__&lt;/span&gt;, &lt;span
style="color: #000000;"&gt;__get__&lt;/span&gt;, &lt;span
style="color: #000000;"&gt;__add__&lt;/span&gt; e &lt;span
style="color: #000000;"&gt;__sub__&lt;/span&gt; para emular tipos padrões do
Python, &lt;span style="color: #000000;"&gt;__getattribute__&lt;/span&gt;, &lt;span
style="color: #000000;"&gt;__getattr__&lt;/span&gt; e etc. para customizar
acesso de atributos. Esses são apenas alguns dos métodos especiais.
Discutiremos alguns métodos especiais abaixo para prover um
entendimento, mas a &lt;a href="https://docs.python.org/3/reference/datamodel.html#special-method-names"&gt;documentação
Python&lt;/a&gt;
fornece uma lista compreensiva desses métodos.&lt;/p&gt;
&lt;h3&gt;Métodos Especiais para Criação de Objetos&lt;/h3&gt;
&lt;p&gt;Novas instâncias de classes são criadas em um processo de 2 passos:
usando o método &lt;span style="color: #000000;"&gt;__new__&lt;/span&gt; para
criar uma nova instância e o método &lt;span
style="color: #000000;"&gt;__init__&lt;/span&gt; para inicializar o novo
objeto criado. Programadores já estão familiarizados com a definição do
método &lt;span style="color: #000000;"&gt;__init__&lt;/span&gt;; o método &lt;span
style="color: #000000;"&gt;__new__&lt;/span&gt; é raramente definido pelo
programador pra cada classe, mas é possível que algum queira customizar
a criação de instâncias de classe.&lt;/p&gt;
&lt;h3&gt;Métodos Especiais para Acesso de Atributos&lt;/h3&gt;
&lt;p&gt;Nós podemos customizar o acesso de atributos para instâncias de classe
ao implementar os seguintes métodos listados:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; 
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt; 
        &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;del_account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_of_accounts&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__getattr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hey I dont see any attribute called {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deposit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt; 

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;withdraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;amt&lt;/span&gt; 

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inquiry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Name={}, balance={}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt; 
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;from_dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;params_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;params_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;balance&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;type&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Current Account&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;obi&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;span style="color: #000000;"&gt;__getattr__&lt;/span&gt;(&lt;span
    style="color: #000088;"&gt;self&lt;/span&gt;, &lt;span
    style="color: #000000;"&gt;name&lt;/span&gt;): Este método é apenas chamado
    quando um atributo, &lt;em&gt;name&lt;/em&gt;, que está referenciado não é nem um
    atributo de instância ou nem é encontrado na árvore da classe para
    o objeto. Este método deve retornar algum valor para o atributo, ou
    lança uma exceção &lt;span
    style="color: #660066;"&gt;AttributeError&lt;/span&gt;. Por exemplo, se &lt;em&gt;x&lt;/em&gt; é
    uma instância da classe &lt;em&gt;Account&lt;/em&gt; definida acima, tentar acessar um
    atributo que não existe resultará em uma chamada para este método.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; acct = Account(&amp;quot;obi&amp;quot;, 10)
&amp;gt;&amp;gt;&amp;gt; acct.number
Hey I dont see any attribute called number
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;p&gt;
Note que se o código &lt;span
style="color: #000000;"&gt;__getattr__&lt;/span&gt; referencia atributos
de instância, e esses atributos não existem, um loop infinito pode
ocorrer porque o método &lt;span
style="color: #000000;"&gt;__getattr__&lt;/span&gt; é chamado
sucessivamente sem um fim&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span style="color: #000000;"&gt;__setattr__&lt;/span&gt;(&lt;span
    style="color: #000088;"&gt;self&lt;/span&gt;, &lt;span
    style="color: #000000;"&gt;name&lt;/span&gt;, &lt;span
    style="color: #000000;"&gt;value&lt;/span&gt;): Este método é chamado sempre
    que uma atribuição de atributos é tentada. &lt;span
    style="color: #000000;"&gt;__setattr__&lt;/span&gt; deve inserir o valor
    sendo atribuído no dicionário do atributo de instância em vez de
    usar self.name=value, que resulta em uma chamada recursiva e,
    consequentemente, para um loop infinito.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style="color: #000000;"&gt;__delattr__&lt;/span&gt;(&lt;span
    style="color: #000088;"&gt;self&lt;/span&gt;, &lt;span
    style="color: #000000;"&gt;name&lt;/span&gt;): Este é chamado sempre que del
    obj é chamado.&lt;/li&gt;
&lt;li&gt;&lt;span style="color: #000000;"&gt;__getattribute__&lt;/span&gt;(&lt;span
    style="color: #000088;"&gt;self&lt;/span&gt;, &lt;span
    style="color: #000000;"&gt;name&lt;/span&gt;): Este método é sempre chamado
    para implementar acessos de atributos para instâncias de classe.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Métodos Especiais para Emulação de Tipos&lt;/h2&gt;
&lt;p&gt;Python define certa sintaxe especial para usar com certos tipos; por
exemplo, os elementos em listas e tuplas podem ser acessados usando a
notação de índice &lt;span style="color: #000000;"&gt;[]&lt;/span&gt;, valores
numéricos podem ser somados com o operador &lt;span
style="color: #000000;"&gt;+&lt;/span&gt;, e assim por diante. Podemos criar
nossas próprias classes que fazem uso desta sintaxe especial ao
implementar certos métodos especiais que o interpretador Python chama
sempre que ele encontra tais sintaxes. Ilustramos isso com um exemplo
muito simples abaixo, que emula o básico de uma lista Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# the class is just a wrapper around another list to &lt;/span&gt;
        &lt;span class="c"&gt;# illustrate special methods&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__len__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# called when a user calls len(CustomList instance)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__getitem__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# called when a user uses square brackets for indexing &lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__setitem__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# called when a user performs an index assignment&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;IndexError&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__contains__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# called when the user uses the &amp;#39;in&amp;#39; keyword&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__add__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;otherList&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# provides support for the use of the + operator &lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;CustomList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;otherList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No exemplo acima, o CustomList é um wrapper fino em torno de uma lista
real. Nós implementamos alguns métodos customizados para fins de
ilustração:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;span style="color: #000000;"&gt;__len__&lt;/span&gt;(&lt;span
    style="color: #000088;"&gt;self&lt;/span&gt;): Este é chamado quando a
    função len() é chamada em uma instância de CustomList, como mostrado
    abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; myList = CustomList() 
&amp;gt;&amp;gt;&amp;gt; myList.append(1)    
&amp;gt;&amp;gt;&amp;gt; myList.append(2)
&amp;gt;&amp;gt;&amp;gt; myList.append(3)
&amp;gt;&amp;gt;&amp;gt; myList.append(4)
&amp;gt;&amp;gt;&amp;gt; len(myList)
4
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span style="color: #000000;"&gt;__getitem__&lt;/span&gt;(&lt;span
    style="color: #000088;"&gt;self&lt;/span&gt;, &lt;span
    style="color: #000000;"&gt;value&lt;/span&gt;): fornece suporte para o uso de
    colchetes para indexação em uma instância da classe CustomList:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; myList = CustomList()
&amp;gt;&amp;gt;&amp;gt; myList.append(1)    
&amp;gt;&amp;gt;&amp;gt; myList.append(2)
&amp;gt;&amp;gt;&amp;gt; myList.append(3)
&amp;gt;&amp;gt;&amp;gt; myList.append(4)
&amp;gt;&amp;gt;&amp;gt; myList[3]
4
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span style="color: #000000;"&gt;__setitem__&lt;/span&gt;(&lt;span
    style="color: #000088;"&gt;self&lt;/span&gt;, &lt;span
    style="color: #000000;"&gt;key&lt;/span&gt;, &lt;span
    style="color: #000000;"&gt;value&lt;/span&gt;): Chamado para implementar a
    atribuição de valor para self[key] em uma instância da classe
    CustomList:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; myList = CustomList()
&amp;gt;&amp;gt;&amp;gt; myList.append(1)    
&amp;gt;&amp;gt;&amp;gt; myList.append(2)
&amp;gt;&amp;gt;&amp;gt; myList.append(3)
&amp;gt;&amp;gt;&amp;gt; myList.append(4)
&amp;gt;&amp;gt;&amp;gt; myList[3] = 100
4
&amp;gt;&amp;gt;&amp;gt; myList[3]
100
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span style="color: #000000;"&gt;__contains__&lt;/span&gt;(&lt;span
    style="color: #000088;"&gt;self&lt;/span&gt;, &lt;span
    style="color: #000000;"&gt;key&lt;/span&gt;): Chamado para implementar
    operadores de teste de membros. Deve retornar &lt;em&gt;true&lt;/em&gt; se item está em
    self, e &lt;em&gt;false&lt;/em&gt; se não estiver:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; myList = CustomList()
&amp;gt;&amp;gt;&amp;gt; myList.append(1)    
&amp;gt;&amp;gt;&amp;gt; myList.append(2)
&amp;gt;&amp;gt;&amp;gt; myList.append(3)
&amp;gt;&amp;gt;&amp;gt; myList.append(4)
&amp;gt;&amp;gt;&amp;gt; 4 in myList
True
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span style="color: #000000;"&gt;__repr__&lt;/span&gt;(&lt;span
    style="color: #000088;"&gt;self&lt;/span&gt;): Chamado para computar a
    representação do objeto para &lt;em&gt;self&lt;/em&gt; quando print é chamado com o
    objeto como argumento:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; myList = CustomList()
&amp;gt;&amp;gt;&amp;gt; myList.append(1)    
&amp;gt;&amp;gt;&amp;gt; myList.append(2)
&amp;gt;&amp;gt;&amp;gt; myList.append(3)
&amp;gt;&amp;gt;&amp;gt; myList.append(4)
&amp;gt;&amp;gt;&amp;gt; print(myList)
[1, 2, 3, 4]
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span style="color: #000000;"&gt;__add__&lt;/span&gt;(&lt;span
    style="color: #000088;"&gt;self&lt;/span&gt;, &lt;span
    style="color: #000000;"&gt;otherList&lt;/span&gt;): Chamado para computar a
    adição de duas instâncias de CustomList quando o operador + é usado
    para somar duas instâncias juntas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; myList = CustomList()
&amp;gt;&amp;gt;&amp;gt; otherList = CustomList()
&amp;gt;&amp;gt;&amp;gt; otherList.append(100)
&amp;gt;&amp;gt;&amp;gt; myList.append(1)    
&amp;gt;&amp;gt;&amp;gt; myList.append(2)
&amp;gt;&amp;gt;&amp;gt; myList.append(3)
&amp;gt;&amp;gt;&amp;gt; myList.append(4)
&amp;gt;&amp;gt;&amp;gt; myList + otherList + otherList
[1, 2, 3, 4, 100, 100]
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Acima temos um exemplo de como podemos customizar comportamento de
classe ao definir certos métodos especiais de classe. Para uma listagem
de todos os métodos, veja a &lt;a href="https://docs.python.org/3/reference/datamodel.html#basic-customization"&gt;documentação
Python&lt;/a&gt;.
No tutorial seguinte, nós colocaremos em prática o que discutimos aqui
sobre métodos especiais e explicaremos &lt;strong&gt;descriptors&lt;/strong&gt;, uma
funcionalidade muito importante, que tem uso generalizado em programação
orientada a objetos em Python.&lt;/p&gt;
&lt;p&gt;NT.: Pessoal, tive uma certa dificuldade ao traduzir este artigo, pela
forma meio complicada que o autor o escreveu. Então desde já me desculpo
se alguma parte ficou meio -no sense-, e peço que coloquem nos
comentários qualquer possível melhoria que eu editarei o post :)&lt;/p&gt;
&lt;h2&gt;Leitura Complementar&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/reference/datamodel.html#"&gt;Python Data Model&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://dunderlabs.github.io/pages/pythonista-intermediario.html"&gt;Clique aqui para voltar para a tabela de conteúdo.&lt;/a&gt;&lt;/p&gt;</summary><category term="python"></category><category term="python class"></category><category term="python data model"></category><category term="translations"></category></entry><entry><title>Funções Python II: decorators</title><link href="https://dunderlabs.github.io/funcoes-python-ii-decorators.html" rel="alternate"></link><updated>2015-02-18T12:38:00-03:00</updated><author><name>Patrick Mazulo</name></author><id>tag:dunderlabs.github.io,2015-02-18:funcoes-python-ii-decorators.html</id><summary type="html">&lt;p&gt;&lt;img alt="Créditos da imagem" src="https://dunderlabs.github.io/images/posts/DecoratorsVisuallyExplained.png" /&gt;&lt;/p&gt;
&lt;p&gt;Créditos da imagem: &lt;a href="https://www.freshbooks.com/developers/blog/logging-actions-with-python-decorators-part-i-decorating-logged-functions"&gt;https://www.freshbooks.com/developers/blog/logging-actions-with-python-decorators-part-i-decorating-logged-functions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Decoradores de função (&lt;em&gt;Function Decorators&lt;/em&gt;) habilitam a adição de nova
funcionalidade para a função sem alterar a funcionalidade original dela.
Antes de ler esse post, é importante que você tenha lido e entendido o a
&lt;a href="http://indacode.com/funcoes-python/" title="Funções Python"&gt;primeira parte&lt;/a&gt;
sobre funções python. O pensamento principal que devemos tirar a partir
desse tutorial, é que funções Python são objetos de primeira classe; um
resultado disso é que:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Funções Python podem ser passadas como argumentos para outras
    funções&lt;/li&gt;
&lt;li&gt;Funções Python podem ser retornadas de outras chamadas de funções.&lt;/li&gt;
&lt;li&gt;Funções Python podem ser definidas dentro de outras funções
    resultando em closures.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As propriedades de funções Python listadas acima fornecem a função
necessária para explicar decoradores de função (que a partir daqui,
passaremos a nos referir no original, &lt;em&gt;function decorators&lt;/em&gt;).
Simplificando, &lt;em&gt;function decorators&lt;/em&gt; são &lt;strong&gt;containers (&lt;em&gt;wrappers&lt;/em&gt;) que
deixam você executar código antes&lt;/strong&gt; &lt;strong&gt;das funções que elas decoraram sem
modificar a função em si&lt;/strong&gt;. A estrutura desse tutorial segue uma
excelente resposta encontrada no &lt;a href="http://stackoverflow.com/questions/739654/how-can-i-make-a-chain-of-function-decorators-in-python/1594484#1594484"&gt;stack
overflow&lt;/a&gt; explicando
sobre &lt;em&gt;python decorators&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Function Decorators&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Function decorators&lt;/em&gt; não são exclusivos ao Python, então para
explica-los, ignoremos a sintaxe de &lt;em&gt;function decorator &lt;/em&gt;em Python por
enquanto, e ao invés disso vamos focar na essência de &lt;em&gt;function
decorators&lt;/em&gt;. Para entender o que decorators fazem, nós implementamos uma
função bem simples que é decorada (&lt;em&gt;decorated&lt;/em&gt;, termo em inglês) com uma
outra função simples que registra as chamadas para as funções decoradas.
A &lt;em&gt;decoração da função&lt;/em&gt; é conseguida através da composição de funções,
como mostrado abaixo (seguem as explicações nos comentários):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;

&lt;span class="c"&gt;# o decorator esperar uma outra função como argumento&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="c"&gt;# um container (wrapper) é definido na hora&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func_wrapper&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

        &lt;span class="c"&gt;# adicione qualquer funcionalidade de execução na função original&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Calling function: {} at {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;

        &lt;span class="c"&gt;# execute a função original&lt;/span&gt;
        &lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c"&gt;# adicione qualquer funcionalidade de execução na função original&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Finished calling : {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="c"&gt;# retorne a função wrapper definida no momento. O corpo da&lt;/span&gt;
    &lt;span class="c"&gt;# função wrapper não foi executado ainda, mas um closure&lt;/span&gt;
    &lt;span class="c"&gt;# na função func_to_decorate foi criado    &lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func_wrapper&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_full_name&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;My name is John Doe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt;decorated_func &lt;span class="o"&gt;=&lt;/span&gt; logger&lt;span class="o"&gt;(&lt;/span&gt;print_full_name&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt;decorated_func
&lt;span class="c"&gt;# o valor retornado, decorated_func, é uma referência para a func_wrapper&lt;/span&gt;
&amp;lt;&lt;span class="k"&gt;function&lt;/span&gt; func_wrapper at 0x101ed2578&amp;gt;
&amp;gt;&amp;gt;&amp;gt;decorated_func&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="c"&gt;# decorated_func chamada&lt;/span&gt;
Calling &lt;span class="k"&gt;function&lt;/span&gt;: print_full_name at 2015-01-24 13:48:05.261413
&lt;span class="c"&gt;# a funcionalidade original é preservada&lt;/span&gt;
My name is John Doe
Finished calling : print_full_name
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No simples exemplo definido acima, o decorator adiciona uma nova
funcionalidade, mostrando alguma informação antes e depois da chamada
original da função, para a função original sem altera-la. O decorator
&lt;span style="color: #000000;"&gt;logger&lt;/span&gt; recebe uma função para ser
decorada, &lt;span style="color: #000000;"&gt;print_full_name&lt;/span&gt; e
retorna uma função, &lt;span style="color: #000000;"&gt;func_wrapper&lt;/span&gt;
que chama a função decorada, &lt;span
style="color: #000000;"&gt;print_full_name&lt;/span&gt;, quando é executada. A
função retornada, &lt;span style="color: #000000;"&gt;func_wrapper&lt;/span&gt;
está fechada sobre a referência da função decorada (&lt;em&gt;closure&lt;/em&gt;), &lt;span
style="color: #000000;"&gt;print_full_name&lt;/span&gt; e portanto pode invocar
a função decorada quando está executando. No exemplo acima, chamando
&lt;span style="color: #000000;"&gt;decorated_func&lt;/span&gt; resulta em &lt;span
style="color: #000000;"&gt;print_full_name&lt;/span&gt; sendo executada além de
algum outro código implementando uma nova funcionalidade. Essa
habilidade de adicionar nova funcionalidade para uma função sem
modificar a função original é a essência de &lt;em&gt;function decorators&lt;/em&gt;. Uma
vez que esse conceito é entendido, o conceito de &lt;em&gt;decorators&lt;/em&gt; está
entendido.&lt;/p&gt;
&lt;h2&gt;Python decorators&lt;/h2&gt;
&lt;p&gt;Agora que nós felizmente entendemos a essência de &lt;em&gt;function decorators&lt;/em&gt;,
nós podemos seguir em frente para desconstruir construções Python que
permitem-nos definir decorators mais facilmente. A seção anterior
descreve a essência de decorators, mas ter que usar decorators através
de composições de funções como descrito é muito custoso. Python introduz
o símbolo &lt;span style="color: #666600;"&gt;@&lt;/span&gt; para decoração de
funções. Decorar uma função usando a sintaxe de decorator Python é
conseguida como mostrada abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@decorator&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;a_stand_alone_function&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Chamando &lt;span style="color: #000000;"&gt;stand_alone_function&lt;/span&gt;
agora é o equivalente a chamar a função &lt;span
style="color: #000000;"&gt;decorated_func&lt;/span&gt; da seção anterior, mas
não precisamos mais definir a função intermediária &lt;span
style="color: #000000;"&gt;decorated_func&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Note que decorators podem ser aplicados não apenas em funções Python,
mas também em classes Python e métodos de classe, mas discutiremos sobre
decorators de classes e métodos em um próximo tutorial.&lt;/p&gt;
&lt;p&gt;É importante entender o que o símbolo &lt;span
style="color: #666600;"&gt;@&lt;/span&gt; faz em respeito aos decorators em
Python. A linha &lt;span style="color: #006666;"&gt;@decorator&lt;/span&gt; não
define um decorator, em vez disso pode-se pensar dele como um açúcar
sintático (&lt;em&gt;syntatic sugar&lt;/em&gt;) para &lt;strong&gt;decorar uma função&lt;/strong&gt;. Eu gosto de
definir &lt;strong&gt;decorar uma função&lt;/strong&gt; como o processo de aplicar um decorator
existente a uma função. O &lt;strong&gt;&lt;em&gt;decorator&lt;/em&gt;&lt;/strong&gt; é a função real, &lt;span
style="color: #000000;"&gt;decorator&lt;/span&gt; que adiciona a nova
funcionalidade para a função original. De acordo com a PEP 318, o
seguinte trecho de decorator&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@dec2&lt;/span&gt;
&lt;span class="nd"&gt;@dec1&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;é equivalente a:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dec2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dec1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;sem o argumento intermediário &lt;span style="color: #000000;"&gt;func&lt;/span&gt;.
No exemplo acima, &lt;span style="color: #006666;"&gt;@dec1&lt;/span&gt; e &lt;span
style="color: #006666;"&gt;@dec2&lt;/span&gt; são os invocadores dos decorators.
Agora pare, pense cuidadosamente e garanta que você entendeu isso. &lt;span
style="color: #000000;"&gt;dec1&lt;/span&gt; e &lt;span
style="color: #000000;"&gt;dec2&lt;/span&gt; são referências de objeto de função,
e esses são os decorators reais. Esses valores podem ainda ser
substituídos por qualquer &lt;strong&gt;&lt;em&gt;chamada de função ou um valor que quando
avaliado retorna uma função que recebe uma outra função.&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;O que é de
suma importância é que o nome de referência&lt;/em&gt; seguindo o símbolo &lt;span
style="color: #666600;"&gt;@&lt;/span&gt; é uma referência para um objeto função
(para esse tutorial, nós assumimos que esta referência deve ser um
objeto função, mas na realidade ela deve ser um objeto &lt;strong&gt;chamável&lt;/strong&gt;
(&lt;strong&gt;callable)&lt;/strong&gt;) que recebe uma função como argumento. Entender esse fato
profundo ajudará em entender decorators Python e tópicos sobre
decorators mais envolventes, tais como decorators que recebem
argumentos.&lt;/p&gt;
&lt;h2&gt;Argumentos de funções para funções decoradas&lt;/h2&gt;
&lt;p&gt;Argumentos podem ser passados para funções que estão sendo decoradas ao
simplesmente passar essa função dentro da função que envolve ela, &lt;strong&gt;isto
é a função interna retornada quando o decorator é invocado&lt;/strong&gt;, a função
decorada. Nós ilustramos isso com um exemplo abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;

&lt;span class="c"&gt;# decorator espera uma outra função como argumento&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="c"&gt;# Uma função wrapper é definida na hora&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="c"&gt;# adicione qualquer funcionalidade de execução na função original&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Calling function: {} at {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;

        &lt;span class="c"&gt;# executa a função original&lt;/span&gt;
        &lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;# adicione qualquer funcionalidade de execução na função original&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Finished calling : {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c"&gt;# retorne a função wrapper definida no momento. O corpo da&lt;/span&gt;
    &lt;span class="c"&gt;# função wrapper não foi executado ainda, mas um closure&lt;/span&gt;
    &lt;span class="c"&gt;# na função func_to_decorate foi criado &lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func_wrapper&lt;/span&gt;

&lt;span class="nd"&gt;@logger&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_full_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;My name is {} {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;print_full_name&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;John&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;Doe&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

Calling &lt;span class="k"&gt;function&lt;/span&gt;: print_full_name at 2015-01-24 14:36:36.691557
My name is John Doe
Finished calling : print_full_name
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note como nós usamos &lt;span style="color: #666600;"&gt;*&lt;/span&gt;&lt;span
style="color: #000000;"&gt;args&lt;/span&gt; e &lt;span
style="color: #666600;"&gt;**&lt;/span&gt;&lt;span
style="color: #000000;"&gt;kwargs&lt;/span&gt; na definição da função wrapper
interna; isso é pelo simples motivo que nós não podemos saber de antemão
quais argumentos estão sendo passados para uma função que está sendo
decorada.&lt;/p&gt;
&lt;h2&gt;Função decorator com argumentos de função&lt;/h2&gt;
&lt;p&gt;Nós também podemos passar argumentos para a função decorator atual, mas
isso é mais complexo do que o caso de passar funções para funções
decoradas. Nós ilustramos isso com um grande exemplo abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Essa função recebe argumentos e retorna uma função&lt;/span&gt;
&lt;span class="c"&gt;# a função retornada é nosso decorator real&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator_maker_with_arguments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;decorator_arg1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="c"&gt;# isso é nosso decorator real que aceita uma função&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# a função wrapper recebe argumentos para a função decoradora&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function_arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function_arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c"&gt;# adicione qualquer funcionalidade de execução na função original&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Calling function: {} at {} with decorator arguments: {} and function arguments:{} {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;  
               &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;decorator_arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function_arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function_arg2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

            &lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function_arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function_arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="c"&gt;# adicione qualquer funcionalidade de execução na função original&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Finished calling : {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapped&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;decorator&lt;/span&gt;

&lt;span class="nd"&gt;@decorator_maker_with_arguments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Apollo 11 Landing&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function_arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function_arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;My full name is -- {} {} --&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function_arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function_arg2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; print_name&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Tranquility base &amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;To Houston&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

Calling &lt;span class="k"&gt;function&lt;/span&gt;: print_name at 2015-01-24 15:03:23.696982 with decorator arguments: Apollo &lt;span class="m"&gt;11&lt;/span&gt; Landing and &lt;span class="k"&gt;function&lt;/span&gt; arguments:Tranquility base  To Houston
My full name is -- Tranquility base  To Houston --
Finished calling : print_name
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como mencionado anteriormente, a chave para entender o que está
acontecendo com isso é notar que nós podemos substituir o valor de
referência seguindo a @ em uma decoração de função com qualquer valor
que &lt;strong&gt;&lt;em&gt;resulta em um objeto de função que recebe uma outra função como
argumento&lt;/em&gt;&lt;/strong&gt;. No exemplo acima, o valor retornado pela chamada de
função, &lt;span
style="color: #000000;"&gt;decorator_make_with_arguments&lt;/span&gt;(&lt;span
style="color: #008800;"&gt;"Apollo 11 landing"&lt;/span&gt;), é o decorator. A
chamada resulta em uma função, decorator que aceita uma função como
argumento. Assim a decoração '@decorator_maker_with_arguments("Apollo
11 landing")' é equivalente a &lt;span
style="color: #006666;"&gt;@decorator&lt;/span&gt; mas com o decorador, &lt;span
style="color: #000000;"&gt;decorator&lt;/span&gt;, fechado sobre o
argumento &lt;span style="color: #008800;"&gt;Apollo 11 landing&lt;/span&gt; pela
chamada da função &lt;span
style="color: #000000;"&gt;decorator_maker_with_arguments&lt;/span&gt;. Note
que os argumentos fornecidos para um decorator não pode ser
dinamicamente mudado em tempo de execução como eles são executados na
importação do script.&lt;/p&gt;
&lt;h2&gt;Functools.wrap&lt;/h2&gt;
&lt;p&gt;Usar decorators envolve trocar de uma função para uma outra. Um
resultado disso é que meta informações, tais como docstrings são
perdidas quando usar um decorator com tal função. Isso é ilustrado
abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;

&lt;span class="c"&gt;# decorator espera uma outra função como argumento&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="c"&gt;# uma função wrapper é definida na hora&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func_wrapper&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

        &lt;span class="c"&gt;# adicione qualquer funcionalidade de execução na função original&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Calling function: {} at {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;

        &lt;span class="c"&gt;# execute a função original&lt;/span&gt;
        &lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c"&gt;# adicione qualquer funcionalidade de execução na função original&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Finished calling : {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c"&gt;# retorne a função wrapper definida no momento. O corpo da&lt;/span&gt;
    &lt;span class="c"&gt;# função wrapper não foi executado ainda, mas um closure&lt;/span&gt;
    &lt;span class="c"&gt;# na função func_to_decorate foi criado &lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func_wrapper&lt;/span&gt;

&lt;span class="nd"&gt;@logger&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_full_name&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;return john doe&amp;#39;s full name&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;My name is John Doe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; print&lt;span class="o"&gt;(&lt;/span&gt;print_full_name.__doc__&lt;span class="o"&gt;)&lt;/span&gt;
None
&amp;gt;&amp;gt;&amp;gt; print&lt;span class="o"&gt;(&lt;/span&gt;print_full_name.__name__&lt;span class="o"&gt;)&lt;/span&gt;
func_wrapper
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No exemplo acima uma tentativa de mostrar a string de documentação
retorna &lt;span style="color: #000088;"&gt;None&lt;/span&gt; porque o decorator
trocou a função &lt;span style="color: #000000;"&gt;print_full_name&lt;/span&gt;
com a função &lt;span style="color: #000000;"&gt;func_wrapper&lt;/span&gt; que não
tem string de documentação. Até mesmo o nome da função agora referencia
o nome da função wrapper, em vez da função real. Isso, na maioria das
vezes, não o que nós queremos quando usamos decorators. Para contornar
isso, o módulo Python &lt;span style="color: #000000;"&gt;functools&lt;/span&gt;
fornece a função &lt;span style="color: #000000;"&gt;wraps&lt;/span&gt; que também
passa a ser um decorator. Esse decorator é aplicado a função wrapper e
recebe a função a ser decorada como argumento. O uso é ilustrado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;wraps&lt;/span&gt; 

&lt;span class="c"&gt;# decorator espera uma outra função como argumento&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="nd"&gt;@wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;# uma função wrapper é definida na hora&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="c"&gt;# adicione qualquer funcionalidade de execução na função original&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Calling function: {} at {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;

        &lt;span class="c"&gt;# execute a função original&lt;/span&gt;
        &lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;# adicione qualquer funcionalidade de execução na função original&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Finished calling : {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_to_decorate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c"&gt;# retorne a função wrapper definida no momento. O corpo da&lt;/span&gt;
    &lt;span class="c"&gt;# função wrapper não foi executado ainda, mas um closure&lt;/span&gt;
    &lt;span class="c"&gt;# na função func_to_decorate foi criado &lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func_wrapper&lt;/span&gt;

&lt;span class="nd"&gt;@logger&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_full_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;return john doe&amp;#39;s full name&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;My name is {} {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; print&lt;span class="o"&gt;(&lt;/span&gt;print_full_name.__doc__&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; john doe&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s full name
&amp;gt;&amp;gt;&amp;gt;print&lt;span class="o"&gt;(&lt;/span&gt;print_full_name.__name__&lt;span class="o"&gt;)&lt;/span&gt;
print_full_name
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Aplicação de Decoradores&lt;/h2&gt;
&lt;p&gt;Decorators tem uma ampla variedades de aplicações em Python, e todas
essas não podem ser cobertas nesse artigo. Alguns exemplos de aplicações
de decorators incluem:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Memoização (&lt;em&gt;memoization&lt;/em&gt;) que é o cache de valores para prevenir
    recomputar tais valores se a computação é muito custosa; Um
    decorator de memoização pode ser usado para decorar uma função que
    executa o cálculo real, e a funcionalidade adicionada é que, para um
    dado argumento se o resultado já foi computado anteriormente então o
    valor armazenado é retornado para o chamador.&lt;/li&gt;
&lt;li&gt;Em aplicações web, decorators podem ser usados para proteger
    endpoints que requer autenticação; um endpoint é protegido com um
    decorator que checa se um usuário está autenticado quando uma
    requisição é feita para o endpoint. Django, um popular framework
    web, faz uso de decorators para gerenciar cache e permissões
    de views.&lt;/li&gt;
&lt;li&gt;Decorators podem também fornecer uma maneira limpa para realização
    de tarefas domésticas, tais como chamadas de funções de logging,
    tempo de função e etc.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;O uso de decorators é um campo de atuação muito largo, que é único para
diferentes situações. A &lt;a href="https://wiki.python.org/moin/PythonDecoratorLibrary"&gt;biblioteca de decorator
Python&lt;/a&gt; fornecem
ricos casos de uso de decorators Python. Navegando por esta coleção
fornecerá visão prática para o uso de decorators Python.&lt;/p&gt;
&lt;h2&gt;Leitura complementar&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-0318/"&gt;PEP 318 - Decorators for Functions and Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/739654/how-can-i-make-a-chain-of-function-decorators-in-python/1594484#1594484"&gt;StackOverflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://dunderlabs.github.io/pages/pythonista-intermediario.html"&gt;Clique aqui para voltar para a tabela de conteúdo.&lt;/a&gt;&lt;/p&gt;</summary><category term="python"></category><category term="python function"></category><category term="decorators"></category><category term="translations"></category></entry><entry><title>Funções Python</title><link href="https://dunderlabs.github.io/funcoes-python.html" rel="alternate"></link><updated>2015-02-11T13:15:00-03:00</updated><author><name>Patrick Mazulo</name></author><id>tag:dunderlabs.github.io,2015-02-11:funcoes-python.html</id><summary type="html">&lt;p&gt;&lt;img alt="Créditos da imagem" src="https://dunderlabs.github.io/images/posts/python_function_syntax.png" /&gt;
Créditos da imagem: &lt;a href="http://www.voidspace.org.uk/python/weblog/arch_Tools.shtml"&gt;http://www.voidspace.org.uk/python/weblog/arch_Tools.shtml&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Funções Python nomeadas ou &lt;em&gt;anônimas&lt;/em&gt; são um conjunto de declarações ou
expressões. Em Python, &lt;strong&gt;&lt;em&gt;funções são objetos de primeira classe&lt;/em&gt;&lt;/strong&gt;.
Isso significa que não há restrição no uso de funções. Funções python
podem ser usadas assim como qualquer outro valor python, tal como
strings e números. Funções Python tem atributos que podem ser
introspectados ao usar a função &lt;span style="color: #000088;"&gt;&lt;a href="https://docs.python.org/2/library/functions.html#dir"&gt;dir&lt;/a&gt;&lt;/span&gt;
do Python, como mostrado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; square
&amp;lt;&lt;span class="k"&gt;function&lt;/span&gt; square at 0x031AA230&amp;gt;
&amp;gt;&amp;gt;&amp;gt; dir&lt;span class="o"&gt;(&lt;/span&gt;square&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__call__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__class__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__closure__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__code__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__defaults__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__delattr__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__dict__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__doc__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__format__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__get__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__getattribute__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__globals__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__hash__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__init__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__module__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__name__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__new__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__reduce__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__reduce_ex__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__repr__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__setattr__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__sizeof__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__str__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__subclasshook__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;func_closure&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;func_code&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;func_defaults&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;func_dict&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;func_doc&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;func_globals&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;func_name&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Alguns atributos importantes das funções incluem:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;__&lt;span style="color: #000000;"&gt;doc&lt;/span&gt;__ retorna a string da
    documentação da função.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def square&lt;span class="o"&gt;(&lt;/span&gt;x&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;return square of given number&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; x**2

&amp;gt;&amp;gt;&amp;gt; square.__doc__
&lt;span class="s1"&gt;&amp;#39;return square of given number&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;__&lt;span style="color: #000000;"&gt;name&lt;/span&gt;__ retorna o nome da
    função&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;```` {.theme:shell-default .toolbar:1 .toolbar-overlay:false .striped:false .nums:false .lang:sh .decode:true}
def square(x):
    """return square of given number"""
    return x**2&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;square.func_name
'square'&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;-   \_\_&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;color: #000000;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;module&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;\_\_ retorna o nome
    do módulo que a função está definida.

````python
def square(x):
    &amp;quot;&amp;quot;&amp;quot;return square of given number&amp;quot;&amp;quot;&amp;quot;
    return x**2
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; square.__module__
&lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;span style="color: #000000;"&gt;func_defaults&lt;/span&gt; retorna uma
    tupla com os valores padrões dos argumentos.&lt;/li&gt;
&lt;li&gt;&lt;span style="color: #000000;"&gt;func_globals&lt;/span&gt; retorna uma
    referência para um dicionário que contém as variáveis globais
    da função.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;return square of given number&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; square.func_globals
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__builtins__&amp;#39;&lt;/span&gt;: &amp;lt;module &lt;span class="s1"&gt;&amp;#39;__builtin__&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;built-in&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt;, &lt;span class="s1"&gt;&amp;#39;__name__&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;square&amp;#39;&lt;/span&gt;: &amp;lt;&lt;span class="k"&gt;function&lt;/span&gt; square at 0x10f099c08&amp;gt;, &lt;span class="s1"&gt;&amp;#39;__doc__&amp;#39;&lt;/span&gt;: None, &lt;span class="s1"&gt;&amp;#39;__package__&amp;#39;&lt;/span&gt;: None&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;span style="color: #000000;"&gt;func_dict&lt;/span&gt; retorna o dicionário
    que define o namespace local para os atributos desta função&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;return square of given number&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="sb"&gt;````&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;

&lt;span class="sb"&gt;````&lt;/span&gt;&lt;span class="n"&gt;shell&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;square&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_dict&lt;/span&gt;
&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;span style="color: #000000;"&gt;func_closure&lt;/span&gt; retorna tupla de
    células que contém ligações para variáveis livres das funções.
    Closure serão discutidos mais tarde.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Funções podem ser repassadas como argumentos para outras funções. Essas
funções que recebem outras funções como argumento são comumente chamadas
como funções &lt;strong&gt;&lt;em&gt;de alta ordem&lt;/em&gt;&lt;/strong&gt; (ou &lt;strong&gt;&lt;em&gt;ordem superior&lt;/em&gt;&lt;/strong&gt;) e elas formam
uma parte muito importante na &lt;strong&gt;&lt;em&gt;programação funcional&lt;/em&gt;&lt;/strong&gt;. Um exemplo
muito bom dessas funções de alta ordem é a função &lt;a href="https://docs.python.org/2/library/functions.html#map"&gt;&lt;span
style="color: #000000;"&gt;map&lt;/span&gt;&lt;/a&gt;
que recebe uma função e um &lt;span
style="color: #000000;"&gt;iterável&lt;/span&gt;, e aplica a função para cada
item no &lt;span style="color: #000000;"&gt;iterável&lt;/span&gt;, retornando uma
nova lista. No exemplo abaixo, nós ilustramos isso ao passar a função
&lt;span style="color: #000000;"&gt;square&lt;/span&gt; definida anteriormente e um
&lt;span style="color: #000000;"&gt;iterável&lt;/span&gt; de números para a função
&lt;span style="color: #000000;"&gt;map&lt;/span&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; map&lt;span class="o"&gt;(&lt;/span&gt;square, range&lt;span class="o"&gt;(&lt;/span&gt;10&lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;0, 1, 4, 9, 16, 25, 36, 49, 64, 81&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Funções podem ser definidas dentro do bloco de código de outras funções,
e podem ser retornadas a partir da chamada de outras funções.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;outer&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;outer_var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;outer variable&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;outer_var&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;inner&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No exemplo acima, nós declaramos uma função, &lt;span
style="color: #000000;"&gt;inner&lt;/span&gt;, dentro de uma outra função, &lt;span
style="color: #000000;"&gt;outer&lt;/span&gt;, e retornamos a função &lt;span
style="color: #000000;"&gt;inner&lt;/span&gt; quando a função &lt;span
style="color: #000000;"&gt;outer&lt;/span&gt; é executada.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;outer&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;outer_var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;outer variable&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;outer_var&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;inner&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; outer&lt;span class="o"&gt;()&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; func
&amp;lt;&lt;span class="k"&gt;function&lt;/span&gt; inner at 0x031AA270&amp;gt;
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No exemplo acima, a função outer retorna uma função quando é chamada, e
esta é atribuída para a variável func. Essa variável pode ser chamada
assim como a função retornada:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; func&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;outer variable&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Definições de Função&lt;/h2&gt;
&lt;p&gt;A palavra reservada &lt;span style="color: #000088;"&gt;def&lt;/span&gt; é usada
para criar funções definidas pelo usuário. Definições de funções são
instruções executadas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Na função &lt;span style="color: #000000;"&gt;square&lt;/span&gt; acima, quando o
módulo contendo a função é carregado no interpretador python, ou se está
definida dentro do &lt;strong&gt;REPL&lt;/strong&gt; python, então a instrução da definição da
função que está em &lt;span style="color: #000088;"&gt;def&lt;/span&gt; &lt;span
style="color: #000000;"&gt;square&lt;/span&gt;(x) é executada. Isso tem algumas
implicações para argumentos padrões que tem estruturas de dados mutáveis
como valores; isso será coberto mais a frente neste tutorial. A execução
de uma definição de função liga o nome da função no atual namespace
local (&lt;em&gt;pense em namespaces como nomes para mapeamento de valores que
podem também ser aninhados. namespaces e escopo serão cobertos em mais
detalhes em um outro tutorial&lt;/em&gt;) para um objeto de função que é um
wrapper em torno do código executável para a função. Esse objeto função
contém uma referência para o atual namespace global que é o namespace
global que é usado quando a função é chamada. A definição da função não
executa o corpo da função; este é executado apenas quando a função é
chamada.&lt;/p&gt;
&lt;h2&gt;Argumentos da Chamada de Função&lt;/h2&gt;
&lt;p&gt;Além dos argumentos normais, funções python suportam número variável de
argumentos. Esses números variáveis de argumentos vêm em três tipos que
estão descritos abaixo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Valor padrão do argumento&lt;/strong&gt;: Isso permite um usuário definir
    alguns valores padrões para os argumentos da função. Nesse caso, tal
    função pode ser chamada com menos argumentos. Python usa o valor
    padrão fornecido para argumentos que não são fornecidos durante a
    chamada da função. Este exemplo abaixo é ilustrativo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def show_args(arg, def_arg=1, def_arg2=2):
    return &amp;quot;arg={}, def_arg={}, def_arg2={}&amp;quot;.format(arg, def_arg, def_arg2)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A função acima foi definida com um único argumento posicional
normal, &lt;span style="color: #000000;"&gt;arg&lt;/span&gt; e dois argumentos
padrões, &lt;span style="color: #000000;"&gt;def_arg&lt;/span&gt; e &lt;span
style="color: #000000;"&gt;def_arg2&lt;/span&gt;. A função acima pode ser
chamada em qualquer das seguintes maneiras abaixo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Fornecendo apenas o valor do argumento posicional não
    predefinido; nesse caso os outros argumentos recebem os valores
    padrões fornecidos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def show_args(arg, def_arg=1, def_arg2=2):
    return &amp;quot;arg={}, def_arg={}, def_arg2={}&amp;quot;.format(arg, def_arg, def_arg2)
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;shell&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; show_args(&amp;quot;tranquility&amp;quot;)
    &amp;#39;arg=tranquility, def_arg=1, def_arg2=2&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fornecendo valores para sobrescrever algum argumento padrão além
    do argumento posicional que não foi predefinido.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def show_args(arg, def_arg=1, def_arg2=2):
    return &amp;quot;arg={}, def_arg={}, def_arg2={}&amp;quot;.format(arg, def_arg, def_arg2)
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;shell&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; show_args(&amp;quot;tranquility&amp;quot;, &amp;quot;to Houston&amp;quot;)
    &amp;#39;arg=tranquility, def_arg=to Houston, def_arg2=2&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fornecendo valores para todos os argumentos, sobrescrevendo
    todos os argumentos com valores padrões.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def show_args(arg, def_arg=1, def_arg2=2):
    return &amp;quot;arg={}, def_arg={}, def_arg2={}&amp;quot;.format(arg, def_arg, def_arg2)
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;shell&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; show_args(&amp;quot;tranquility&amp;quot;, &amp;quot;to Houston&amp;quot;, &amp;quot;the eagle has landed&amp;quot;)
    &amp;#39;arg=tranquility, def_arg=to Houston, def_arg2=the eagle has landed&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;É também muito importante ser cuidadoso quando usar estruturas
    de dados mutáveis como argumentos padrões. Definições de função
    são executadas uma vez que essas estruturas de dados mutáveis,
    que são valores de referência, são criados na hora da definição.
    Isto significa que a mesma estrutura mutável de dado é usada
    para todas as funções chamadas, como mostrado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def show_args_using_mutable_defaults(arg, def_arg=[]):
    def_arg.append(&amp;quot;Hello World&amp;quot;)
    return &amp;quot;arg={}, def_arg={}&amp;quot;.format(arg, def_arg)
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;shell&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; show_args_using_mutable_defaults(&amp;quot;test&amp;quot;)
    &amp;quot;arg=test, def_arg=[&amp;#39;Hello World&amp;#39;]&amp;quot; 
&amp;gt;&amp;gt;&amp;gt; show_args_using_mutable_defaults(&amp;quot;test 2&amp;quot;)
    &amp;quot;arg=test 2, def_arg=[&amp;#39;Hello World&amp;#39;, &amp;#39;Hello World&amp;#39;]&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;p&gt;
Em cada chamada de função, &lt;span style="color: #660066;"&gt;Hello
World&lt;/span&gt; é adicionado a lista &lt;span
style="color: #000000;"&gt;def_arg&lt;/span&gt;, e depois de duas
chamadas de função, o argumento padrão tem 2 strings
hello world. É importante tomar nota disso quando usar
argumentos mutáveis padrão como valores padrão. A razão para
isso ficará claro quando nós discutirmos o Python Data Model.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Argumento Chave&lt;/strong&gt;: funções podem ser chamadas usando argumentos
    chave da forma &lt;span style="color: #000000;"&gt;kwarg&lt;/span&gt;&lt;span
    style="color: #666600;"&gt;=&lt;/span&gt;&lt;span
    style="color: #000000;"&gt;valor.&lt;/span&gt;Um kwarg refere ao nome do
    argumento usado na definição da função. Pegue a função definida
    abaixo com argumentos padrão e posicionado&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def show_args(arg, def_arg=1):
    return &amp;quot;arg={}, def_arg={}&amp;quot;.format(arg, def_arg)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para ilustrar uma chamada de função com argumentos chave, a seguinte
função pode ser chamada em qualquer das seguintes maneiras:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;show_args(arg=&amp;quot;test&amp;quot;, def_arg=3)

show_args(&amp;quot;test&amp;quot;)

show_args(arg=&amp;quot;test&amp;quot;)

show_args(&amp;quot;test&amp;quot;, 3)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Em uma chamada de função, argumentos chave não devem vir antes  de
argumentos não chaves, assim, a seguinte maneira irá falhar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;show_args(def_arg=4)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Uma função não pode fornecer valores duplicados para um argumento,
então a seguinte declaração é ilegal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;show_args(&amp;quot;test&amp;quot;, arg=&amp;quot;testing&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No exemplo acima, o argumento arg é um argumento posicional, então o
valor test é atribuído a ele. Tentar atribuir na chave arg novamente
é uma tentativa de múltiplas atribuições, e isso é ilegal.&lt;/p&gt;
&lt;p&gt;Todos os argumentos chaves passados devem corresponder a um dos
argumentos aceitos pela função, e a ordem das chaves incluindo
argumentos não opcionais não é importante, então o seguinte código
no qual a ordem dos argumentos está trocada é legal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;show_args(def_arg=&amp;quot;testing&amp;quot;, arg=&amp;quot;test&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Lista aleatória de argumentos&lt;/strong&gt;: Python também suporta definir
    funções que recebem uma série aleatória de argumentos que são
    passados para a função em uma tupla. Um exemplo disso no tutorial
    python é dado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def write_multiple_items(file, separator, *args): 
    file.write(separator.join(args))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O número aleatório de argumentos devem vir depois dos argumentos
normais; nesse caso, depois dos argumentos &lt;span
style="color: #000000;"&gt;file&lt;/span&gt; e &lt;span
style="color: #000000;"&gt;separator&lt;/span&gt;. A seguir temos um exemplo
de chamada de função para a função definida acima:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;f = open(&amp;quot;test.txt&amp;quot;, &amp;quot;wb&amp;quot;)
write_multiple_items(f, &amp;quot; &amp;quot;, &amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;, &amp;quot;three&amp;quot;, &amp;quot;four&amp;quot;, &amp;quot;five&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;p&gt;
Os argumentos &lt;span style="color: #000000;"&gt;one two three four
five&lt;/span&gt; são todos agrupados juntos em uma tupla que podem ser
acessados através do argumento &lt;span
style="color: #000000;"&gt;args&lt;/span&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Desempacotando Argumentos de Função&lt;/h3&gt;
&lt;p&gt;Algumas vezes, nós podemos ter argumentos para uma chamada de função
tanto em uma tupla, uma lista ou um dicionário. Esses argumentos pode
ser desempacotados nas funções pelas chamadas de função usando os
operadores &lt;span style="color: #000000;"&gt;*&lt;/span&gt; ou &lt;span
style="color: #000000;"&gt;**&lt;/span&gt;. Considere a seguinte função que
recebe 2 argumentos posicionais e mostra os valores&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def print_args&lt;span class="o"&gt;(&lt;/span&gt;a, b&lt;span class="o"&gt;)&lt;/span&gt;:
        print a
        print b
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Se nós tivermos os valores que nós queremos fornecer para a função em
uma lista, então nos poderíamos desempacotar esses valores diretamente
na função, como mostrado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;1, 2&lt;span class="o"&gt;]&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; print_args&lt;span class="o"&gt;(&lt;/span&gt;*args&lt;span class="o"&gt;)&lt;/span&gt;
1
2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Da mesma forma, quando nós temos palavras-chaves, nós podemos usar &lt;span
style="color: #000000;"&gt;dicts&lt;/span&gt; para armazenar, mapeando &lt;span
style="color: #000000;"&gt;kwarg para valor&lt;/span&gt; e o operador &lt;span
style="color: #000000;"&gt;**&lt;/span&gt; para desempacotar os argumentos
chaves para as funções, como mostrado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def parrot&lt;span class="o"&gt;(&lt;/span&gt;voltage, &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;’a stiff’, &lt;span class="nv"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;’voom’&lt;span class="o"&gt;)&lt;/span&gt;:
        print &lt;span class="s2"&gt;&amp;quot;-- This parrot wouldn’t&amp;quot;&lt;/span&gt;, action,
        print &lt;span class="s2"&gt;&amp;quot;if you put&amp;quot;&lt;/span&gt;, voltage, &lt;span class="s2"&gt;&amp;quot;volts through it.&amp;quot;&lt;/span&gt;,
        print &lt;span class="s2"&gt;&amp;quot;E’s&amp;quot;&lt;/span&gt;, state, &lt;span class="s2"&gt;&amp;quot;!&amp;quot;&lt;/span&gt;

&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;voltage&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;four million&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;state&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;bleedin’ demised&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;action&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;VOOM&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; parrot&lt;span class="o"&gt;(&lt;/span&gt;**d&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; This parrot wouldn’t VOOM &lt;span class="k"&gt;if&lt;/span&gt; you put four million volts through it. E’s bleedin’ demised
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;&lt;/h3&gt;
&lt;h3&gt;Definindo funções com &lt;span style="color: #666600;"&gt;*&lt;/span&gt; e &lt;span style="color: #666600;"&gt;**&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Algumas vezes, ao definir uma função, nós podemos não saber de antemão o
número de argumentos a esperar. Isso leva a definição de funções com a
seguinte assinatura:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;show_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O argumento &lt;span style="color: #000000;"&gt;*args&lt;/span&gt; representa uma
sequência de tamanho desconhecido de argumentos posicionais, enquanto
&lt;span style="color: #000000;"&gt;**kwargs&lt;/span&gt; representa um dicionário
de mapeamento nome-valor que pode conter qualquer quantidade de
nome-valor mapeada. O &lt;span style="color: #000000;"&gt;*args&lt;/span&gt; deve
vir antes do &lt;span style="color: #000000;"&gt;**kwargs&lt;/span&gt; na
definição da função. O seguinte código ilustra isso:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def show_args&lt;span class="o"&gt;(&lt;/span&gt;arg, *args, **kwargs&lt;span class="o"&gt;)&lt;/span&gt;:
        print arg
        &lt;span class="k"&gt;for&lt;/span&gt; item in args:
            print args
        &lt;span class="k"&gt;for&lt;/span&gt; key, value in kwargs:
            print key, value

&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;1, 2, 3, 4&lt;span class="o"&gt;]&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;kwargs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; dict&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;testing&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;24, &lt;span class="nv"&gt;year&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2014&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; show_args&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hey&amp;quot;&lt;/span&gt;, *args, **kwargs&lt;span class="o"&gt;)&lt;/span&gt;
hey
1
2
3
4
age 24
name testing
year 2014
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O argumento normal deve ser fornecido para a função, mas o &lt;span
style="color: #000000;"&gt;*args&lt;/span&gt; e &lt;span
style="color: #000000;"&gt;**kwargs&lt;/span&gt; são opcionais, como
demonstrado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; show_args&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hey&amp;quot;&lt;/span&gt;, *args, **kwargs&lt;span class="o"&gt;)&lt;/span&gt;
hey
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Na chamada da função o argumento normal é fornecido normalmente enquanto
os argumentos opcionais são desempacotados na chamada.&lt;/p&gt;
&lt;h2&gt;Funções Anônimas&lt;/h2&gt;
&lt;p&gt;Python também tem suporte para &lt;strong&gt;&lt;em&gt;funções anônimas&lt;/em&gt;&lt;/strong&gt;. Essas função são
criadas usando a palavra chave &lt;span
style="color: #000088;"&gt;lambda.&lt;/span&gt;Expressões lambda em python são da
seguinte forma:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;lambda_expr&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;lambda&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;parameter_list&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Expressões lambda retornam objetos de função depois da avaliação e tem
os mesmo atributos das funções nomeadas. Expressões lamda são
normalmente apenas usadas para funções muito simples em python, como
demonstrado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;square&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; lambda x: x**2
&amp;gt;&amp;gt;&amp;gt; &lt;span class="k"&gt;for&lt;/span&gt; i in range&lt;span class="o"&gt;(&lt;/span&gt;10&lt;span class="o"&gt;)&lt;/span&gt;:
    square&lt;span class="o"&gt;(&lt;/span&gt;i&lt;span class="o"&gt;)&lt;/span&gt;
0
1
4
9
16
25
36
49
64
81
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A expressão lambda acima é equivalente a seguinte função nomeada:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def square&lt;span class="o"&gt;(&lt;/span&gt;x&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="k"&gt;return&lt;/span&gt; x**2
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;&lt;/h3&gt;
&lt;h2&gt;Funções aninhadas e Closures&lt;/h2&gt;
&lt;p&gt;Definições de funções dentro de uma função cria funções aninhadas, assim
como mostrado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def outer&lt;span class="o"&gt;()&lt;/span&gt;:
        &lt;span class="nv"&gt;outer_var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;outer variable&amp;quot;&lt;/span&gt;
        def inner&lt;span class="o"&gt;()&lt;/span&gt;:
            &lt;span class="k"&gt;return&lt;/span&gt; outer_var
        &lt;span class="k"&gt;return&lt;/span&gt; inner
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nesse tipo de definição de função, a função &lt;span
style="color: #000000;"&gt;inner&lt;/span&gt; está apenas no escopo dentro da
função &lt;span style="color: #000000;"&gt;outer&lt;/span&gt;, por isso é na maioria
das vezes mais útil quando a função inner está sendo retornada
(movendo-a para o escopo da outer) ou quando está sendo passada em uma
outra função. Em funções aninhadas, tais como no exemplo acima, uma nova
instância da função aninhada é criada em cada chamada da função outer.
Isso porque durante a execução da função outer, a definição da nova
função inner é executada, mas o corpo não é executado.&lt;/p&gt;
&lt;p&gt;Uma função aninhada tem acesso ao ambiente em que foi criada. Isso é um
resultado direto da semântica da definição de função python. Um
resultado é que a variável definida na função outer pode ser
referenciada na função inner mesmo depois da função outer já ter
finalizado sua execução.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;outer&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;outer_var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;outer variable&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;outer_var&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;inner&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; outer&lt;span class="o"&gt;()&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; x
&amp;lt;&lt;span class="k"&gt;function&lt;/span&gt; inner at 0x0273BCF0&amp;gt;
&amp;gt;&amp;gt;&amp;gt; x&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;outer variable&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Quando funções aninhadas referenciam variáveis de funções externas nós
dizemos que a função aninhada está fechada (closure) sobre a variável
referenciada. Nós podemos usar um dos atributos especiais de objetos
função, &lt;span style="color: #000000;"&gt;__closure__&lt;/span&gt; para
acessar as variáveis fechadas, como demonstrado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;cl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; x.__closure__
&amp;gt;&amp;gt;&amp;gt; cl
&lt;span class="o"&gt;(&lt;/span&gt;&amp;lt;cell at 0x029E4470: str object at 0x02A0FD90&amp;gt;,&lt;span class="o"&gt;)&lt;/span&gt;

&amp;gt;&amp;gt;&amp;gt; cl&lt;span class="o"&gt;[&lt;/span&gt;0&lt;span class="o"&gt;]&lt;/span&gt;.cell_contents
&lt;span class="s1"&gt;&amp;#39;outer variable&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Closures em python tem um comportamento peculiar. No python 2.x e
abaixo, variáveis que apontam para tipos imutáveis tais como string e
números não podem ser recuperados dentro de um closure. O exemplo abaixo
ilustra isso:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; counter&lt;span class="o"&gt;()&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; c&lt;span class="o"&gt;()&lt;/span&gt;
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line 1, in &amp;lt;module&amp;gt;
  File &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line 4, in c
UnboundLocalError: &lt;span class="nb"&gt;local &lt;/span&gt;variable &lt;span class="s1"&gt;&amp;#39;count&amp;#39;&lt;/span&gt; referenced before assignment
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Uma solução bastante instável para isso é fazer uso de um tipo mutável
para capturar o closure, como mostrado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; counter&lt;span class="o"&gt;()&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; c&lt;span class="o"&gt;()&lt;/span&gt;
1
&amp;gt;&amp;gt;&amp;gt; c&lt;span class="o"&gt;()&lt;/span&gt;
2
&amp;gt;&amp;gt;&amp;gt; c&lt;span class="o"&gt;()&lt;/span&gt;
3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Python 3 introduziu a palavra chave &lt;span
style="color: #000088;"&gt;nonlocal&lt;/span&gt; que pode ser usada para resolver
esse problema de escopo de closure, como mostrado abaixo. No tutorial
sobre &lt;strong&gt;namespaces&lt;/strong&gt;, nós descrevemos essas peculiaridades em mais
detalhes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;nonlocal&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;
        &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Closures podem ser usados para manter estados (&lt;strong&gt;não é para isso que
classes servem&lt;/strong&gt;) e para algum simples casos, fornecendo uma solução
mais sucinta e legível que classes. Nós usamos um exemplo de registro
(logging) copiado do
&lt;a href="http://tech.pro/tutorial/1512/python-decorators"&gt;tech_pro&lt;/a&gt; para
ilustrar isso. Imagine uma API de registro extremamente trivial usando
classes baseadas em orientação a objetos que pode fazer logon em
diferentes níveis:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{}: {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_level&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;log_info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;info&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;log_warning&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;warning&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;log_error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Essa mesma funcionalidade pode ser implementada com closures, como
demonstrado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{}: {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;

&lt;span class="n"&gt;log_info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;info&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;log_warning&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;warning&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;log_error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A versão baseada em closure pode ser visto como a maneira mais sucinta e
legível, apesar de que ambas versões implementam a mesma funcionalidade.
Closures também desempenham um papel importante em uma grande função
Python: &lt;strong&gt;funções decoradoras&lt;/strong&gt; &lt;em&gt;(function decorators)&lt;/em&gt;. Essa é uma
funcionalidade amplamente usada que está explicada no próximo tutorial.&lt;/p&gt;
&lt;h3&gt;Leitura Complementar&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://tech.pro/tutorial/1512/python-decorators"&gt;Closures em Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/tutorial/controlflow.html#defining-functions"&gt;Definindo funções&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://dunderlabs.github.io/pages/pythonista-intermediario.html"&gt;Clique aqui para voltar para a tabela de conteúdo.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;N.T: Pessoal, tive uma certa dificuldade ao traduzir este capítulo da
série. Então gostaria de contar com o feedback de vocês nos comentários
para saber se conseguiram entender o que foi proposto :D&lt;/p&gt;</summary><category term="python"></category><category term="python function"></category><category term="translations"></category></entry><entry><title>Introdução ao Python Generators</title><link href="https://dunderlabs.github.io/introducao-ao-python-generators.html" rel="alternate"></link><updated>2015-02-04T12:16:00-03:00</updated><author><name>Patrick Mazulo</name></author><id>tag:dunderlabs.github.io,2015-02-04:introducao-ao-python-generators.html</id><summary type="html">&lt;p&gt;&lt;img alt="Créditos da imagem" src="https://dunderlabs.github.io/images/posts/relationships-generator-iterator.png" /&gt;
Créditos da imagem: &lt;a href="http://nvie.com/posts/iterators-vs-generators/"&gt;http://nvie.com/posts/iterators-vs-generators/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Geradores&lt;/em&gt; (&lt;em&gt;generators&lt;/em&gt;) é um conceito muito fascinante em Python;
&lt;em&gt;geradores&lt;/em&gt; tem uma ampla gama de aplicações, que vai desde simples
avaliação preguiçosa (&lt;em&gt;lazy evaluation&lt;/em&gt;) até avançadas execuções
simultâneas de tarefas (&lt;em&gt;veja&lt;/em&gt; &lt;a href="http://www.dabeaz.com/finalgenerator/"&gt;David
Beazley&lt;/a&gt;). Antes de mergulharmos
no fascinante mundo dos geradores Python, nós pegaremos um pequeno
desvio para explicar iteradores Python (&lt;em&gt;python iterators&lt;/em&gt;), um conceito
que eu acho que seja parte integrante para entender geradores.&lt;/p&gt;
&lt;h3&gt;Iteradores Python&lt;/h3&gt;
&lt;p&gt;Simplificando, um iterador em Python é qualquer tipo Python que pode ser
usado com um loop &lt;em&gt;for.&lt;/em&gt; Listas, tuplas, dicionários e &lt;em&gt;sets&lt;/em&gt; Python são
todos exemplos de iteradores embutidos. Alguém pode perguntar: "O que
faz desses tipos um iterador, e essa é uma propriedade apenas dos tipos
embutidos do Python?"&lt;/p&gt;
&lt;p&gt;Esses tipos são iteradores porque eles implementam o &lt;strong&gt;protocolo
iterador&lt;/strong&gt;. Então, &lt;strong&gt;O que é um protocolo iterador&lt;/strong&gt;? Para responder
esta pergunta, vamos precisar fazer outro pequeno desvio. Em Python,
existem alguns métodos especiais, comumente chamados como &lt;strong&gt;&lt;em&gt;métodos
mágicos&lt;/em&gt;&lt;/strong&gt;. Pode parecer estranho, mas apenas fique comigo e acredite
pela fé no que digo, pelo menos, até chegarmos à orientação a objetos em
Python.&lt;/p&gt;
&lt;p&gt;Esses métodos normalmente não são chamados explicitamente no código, mas
são chamados implicitamente durante sua execução. Um exemplo muito
familiar desses métodos mágicos, é o método &lt;em&gt;__&lt;span
style="color: #000000;"&gt;init&lt;/span&gt;__&lt;/em&gt;, que é mais ou menos como se
fosse um construtor que é chamado durante a inicialização de um objeto
Python. Semelhante a maneira como o método &lt;em&gt;__&lt;span
style="color: #000000;"&gt;init&lt;/span&gt;__&lt;/em&gt; tem de ser implementado na
inicialização de um objeto personalizado, o protocolo iterador tem uma
série de métodos mágicos que precisam ser implementados em qualquer
objeto que queira ser usado como um &lt;strong&gt;iterador&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Esses são os seguintes métodos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;O método __&lt;span style="color: #000000;"&gt;iter&lt;/span&gt;__ que é
    chamado na inicialização de um iterador. Ele deve retornar um objeto
    que tem o método &lt;em&gt;&lt;span style="color: #000088;"&gt;next&lt;/span&gt;()&lt;/em&gt; (no
    Python 3 este método foi mudado para __&lt;span
    style="color: #000000;"&gt;next&lt;/span&gt;__).&lt;/li&gt;
&lt;li&gt;O método &lt;span style="color: #000088;"&gt;&lt;em&gt;next&lt;/em&gt;&lt;/span&gt; que é chamado
    sempre que a função global &lt;em&gt;&lt;span
    style="color: #000088;"&gt;next&lt;/span&gt;()&lt;/em&gt; é invocada com o iterador
    como argumento. O método iterador &lt;span
    style="color: #000088;"&gt;&lt;em&gt;next&lt;/em&gt;&lt;/span&gt;deve retornar o próximo valor
    do iterável. Quando um iterador é usado com um loop &lt;em&gt;for&lt;/em&gt;, o &lt;em&gt;for&lt;/em&gt;
    chama implicitamente o método &lt;em&gt;&lt;span
    style="color: #000088;"&gt;next&lt;/span&gt;()&lt;/em&gt;. Este método levanta uma
    exceção &lt;span style="color: #660066;"&gt;&lt;em&gt;StopIteration&lt;/em&gt;&lt;/span&gt; quando
    não existe mais nenhum novo valor, para sinalizar o fim da iteração.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Qualquer classe Python pode ser definida para agir como um iterador,
desde que o protocolo iterador seja implementado. Isto é ilustrado
através da implementação de um simples iterador que retorna os números
da sequência Fibonacci até um determinado valor máximo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Fib&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                                        
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;                      
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__iter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;                          
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;                          
        &lt;span class="n"&gt;fib&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;StopIteration&lt;/span&gt;                  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;           
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt;for i in Fib&lt;span class="o"&gt;(&lt;/span&gt;10&lt;span class="o"&gt;)&lt;/span&gt;:
        print i      

0
1
1
2
3
5
8
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nós também podemos ir mais em frente e implementar nossa própria função
&lt;span style="color: #000000;"&gt;&lt;em&gt;range&lt;/em&gt;&lt;/span&gt; personalizada para loop em
números. Esta simples implementação apenas entra no loop partindo do 0
para cima.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomRange&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__iter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;numb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;StopIteration&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;numb&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="k"&gt;for&lt;/span&gt; i in CustomRange&lt;span class="o"&gt;(&lt;/span&gt;10&lt;span class="o"&gt;)&lt;/span&gt;:
        print i 
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Voltando aos Geradores&lt;/h3&gt;
&lt;p&gt;Agora, nós temos um entendimento básico sobre iteradores, mas não como
eles se relacionam com geradores. Em resumo, geradores são iteradores. A
&lt;strong&gt;&lt;em&gt;PEP 255&lt;/em&gt;&lt;/strong&gt;, que descreve simples geradores, refere-se a geradores
pelo seu nome completo: &lt;strong&gt;&lt;em&gt;generator-iterator&lt;/em&gt;&lt;/strong&gt; (gerador de
iteradores). Geradores são utilizados quer chamando o método &lt;em&gt;next&lt;/em&gt; no
objeto gerador, ou usando o objeto gerador em um loop &lt;em&gt;for&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Em Python, funções geradoras ou apenas geradores retornam objetos
geradores. Esses geradores são funções que contêm a palavra reservada
&lt;span style="color: #000088;"&gt;&lt;em&gt;yield&lt;/em&gt;&lt;/span&gt;. Ao invés de ter que
escrever cada gerador com o método &lt;em&gt;__&lt;span
style="color: #000000;"&gt;iter&lt;/span&gt;__&lt;/em&gt; e &lt;span
style="color: #000088;"&gt;&lt;em&gt;next&lt;/em&gt;&lt;/span&gt;, que é bastante complicado, Python
fornece a palavra reservada &lt;span style="color: #000088;"&gt;&lt;em&gt;yield&lt;/em&gt;&lt;/span&gt;
que provê uma maneira fácil para definir geradores. Por exemplo, o
iterador de Fibonacci pode ser remodelado como um gerador usando a
palavra reservada &lt;span style="color: #000088;"&gt;&lt;em&gt;yield&lt;/em&gt;&lt;/span&gt;, como
mostrado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O uso da palavra reservada &lt;span
style="color: #000088;"&gt;&lt;em&gt;yield&lt;/em&gt;&lt;/span&gt;simplifica muito a criação do
gerador.&lt;/p&gt;
&lt;h3&gt;A palavra reservada &lt;em&gt;yield&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;A palavra reservada &lt;span style="color: #000088;"&gt;&lt;em&gt;yield&lt;/em&gt;&lt;/span&gt;é usada
da seguinte maneira.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;lista_expressao&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O &lt;span style="color: #000088;"&gt;&lt;em&gt;yield&lt;/em&gt;&lt;/span&gt;é fundamental para as
funções geradoras em Python, mas o que essa palavra reservada &lt;span
style="color: #000088;"&gt;&lt;em&gt;yield&lt;/em&gt;&lt;/span&gt; faz? Para entender o &lt;span
style="color: #000088;"&gt;&lt;em&gt;yield&lt;/em&gt;&lt;/span&gt;, nós contrastamos ela com a
palavra reservada &lt;span style="color: #000088;"&gt;&lt;em&gt;return&lt;/em&gt;&lt;/span&gt;;  uma
outra palavra chave que devolve o controle para o chamador de uma
função. Quando uma função que está executando encontra o &lt;span
style="color: #000088;"&gt;&lt;em&gt;yield&lt;/em&gt;&lt;/span&gt;, ela suspende a execução naquele
ponto, salva seu contexto e retorna para o chamador, juntamente com
qualquer valor na lista_expressao; quando o chamador invoca o método
&lt;em&gt;next&lt;/em&gt; no objeto, a execução da função continua até outro &lt;span
style="color: #000000;"&gt;&lt;em&gt;yield&lt;/em&gt;&lt;/span&gt; ou &lt;span
style="color: #000000;"&gt;&lt;em&gt;return&lt;/em&gt;&lt;/span&gt; ser encontrado, ou quando o fim
da função é atingido. Citando a &lt;strong&gt;&lt;em&gt;PEP 255&lt;/em&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Se a declaração de um yield é encontrado, o estado da função é
congelado, e o valor da lista_expressao é retornado para o chamador
do método next(). Por "congelado" nós queremos dizer que todo o estado
local é retido, incluindo a ligação das variáveis locais, o ponteiro
de instrução e a pilha de avaliação interna: informação suficiente é
salva para que na próxima vez que o .next() é invocado, a função pode
proceder exatamente como se a declaração yield fosse apenas outra
chamada externa. Por outro lado, quando uma função encontra a
declaração de um &lt;span style="color: #000088;"&gt;return&lt;/span&gt;, ele
retorna para o chamador junto com qualquer valor que prosseguir a
declaração do &lt;span style="color: #000088;"&gt;return&lt;/span&gt;, e a
execução de tal função é completa para todos os efeitos. Pode-se
pensar do &lt;span style="color: #000088;"&gt;yield&lt;/span&gt; como o causador
de uma interrupção temporária.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Geradores Python em ação&lt;/h3&gt;
&lt;p&gt;Retornando para a função de números Fibonacci, se nós queremos gerar
todos os número Fibonacci até um determinado valor, o seguinte trecho de
código não-gerador pode ser usado para criar a sequência&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O trecho acima calcula avidamente todos os números abaixo do valor &lt;em&gt;max&lt;/em&gt;
e retorna a coleção de tais números usando uma simples chamada de
função. Por outro lado, usando o gerador Fibonacci para resolver o mesmo
problema é um jogada diferente. Nós podemos usá-lo em um loop &lt;em&gt;for&lt;/em&gt; e
permitir o construtor do &lt;em&gt;for&lt;/em&gt; implicitamente inicializar o gerador e
chamar o método &lt;span style="color: #000088;"&gt;next&lt;/span&gt; no objeto
gerador, ou ao explicitamente inicializá-lo e chamar o método &lt;span
style="color: #000088;"&gt;next&lt;/span&gt; no objeto. Os valores são
retornados, um depois do outro, ao chamar o método &lt;span
style="color: #000088;"&gt;next&lt;/span&gt; no gerador. O gerador de números
Fibonacci é implementado usando &lt;span
style="color: #000088;"&gt;&lt;em&gt;yield&lt;/em&gt;&lt;/span&gt; logo abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nas seções seguintes, nós explicitamente inicializaremos o gerador, e
faremos uso da função &lt;span style="color: #000088;"&gt;next&lt;/span&gt; para
pegar os valores do gerador. Primeiro, nós vamos inicializar o objeto
gerador como mostrado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;gen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; fib&lt;span class="o"&gt;(&lt;/span&gt;10&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; gen
&amp;lt;generator object fib at 0x1069a6d20&amp;gt;
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O que aconteceu acima é que quando o gerador é chamado, os argumentos
(max tem um valor máximo de 10) são ligados aos nomes, mas o corpo da
função não é executado. Ao invés disso, um objeto &lt;strong&gt;generator-iterator&lt;/strong&gt;
é retornado como mostrado pelo valor de gen. Este objeto pode então ser
usado como um iterador. Note que é a presença da palavra reservada &lt;span
style="color: #000088;"&gt;&lt;em&gt;yield&lt;/em&gt;&lt;/span&gt; é responsável por isso.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; next&lt;span class="o"&gt;(&lt;/span&gt;gen&lt;span class="o"&gt;)&lt;/span&gt;
0
&amp;gt;&amp;gt;&amp;gt; next&lt;span class="o"&gt;(&lt;/span&gt;gen&lt;span class="o"&gt;)&lt;/span&gt;
1
&amp;gt;&amp;gt;&amp;gt; next&lt;span class="o"&gt;(&lt;/span&gt;gen&lt;span class="o"&gt;)&lt;/span&gt;
1
&amp;gt;&amp;gt;&amp;gt; next&lt;span class="o"&gt;(&lt;/span&gt;gen&lt;span class="o"&gt;)&lt;/span&gt;
2
&amp;gt;&amp;gt;&amp;gt; next&lt;span class="o"&gt;(&lt;/span&gt;gen&lt;span class="o"&gt;)&lt;/span&gt;
3
&amp;gt;&amp;gt;&amp;gt; next&lt;span class="o"&gt;(&lt;/span&gt;gen&lt;span class="o"&gt;)&lt;/span&gt;
5
&amp;gt;&amp;gt;&amp;gt; next&lt;span class="o"&gt;(&lt;/span&gt;gen&lt;span class="o"&gt;)&lt;/span&gt;
8
&amp;gt;&amp;gt;&amp;gt; next&lt;span class="o"&gt;(&lt;/span&gt;gen&lt;span class="o"&gt;)&lt;/span&gt;
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line 1, in &amp;lt;module&amp;gt;
StopIteration
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora quando chamamos a função &lt;span style="color: #000088;"&gt;next&lt;/span&gt;
com o objeto gerador como argumento, o corpo da função geradora é
executado até ela encontrar a declaração de um &lt;em&gt;&lt;span
style="color: #000088;"&gt;yield&lt;/span&gt;,&lt;/em&gt; &lt;span
style="color: #000088;"&gt;&lt;em&gt;return&lt;/em&gt;&lt;/span&gt; ou o fim da função ser atingido.
No caso de encontrar a declaração de um &lt;em&gt;yield&lt;/em&gt;, a expressão seguinte ao
&lt;em&gt;yield&lt;/em&gt; é retornado para o chamador, e o estado da função é salvo.
Quando a função &lt;span style="color: #000088;"&gt;next&lt;/span&gt; é chamada no
objeto gerador de Fibonacci, a variável &lt;span
style="color: #000000;"&gt;a&lt;/span&gt; &lt;span style="color: #000000;"&gt;está
ligado a 0&lt;/span&gt; e &lt;span style="color: #000000;"&gt;b está ligado a
1&lt;/span&gt;. A condição do &lt;span style="color: #000088;"&gt;&lt;em&gt;while&lt;/em&gt;&lt;/span&gt; é
verdadeira, de modo que a primeira declaração do loop &lt;em&gt;while&lt;/em&gt; é
executada, que passa a ser uma expressão &lt;span
style="color: #000088;"&gt;&lt;em&gt;yield&lt;/em&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Esta expressão retorna para o chamador o valor de a que passa a ser 0, e
suspende naquele ponto com todo o contexto local salvo. Pense nisso como
comer seu almoço em partes, e que em seguida você guarda ele pra
continuar a comer mais tarde. Você pode continuar comendo até seu almoço
se esgotar, e no caso de um gerador isto é a função obtendo a declaração
de um &lt;em&gt;return&lt;/em&gt; ou o fim do corpo da função. Quando a função &lt;span
style="color: #000088;"&gt;next&lt;/span&gt; é chamada no objeto Fibonacci
novamente, a execução é retomada na linha a, b = b, a+b e continua
executando normalmente até um &lt;span
style="color: #000088;"&gt;&lt;em&gt;yield&lt;/em&gt;&lt;/span&gt; ser encontrado novamente. E assim
continua até a condição do loop for false e uma exceção &lt;span
style="color: #660066;"&gt;StopIteration&lt;/span&gt; seja levantada, que é o
sinal que não há mais dados para gerar.&lt;/p&gt;
&lt;h3&gt;Expressões Geradoras&lt;/h3&gt;
&lt;p&gt;Em &lt;a href="http://indacode.com/python-comprehensions/" title="Python Comprehensions"&gt;Python
Comprehensions&lt;/a&gt;nós
discutimos sobre list comprehensions e como elas são formadas. Uma
desvantagem com list comprehensions é que os valores são todos
calculados de uma vez, independente se esses valores são necessários
naquele momento ou não. Isto pode algumas vezes consumir uma quantidade
excessiva de memória. A &lt;a href="https://www.python.org/dev/peps/pep-0289/"&gt;&lt;strong&gt;PEP
289&lt;/strong&gt;&lt;/a&gt;propôs a expressão
geradora para resolver isto, e esta proposta foi aceita e adicionada a
linguagem. Expressões geradoras são como list comprehensions; a única
diferença é que os colchetes na list comprehensions são substituídos por
parênteses. Nós contrastamos uma list comprehension com uma expressão
geradora logo abaixo.&lt;/p&gt;
&lt;p&gt;Para gerar uma lista com o quadrado dos número de 0 e 10 usando list
comprehensions é feita da seguinte forma:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;i**2 &lt;span class="k"&gt;for&lt;/span&gt; i in range&lt;span class="o"&gt;(&lt;/span&gt;10&lt;span class="o"&gt;)]&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; squares
&lt;span class="o"&gt;[&lt;/span&gt;0, 1, 4, 9, 16, 25, 36, 49, 64, 81&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nós poderíamos usar uma expressão geradora, tal como mostrada abaixo, no
lugar de uma list comprehension:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;i**2 &lt;span class="k"&gt;for&lt;/span&gt; i in range&lt;span class="o"&gt;(&lt;/span&gt;10&lt;span class="o"&gt;))&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; squares
&amp;lt;generator object &amp;lt;genexpr&amp;gt; at 0x7f8c48ec8cd0&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nós podemos então acessar os valores do gerador usando um loop &lt;em&gt;for&lt;/em&gt; ou
o método &lt;span style="color: #000088;"&gt;next&lt;/span&gt;, como mostrado
abaixo. Cada valor é computado sob demanda, ou seja, só quando
requisitado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="k"&gt;for&lt;/span&gt; square in squares:
            print square
0
1
4
9
16
25
36
49
64
81
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;De que servem esses geradores?&lt;/h3&gt;
&lt;p&gt;Geradores Python fornecem a base para &lt;strong&gt;avaliação preguiçosa&lt;/strong&gt; e
&lt;strong&gt;cálculo sob demanda&lt;/strong&gt; em Python. Avaliação preguiçosa é uma parte
integral do processamento de fluxo (processamento de grande quantidades
de dados). Por exemplo, imagine que nós queremos criar uma quantidade
indeterminada de números Fibonacci, isto não seria possível com uma
abordagem sem geradores, porque nós temos que definir a quantidade de
números que precisamos ou entrar num loop infinito. Por outro lado,
adotando a abordagem dos geradores, fazer isso se torna trivial; nós
apenas temos que chamar o &lt;span style="color: #000088;"&gt;next&lt;/span&gt; para
pegar o próximo número Fibonacci, sem se preocupar sobre onde ou quando
o fluxo de números terminam.&lt;/p&gt;
&lt;p&gt;Um tipo mais prático de processamento de fluxo é manipulando grandes
arquivos de dados tais como arquivos de log. Geradores fornecem métodos
eficientes para processamento desses dados, onde só algumas partes do
arquivo são tratadas em um ponto no tempo. (&lt;a href="http://www.dabeaz.com/generators-uk/GeneratorsUK.pdf"&gt;David
Beazley&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Geradores também podem ser usados para substituir callbacks (&lt;em&gt;retorno de
chamada de funções&lt;/em&gt;). Ao invés de passar um callback para uma função, a
função pode ceder o controle (&lt;em&gt;yield control&lt;/em&gt;) para o chamador quando
ele precisar informar algo ao chamador. O chamador pode então invocar
uma função que teria sido usada como callback. Isto libera a função
principal da obrigação de saber sobre o callback.&lt;/p&gt;
&lt;p&gt;Em um nível mais avançado, geradores podem ser usados para implementar
concorrência (&lt;a href="http://www.dabeaz.com/finalgenerator/"&gt;David Beazley&lt;/a&gt;).
Quando um gerador &lt;span style="color: #000000;"&gt;&lt;em&gt;yields&lt;/em&gt;&lt;/span&gt; cede o
controle para o chamador, o chamador pode então ir em frente e chamar
outro gerador, simulando concorrência.&lt;/p&gt;
&lt;p&gt;O que listamos acima são apenas algumas das aplicabilidades dos
geradores Python. Em um post futuro, nós discutiremos novas adições ao
gerador Python que permitem um chamador enviar valores para o gerador,
bem como alguns usos avançados de geradores.&lt;/p&gt;
&lt;h3&gt;Leitura complementar&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-0255/"&gt;PEP 255 – Simple Generators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-0289/"&gt;PEP 289 – Generator Expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.dabeaz.com/finalgenerator/FinalGenerator.pdf"&gt;Generators: The Final Frontier by David Beazley&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/tutorial/classes.html#generators"&gt;Python Tutorials - Generators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/tutorial/classes.html#generator-expressions"&gt;Python Tutorials - Generator Expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/tutorial/classes.html#iterators"&gt;Python Tutorials - Iterators&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://dunderlabs.github.io/pages/pythonista-intermediario.html"&gt;Clique aqui para voltar para a tabela de conteúdo.&lt;/a&gt;&lt;/p&gt;</summary><category term="python"></category><category term="python iterators"></category><category term="generators"></category><category term="translations"></category></entry><entry><title>Python Comprehensions</title><link href="https://dunderlabs.github.io/python-comprehensions.html" rel="alternate"></link><updated>2015-01-30T02:25:00-03:00</updated><author><name>Patrick Mazulo</name></author><id>tag:dunderlabs.github.io,2015-01-30:python-comprehensions.html</id><summary type="html">&lt;p&gt;&lt;img alt="Créditos da imagem" src="https://dunderlabs.github.io/images/posts/list1.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Créditos da imagem: &lt;a href="https://datasciencelab.wordpress.com/2014/01/08/list-comprehension-in-python/"&gt;https://datasciencelab.wordpress.com/2014/01/08/list-comprehension-in-python/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python comprehensions são construções sintáticas que permitem que
sequências sejam construídas a partir de outras sequências de forma
clara e concisa. Existem três tipo de Python comprehensions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;list comprehensions,&lt;/li&gt;
&lt;li&gt;set comprehenscions, e&lt;/li&gt;
&lt;li&gt;dict comprehensions.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Construções de list comprehensions tem sido parte do Python desde a
versão 2.0, enquanto set e dict comprehensions só a partir do Python
2.7.&lt;/p&gt;
&lt;h3&gt;List Comprehensions&lt;/h3&gt;
&lt;p&gt;List comprehensions são de longe a construção de comprehensions mais
popular. List comprehensions fornecem uma maneira concisa de criar uma
nova lista de elementos que satisfazem uma dada condição a partir de um
&lt;strong&gt;iterável&lt;/strong&gt;. Um &lt;strong&gt;iterável&lt;/strong&gt; é qualquer construção python que possa ser
posto/iterado em um loop. Exemplos de iteráveis embutidos incluem lists,
sets e tuples. O exemplo abaixo da &lt;a href="https://docs.python.org/2/tutorial/datastructures.html"&gt;Documentação
Python&lt;/a&gt; ilustra
o uso de list comprehensions. Neste exemplo, nós queremos criar uma
lista com os números elevado ao quadrado de 0 a 10. Uma maneira
convencional de criar esta lista sem comprehensions é mostrada abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span class="k"&gt;for&lt;/span&gt; x in range&lt;span class="o"&gt;(&lt;/span&gt;10&lt;span class="o"&gt;)&lt;/span&gt;:
...     squares.append&lt;span class="o"&gt;(&lt;/span&gt;x**2&lt;span class="o"&gt;)&lt;/span&gt;
...
&amp;gt;&amp;gt;&amp;gt; squares
&lt;span class="o"&gt;[&lt;/span&gt;0, 1, 4, 9, 16, 25, 36, 49, 64, 81&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A mesma lista pode ser criada de uma maneira mais concisa usando list
comprehensions, como abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;x**2 &lt;span class="k"&gt;for&lt;/span&gt; x in range&lt;span class="o"&gt;(&lt;/span&gt;10&lt;span class="o"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A versão com comprehension parece ser obviamente mais clara e concisa do
que o método convencional.&lt;/p&gt;
&lt;p&gt;De acordo com a documentação python, &lt;strong&gt;uma list comprehension consiste
de colchetes contendo uma expressão seguida por uma ou mais cláusulas 
&lt;em&gt;for&lt;/em&gt; ou cláusulas &lt;em&gt;if,&lt;/em&gt; como mostrado abaixo&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;[expression for item1 in iterable1 if condition1 
            for item2 in iterable2 if condition2
            ...
            for itemN in iterableN if conditionN ]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O resultado é uma nova lista resultante da avaliação da expressão no
contexto das cláusulas &lt;em&gt;for&lt;/em&gt; e &lt;em&gt;if&lt;/em&gt; em seguida. Por exemplo, para criar
uma lista com o quadrado dos números pares entre 0 e 10, a seguinte
comprehension é usada:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;even_squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;i**2 &lt;span class="k"&gt;for&lt;/span&gt; i in range&lt;span class="o"&gt;(&lt;/span&gt;10&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; i % &lt;span class="nv"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; 0&lt;span class="o"&gt;]&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; even_squares
&lt;span class="o"&gt;[&lt;/span&gt;0, 4, 16, 36, 64&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A expressão i**2 é computada no contexto da cláusula &lt;em&gt;for&lt;/em&gt; que itera
sobre os número de 0 a 10, e a cláusula &lt;em&gt;if&lt;/em&gt;  filtra os números não
pares.&lt;/p&gt;
&lt;h3&gt;Loops &lt;em&gt;for&lt;/em&gt; aninhandos numa list comprehensions&lt;/h3&gt;
&lt;p&gt;List comprehensions também podem ser usadas com múltiplos ou loops &lt;em&gt;for&lt;/em&gt;
aninhados. Considerando, por exemplo, o simples fragmento de código
mostrado logo abaixo que cria uma tupla de pares de números extraídos
das duas sequências apresentadas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;combs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span class="k"&gt;for&lt;/span&gt; x in &lt;span class="o"&gt;[&lt;/span&gt;1,2,3&lt;span class="o"&gt;]&lt;/span&gt;:
...     &lt;span class="k"&gt;for&lt;/span&gt; y in &lt;span class="o"&gt;[&lt;/span&gt;3,1,4&lt;span class="o"&gt;]&lt;/span&gt;:
...         &lt;span class="k"&gt;if&lt;/span&gt; x !&lt;span class="o"&gt;=&lt;/span&gt; y:
...             combs.append&lt;span class="o"&gt;((&lt;/span&gt;x, y&lt;span class="o"&gt;))&lt;/span&gt;
...
&amp;gt;&amp;gt;&amp;gt; combs
&lt;span class="o"&gt;[(&lt;/span&gt;1, 3&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;1, 4&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;2, 3&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;2, 1&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;2, 4&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;3, 1&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;3, 4&lt;span class="o"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O código acima pode ser reescrito de uma maneira mais simples e concisa,
como demonstrado abaixo usando list comprehensions.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="o"&gt;[(&lt;/span&gt;x, y&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; x in &lt;span class="o"&gt;[&lt;/span&gt;1,2,3&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; y in &lt;span class="o"&gt;[&lt;/span&gt;3,1,4&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; x !&lt;span class="o"&gt;=&lt;/span&gt; y&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[(&lt;/span&gt;1, 3&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;1, 4&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;2, 3&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;2, 1&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;2, 4&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;3, 1&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;3, 4&lt;span class="o"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;É importante levar em consideração em como a ordem dos loops &lt;em&gt;for&lt;/em&gt; foi
usada nesta list comprehension. A observação cuidadosa dos trechos de
código usando comprehension e aquele sem comprehension mostra que a
ordem dos loops &lt;em&gt;for&lt;/em&gt; na comprehension seguiu a mesma ordem, como se
tivesse sido escrita sem comprehensions. O mesmo se aplica para loops
&lt;em&gt;for&lt;/em&gt; aninhados com profundidade maior que 2 loops.&lt;/p&gt;
&lt;h3&gt;List Comprehensions Aninhadas&lt;/h3&gt;
&lt;p&gt;List comprehensions também podem ser aninhadas. Considere o seguinte
exemplo extraído da documentação python, de uma matriz 3x4 implementada
como uma lista de 3 listas de tamanho 4:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;matrix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
...     &lt;span class="o"&gt;[&lt;/span&gt;1, 2, 3, 4&lt;span class="o"&gt;]&lt;/span&gt;,
...     &lt;span class="o"&gt;[&lt;/span&gt;5, 6, 7, 8&lt;span class="o"&gt;]&lt;/span&gt;,
...     &lt;span class="o"&gt;[&lt;/span&gt;9, 10, 11, 12&lt;span class="o"&gt;]&lt;/span&gt;,
... &lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Transposição é uma operação das matrizes que cria uma nova matriz a
partir de uma velha, usando as linhas da matriz velha como as colunas da
matriz nova, e as colunas da matriz velha como as linhas da matriz nova.
As linhas e colunas da matriz precisam ser transpostas usando a seguinte
list comprehension:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="o"&gt;[[&lt;/span&gt;row&lt;span class="o"&gt;[&lt;/span&gt;i&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; row in matrix&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; i in range&lt;span class="o"&gt;(&lt;/span&gt;4&lt;span class="o"&gt;)]&lt;/span&gt;
&lt;span class="o"&gt;[[&lt;/span&gt;1, 5, 9&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="o"&gt;[&lt;/span&gt;2, 6, 10&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="o"&gt;[&lt;/span&gt;3, 7, 11&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="o"&gt;[&lt;/span&gt;4, 8, 12&lt;span class="o"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O código acima é equivalente ao trecho dado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;transposed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span class="k"&gt;for&lt;/span&gt; i in range&lt;span class="o"&gt;(&lt;/span&gt;4&lt;span class="o"&gt;)&lt;/span&gt;:
...     transposed.append&lt;span class="o"&gt;([&lt;/span&gt;row&lt;span class="o"&gt;[&lt;/span&gt;i&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; row in matrix&lt;span class="o"&gt;])&lt;/span&gt;
...
&amp;gt;&amp;gt;&amp;gt; transposed
&lt;span class="o"&gt;[[&lt;/span&gt;1, 5, 9&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="o"&gt;[&lt;/span&gt;2, 6, 10&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="o"&gt;[&lt;/span&gt;3, 7, 11&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="o"&gt;[&lt;/span&gt;4, 8, 12&lt;span class="o"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Set comprehensions&lt;/h3&gt;
&lt;p&gt;Set comprehensions foram adicionado ao python na versão 2.7. Em set
comprehensions, nós usamos chaves ao invés de colchetes. Por exemplo,
para criar o set do quadrado de todos os números entre 0 e 10, o
seguinte set comprehension pode ser usado em vez do loop normal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;i**2 &lt;span class="k"&gt;for&lt;/span&gt; i in range&lt;span class="o"&gt;(&lt;/span&gt;10&lt;span class="o"&gt;)}&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; x
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="o"&gt;([&lt;/span&gt;0, 1, 4, 81, 64, 9, 16, 49, 25, 36&lt;span class="o"&gt;])&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Dict Comprehension&lt;/h3&gt;
&lt;p&gt;Assim como set comprehensions, dict comprehensions foram adicionados ao
python na versão 2.7. Abaixo nós criamos um mapping, sendo as chaves os
números entre 0 e 10, e os valores seus quadrados, usando dict
comprehensions.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;i:i**2 &lt;span class="k"&gt;for&lt;/span&gt; i in range&lt;span class="o"&gt;(&lt;/span&gt;10&lt;span class="o"&gt;)}&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; x
&lt;span class="o"&gt;{&lt;/span&gt;0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Leitura complementar&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/tutorial/datastructures.html"&gt;Documentação Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python Essential Reference, Fourth Edition&lt;/li&gt;
&lt;li&gt;&lt;a href="http://python-3-patterns-idioms-test.readthedocs.org/en/latest/Comprehensions.html"&gt;Python 3 Patterns, Recipes and Idioms&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href="https://dunderlabs.github.io/pages/pythonista-intermediario.html"&gt;Clique aqui para voltar para a tabela de conteúdo.&lt;/a&gt;&lt;/p&gt;</summary><category term="python"></category><category term="iterators"></category><category term="list comprehensions"></category><category term="translations"></category></entry></feed>